local connections = {}

function create_connection(script_signal, callback)
    local proxy = {
        connection = script_signal:Connect(callback)
    }
    
    function proxy:disconnect()
        self.connection:Disconnect()

        table.clear(self)
        self = nil
    end

    table.insert(connections, proxy)
    return proxy
end

local hitsounds = {
    {name = "bell.wav", url = "https://github.com/nyulachan/nyula/blob/main/Sounds/bell.wav?raw=true"},
    {name = "bepis.wav", url = "https://github.com/nyulachan/nyula/blob/main/Sounds/bepis.wav?raw=true"},
    {name = "bubble.wav", url = "https://github.com/nyulachan/nyula/blob/main/Sounds/bubble.wav?raw=true"},
    {name = "cock.wav", url = "https://github.com/nyulachan/nyula/blob/main/Sounds/cock.wav?raw=true"},
    {name = "cod.wav", url = "https://github.com/nyulachan/nyula/blob/main/Sounds/cod.wav?raw=true"},
    {name = "fatality.wav", url = "https://github.com/nyulachan/nyula/blob/main/Sounds/fatality.wav?raw=true"},
    {name = "phonk.wav", url = "https://github.com/nyulachan/nyula/blob/main/Sounds/phonk.wav?raw=true"},
    {name = "skeet.wav", url = "https://github.com/xdPenguinlol/test2/raw/main/metallic.wav?raw=true"},
    {name = "sparkle.wav", url = "https://github.com/nyulachan/nyula/blob/main/Sounds/sparkle.wav?raw=true"},
    {name = "windows.wav", url = "https://github.com/SonicPoopy/Faith-Sounds/raw/main/windows.wav?raw=true"},
    {name = "neverlose.wav", url = "https://github.com/SonicPoopy/Faith-Sounds/raw/main/neverlose.wav?raw=true"},
    {name = "minecraftbow.wav", url = "https://github.com/SonicPoopy/Faith-Sounds/raw/main/minecraft%20bow.wav?raw=true"},
    {name = "stapler.wav", url = "https://github.com/SonicPoopy/Faith-Sounds/raw/main/stapler.wav?raw=true"},
    {name = "primordial.wav", url = "https://github.com/SonicPoopy/Faith-Sounds/raw/main/primordial.wav?raw=true"},
    {name = "rust.wav", url = "https://github.com/SonicPoopy/Faith-Sounds/raw/main/rust%20headshot.wav?raw=true"},
	{name = "69.wav", url = "https://github.com/xdPenguinlol/faith-sounds/blob/main/69.wav?raw=true"},
	{name = "burp.wav", url = "https://github.com/xdPenguinlol/faith-sounds/blob/main/burp.wav?raw=true"},
	{name = "coinmaster.wav", url = "https://github.com/xdPenguinlol/faith-sounds/blob/main/coinmaster.wav?raw=true"},
	{name = "klatsch.wav", url = "https://github.com/xdPenguinlol/faith-sounds/blob/main/klatsch.wav?raw=true"},
    {name = "fire.wav", url = "https://github.com/xdPenguinlol/faith-sounds/blob/main/fire.wav?raw=true"},
    {name = "roblox.wav", url = "https://github.com/xdPenguinlol/faith-sounds/blob/main/roblox.wav?raw=true"}
}

if not isfolder("hitsounds") then
    makefolder("hitsounds")
end

for _, sound in pairs(hitsounds) do
    local path = "hitsounds" .. "/" .. sound.name
    if not isfile(path) then
        writefile(path, game:HttpGet(sound.url))
    end
end

local config = {
    enabled = false,
    --
    Tracer = {
        enabled = false,
        color = Color3.fromRGB(244, 244, 244),
        thickness = 1,
    },
    Box = {
        enabled = false,
        color = Color3.fromRGB(244, 244, 244),
    },
    Chams = {
        enabled = false,
        fillcolor = Color3.fromRGB(170, 170, 170),
        filltransparency = 0.4,
        outlinecolor = Color3.fromRGB(244, 244, 244),
        outlinetransparency = 0.2,
    },
    HealthBar = {
        enabled = false,
        maxhealth = Color3.fromRGB(34, 215, 34),
        lowhealth = Color3.fromRGB(230, 0, 0),
    },
    Name = {
        enabled = false,
        color = Color3.fromRGB(244, 244, 244),
    },
    Misc = {
        Teamcheck = {
            enable = false,
            friendly = Color3.fromRGB(0, 153, 0),
            enemy = Color3.fromRGB(200, 0, 0),
        },
    },
}

getgenv().autopeekkeybind = Enum.KeyCode.M
getgenv().autopeek = false
getgenv().autopeekmaterial = "Neon"
getgenv().autopeektransparency = 0.65
getgenv().autopeekcolor = Color3.fromRGB(189, 172, 255)

getgenv().AntiBag = {
    Enabled = false,
}

getgenv().AntiStomp = {
    Enabled = false,
}

-- bullet tracers
BulletTracers = false

bullet_tracer_startcolor = Color3.fromRGB(255, 255, 255)
bullet_tracer_endcolor = Color3.fromRGB(255, 255, 255)

function GetGunyasseryaaah()
    if game.Players.LocalPlayer.Character then
        for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if v:FindFirstChild 'Ammo' then
                return v
            end
        end
    end
    return nil
end

local Services = {
    Players = game:GetService("Players"),
    UserInputService = game:GetService("UserInputService"),
    RunService = game:GetService("RunService"),
}

local Local = {
    Player = Services.Players.LocalPlayer,
    Mouse = Services.Players.LocalPlayer:GetMouse(),
}
local Other = {
    Camera = workspace.CurrentCamera,
    BeamPart = Instance.new("Part", workspace)
}

Other.BeamPart.Name = "BeamPart"
Other.BeamPart.Transparency = 1
local Settings = {
    StartColor = MainAccentColor,
    EndColor = MainAccentColor,
    StartWidth = 3,
    EndWidth = 3,
    ShowImpactPoint = false,
    ImpactTransparency = 0.5,
    ImpactColor = Color3.new(1, 1, 1),
    Time = 1,
}
game:GetService "RunService".Heartbeat:Connect(function()

end)
local funcs = {}
Local.Mouse.TargetFilter = Other.BeamPart
function funcs:Beam(v1, v2)
    v2 = Vector3.new(v2.X - 0.1, v2.Y + 0.2, v2.Z)
    local colorSequence = ColorSequence.new({
        ColorSequenceKeypoint.new(0, bullet_tracer_startcolor),
        ColorSequenceKeypoint.new(1, bullet_tracer_endcolor),
    })
    local Part = Instance.new("Part", Other.BeamPart)
    Part.Size = Vector3.new(0, 0, 0)
    Part.Massless = true
    Part.Transparency = 1
    Part.CanCollide = false
    Part.Position = v1
    Part.Anchored = true
    local Attachment = Instance.new("Attachment", Part)
    local Part2 = Instance.new("Part", Other.BeamPart)
    Part2.Size = Vector3.new(0, 0, 0)
    Part2.Transparency = 0
    Part2.CanCollide = false
    Part2.Position = v2
    Part2.Anchored = true
    Part2.Material = Enum.Material.ForceField
    Part2.Color = Settings.ImpactColor
    Part2.Massless = true
    local Attachment2 = Instance.new("Attachment", Part2)
    local Beam = Instance.new("Beam", Part)
    Beam.FaceCamera = true
    Beam.Color = colorSequence
    Beam.Attachment0 = Attachment
    Beam.Attachment1 = Attachment2
    Beam.LightEmission = 6
    Beam.LightInfluence = 1
    Beam.Width0 = Settings.StartWidth
    Beam.Width1 = Settings.EndWidth
    Beam.Texture = "http://www.roblox.com/asset/?id=1215691065"
    Beam.TextureSpeed = 2
    Beam.TextureLength = 1
    delay(Settings.Time, function()
        Part:Destroy()
        Part2:Destroy()
    end)
end

spawn(function()
    while task.wait(0.5) do
        gun = GetGunyasseryaaah()
        if gun then
            LastAmmo = gun.Ammo.Value
            gun.Ammo:GetPropertyChangedSignal("Value"):Connect(function()
                if BulletTracers and gun.Ammo.Value < LastAmmo then
                    LastAmmo = gun.Ammo.Value
                    funcs:Beam(gun.Handle.Position, Local.Mouse.hit.p)
                end
            end)
        end
    end
end)
--// //--

getgenv().LocalHighlight = {
    Enabled = false,
    FillColor = Color3.fromRGB(189, 172, 255),
    OutlineColor = Color3.fromRGB(170, 152, 215),
    OutlineTransparency = 0.6,
    FillTransparency = 0.75
}

getgenv().GunChams = {
    Enabled = false,
    Color = Color3.fromRGB(189, 172, 255),
    Material = "ForceField"
}

getgenv().CloneChams = {
    Enabled = false,
    Color = Color3.fromRGB(189, 172, 255),
    Material = "ForceField",
    Duration = 8
}


-- targetaim resolver (velocity recal)
function recalculate_velocity(target)
    if target and target.Character.HumanoidRootPart then
        local currentPosition = target.Character.HumanoidRootPart.Position
        local currentTime = tick() 

        local interval = 0.035
        task.wait(interval)
        
        local newPosition = target.Character.HumanoidRootPart.Position
        local newTime = tick()
        local timeInterval = (newTime-currentTime)
        local newVelocity = (newPosition-currentPosition)/timeInterval
        
        currentPosition = newPosition
        currentTime = newTime
        return newVelocity
    end
end

getgenv().Shiroku_Rewrite = {
    ['Options'] = {
        Intro = false,
        Watermark = false,
        Game_Stats = false,
        Notification = {
            Enabled = false,
            Color = Color3.fromRGB(244, 244, 244),
            Duration = 2.5
        },
        LowGfx = false,
        MuteBoombox = false
    }, 
    ['Universal'] = {
        Enabled = false,
        TeamCheck = false,
        HealthCheck = false,
        VisibleCheck = false,
        FriendCheck = false
    },
    ['Panic'] = {
        Enabled = false, -- // Unloads the script completly
        Keybind = Enum.KeyCode.N
    },
    ['Silent'] = {
        Enabled = false,
        Vel_Type = "Velocity",
        SpamGuns = false,
        Mode = 'FOV', -- // FOV or Target
        EnableKeybind = false,
        Keybind = 'j',
        Notification = false,
        Prediction = {
            UsePrediction = false,
            Prediction_X = 0.129331234,
            Prediction_Y = 0.129331234,
            AutoPrediction = false,
        },
        HitPart = 'HumanoidRootPart',
        HitPart_Mode = 'Custom', -- // 'Nearest Point', 'Nearest Part', 'Custom'
        HitChance = 100,
        Resolver = {
            Enabled = false,
            Method = 'Recalculate Velocity'
        },
        Anti_Curve = {
            Enabled = false,
            LookAt = false,
            CheckIfStanding = false
        },
        Checks = {
            KnockedCheck = false,
            GrabbedCheck = false,
            VehicleCheck = false,
            WallCheck = false,
            CrewCheck = false,
            ForceFieldCheck = false,
            FriendCheck = false,
            HeldToolCheck = false,
            NoGroundShots = false
        },
    },
    ['Aim Assist'] = {
        Enabled = false,
        Vel_Type = "Velocity",
        Keybind = Enum.KeyCode.E,
        NotifyOnTarget = false,
        Jump_Offset = 0,
        Prediction = {
            UsePrediction = false,
            Prediction_X = 6,
            Prediction_Y = 6
        },
        Smoothing = {
            Smoothing_X = 1,
            Smoothing_Y = 1,
            Sensitivity = 1,
            EasingStyle = Enum.EasingStyle.Exponential,
            EasingDirection = Enum.EasingDirection.In
        },
        HitPart = 'HumanoidRootPart',
        AirPart = 'HumanoidRootPart',
        HitPart_Mode = 'Custom', -- // 'Nearest Point', 'Nearest Part', 'Custom'
        Shake = {
            Enabled = false,
            X = 1,
            Y = 1,
            Z = 1
        },
        Resolver = {
            Enabled = false,
            Method = 'Recalculate Velocity'
        },
        Disable_On_Target_Death = false,
        Disable_On_Reload = false,
        Disable_White_Not_Holding_Gun = false,
        Disable_While_Chatting = false,
        Checks = {
            KnockedCheck = false,
            GrabbedCheck = false,
            VehicleCheck = false,
            WallCheck = false,
            CrewCheck = false,
            ForceFieldCheck = false,
            FriendCheck = false,
            HeldToolCheck = false
        },
    },
    ['Fov'] = {
        Silent = {
            Visible = false,
            Radius = 150,
            Color = Color3.fromRGB(189, 172, 255),
            Thickness = 1,
            Transparency = 0.75,
            Filled = false,
        },
        AimAssist = {
            Visible = false,
            Radius = 150,
            Color = Color3.fromRGB(189, 172, 255),
            Thickness = 1,
            Transparency = 0.75,
            Filled = false,
        },
    },
    ['Visualize'] = {
        Silent = {
            Tracer = {
                Enabled = false,
                Color = Color3.fromRGB(189, 172, 255),
                Thickness = 1
            },
            Highlight = {
                Enabled = false,
                FillColor = Color3.fromRGB(189, 172, 255),
                OutlineColor = Color3.fromRGB(170, 152, 215),
                FillTransparency = 0.4,
                OutlineTransparency = 0.2
            },
        },
        AimAssist = {
            Highlight = {
                Enabled = false,
                FillColor = Color3.fromRGB(189, 172, 255),
                OutlineColor = Color3.fromRGB(170, 152, 215),
                FillTransparency = 0.4,
                OutlineTransparency = 0.2
            },
            Tracer = {
                Enabled = false,
                Color = Color3.fromRGB(189, 172, 255),
                Thickness = 1
            },
            Circle = {
                Enabled = true,
                Color = Color3.fromRGB(255, 255, 255),
                Radius = 5,
                Sides = 1.5
            },
        },
    },
    ['Panel'] = {
        Enabled = false,
        Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2 - 500, workspace.CurrentCamera.ViewportSize.Y / 2 + 100),
    },
    ['Misc'] = {
        Auto360 = {
            Enabled = true,
            Keybind = 'v',
            Speed = math.pi / 0.165
        },
        InventorySorting = {
            Enabled = false,
            Keybind = 'n',
            FirstSlot = '[Double-Barrel SG]',
            SecondSlot = '[Revolver]',
            ThirdSlot = '[TacticalShotgun]',
            FourthSlot = '[Shotgun]',
            FifthSlot = '[Katana]',
        },
    },
}

getgenv = getgenv
Drawing = Drawing
game = game
workspace = workspace
Instance = Instance
task = task
Vector2 = Vector2
Vector3 = Vector3
CFrame = CFrame

local Shiroku_Rewrite = getgenv().Shiroku_Rewrite or Shiroku_Rewrite
local bones = {'Head', 'UpperTorso', 'HumanoidRootPart', 'LowerTorso', 'LeftHand', 'RightHand', 'LeftLowerArm', 'RightLowerArm', 'LeftUpperArm', 'RightUpperArm', 'LeftFoot', 'LeftLowerLeg', 'LeftUpperLeg', 'RightLowerLeg', 'RightFoot', 'RightUpperLeg'}
local targetresolverpos
local aimassistresolverpos
local NewCFrame = CFrame.new; 
local Rad = math.rad; 
local Random = math.random; 

-- // Variables
local UserInputService = game:GetService('UserInputService')
local RunService = game:GetService('RunService')
local Players = game:GetService('Players')

local local_player = Players.LocalPlayer
local mouse = local_player:GetMouse()

local UtilityStorage = {
    Connections = {},
    Drawings = {},
}

local aimassist_target = nil
local aimassist_targetting = nil
local aimassist_pos = nil
local hitscanpart_cam = nil
--
local silent_target = nil
local silenttarget_pos = nil
local hitscanpart_silent = nil

function UtilityStorage:create_drawing(drawing_class, drawing_properties)
    local drawing = Drawing.new(drawing_class)
    local properties = drawing_properties or {}

    for i,v in next, properties do
        drawing[i] = v
    end
    
    table.insert(self.Drawings, drawing)
    return drawing
end

function UtilityStorage:create_connection(script_signal, callback)
    local proxy = {
        connection = script_signal:Connect(callback)
    }
    
    function proxy:disconnect()
        self.connection:Disconnect()

        table.clear(self)
        self = nil
    end

    table.insert(UtilityStorage.Connections, proxy)
    return proxy
end

local function getnamecall()
    if game.PlaceId == 2788229376 or game.PlaceId == 16033173781 then
        return "UpdateMousePosI"
    elseif game.PlaceId == 5602055394 or game.PlaceId == 7951883376 then
        return "MousePos"
    elseif game.PlaceId == 9825515356 then
        return "MousePosUpdate"
    else
        return "UpdateMousePos"
    end
end

local namecalltype = getnamecall()

function UtilityStorage:MainEventLocate()
    for _,v in pairs(game:GetService("ReplicatedStorage"):GetDescendants()) do
        if v.Name == "MainEvent" then
            return v
        end
    end
end

function UtilityStorage:get_camera()
    return game.Workspace.CurrentCamera
end

function UtilityStorage:get_mouse_pos()
    local mouse_pos = UserInputService:GetMouseLocation()

    return Vector2.new(mouse_pos.X, mouse_pos.Y)
end

function UtilityStorage:Chance(chance, maxchance)
    return math.random(maxchance) <= chance
end

function UtilityStorage:get_gun()
    if local_player then
        if local_player.Character:FindFirstChildWhichIsA("Tool") then
            return true
        end
    end
    return false
end

function UtilityStorage:get_gun_target(plr)
    if plr then
        if plr.Character:FindFirstChildWhichIsA("Tool") then
            return true
        end
    end
    return false
end

function UtilityStorage:crew_check(plr)
	if plr:FindFirstChild('DataFolder') and plr.DataFolder:FindFirstChild('Information') and plr.DataFolder.Information:FindFirstChild('Crew') and local_player:FindFirstChild('DataFolder') and local_player.DataFolder:FindFirstChild('Information') and local_player.DataFolder.Information:FindFirstChild('Crew') then
		if local_player.DataFolder.Information:FindFirstChild('Crew').Value ~= nil and plr.DataFolder.Information:FindFirstChild('Crew').Value ~= nil and plr.DataFolder.Information:FindFirstChild('Crew').Value ~= '' and local_player.DataFolder.Information:FindFirstChild('Crew').Value ~= '' then 
			return true
		end
	end
	return false
end

function UtilityStorage:IsPlrAlive(plr)
    return plr
            and plr.Character
            and plr.Character:FindFirstChildOfClass("Humanoid")
            and plr.Character:FindFirstChildOfClass("Humanoid").Health > 0
            and true
        or false
end

function UtilityStorage:recalculate_velocity(target)
    if target and target.Character.HumanoidRootPart then
        local currentPosition = target.Character.HumanoidRootPart.Position
        local currentTime = tick() 
        wait(0.0035)
        
        local newPosition = target.Character.HumanoidRootPart.Position
        local newTime = tick()
        local timeInterval = (newTime-currentTime)
        local newVelocity = (newPosition-currentPosition)/timeInterval
        
        currentPosition = newPosition
        currentTime = newTime
        return newVelocity
    end
end


function UtilityStorage:get_target()
    local Distance, Player = Shiroku_Rewrite.Fov.AimAssist.Radius

    for Index, Value in pairs(Players:GetPlayers()) do
        if (Value == local_player) then continue end

        local Character = Value.Character
        local RootPart  = Character and Character:FindFirstChild('HumanoidRootPart')

        if (not RootPart) then continue end

        if not UtilityStorage:IsPlrAlive(Value) then
            continue
        end

        if Shiroku_Rewrite['Aim Assist'].Checks.KnockedCheck and Value.Character.BodyEffects['K.O'].Value == true then
            continue
        end

        if Shiroku_Rewrite['Aim Assist'].Checks.GrabbedCheck and Value.Character:FindFirstChild('GRABBING_CONSTRAINT') then
            continue
        end

        if Shiroku_Rewrite['Aim Assist'].Checks.VehicleCheck and Value.Character:FindFirstChild('[CarHitBox]') then
            continue
        end

        if Shiroku_Rewrite['Aim Assist'].Checks.CrewCheck and UtilityStorage:crew_check(Value) then
            continue
        end

        if Shiroku_Rewrite['Aim Assist'].Checks.HeldToolCheck and not local_player.Character:FindFirstChildWhichIsA('Tool') then
            continue
        end


        local Position, OnScreen = UtilityStorage:get_camera():WorldToViewportPoint(RootPart.Position)
        local Magnitude = (Vector2.new(Position.X, Position.Y) - UtilityStorage:get_mouse_pos()).Magnitude

        if Magnitude > Distance then continue end

        if OnScreen then
            Distance = Magnitude
            Player = Value
        end
    end

    return Player
end

function UtilityStorage:get_silent_target()
    local Distance, Player = Shiroku_Rewrite.Fov.Silent.Radius

    for Index, Value in pairs(Players:GetPlayers()) do
        if (Value == local_player) then continue end

        local Character = Value.Character
        local RootPart  = Character and Character:FindFirstChild('HumanoidRootPart')

        if (not RootPart) then continue end

        if not UtilityStorage:IsPlrAlive(Value) then
            continue
        end

        if Shiroku_Rewrite['Silent'].Checks.KnockedCheck and Value.Character.BodyEffects['K.O'].Value == true then
            continue
        end

        if Shiroku_Rewrite['Silent'].Checks.GrabbedCheck and Value.Character:FindFirstChild('GRABBING_CONSTRAINT') then
            continue
        end

        if Shiroku_Rewrite['Silent'].Checks.VehicleCheck and Value.Character:FindFirstChild('[CarHitBox]') then
            continue
        end

        if Shiroku_Rewrite['Silent'].Checks.CrewCheck and UtilityStorage:crew_check(Value) then
            continue
        end

        if Shiroku_Rewrite['Silent'].Checks.HeldToolCheck and not local_player.Character:FindFirstChildWhichIsA('Tool') then
            continue
        end

        local Position, OnScreen = workspace.CurrentCamera:WorldToViewportPoint(RootPart.Position)
        local Magnitude = (Vector2.new(Position.X, Position.Y) - UtilityStorage:get_mouse_pos()).Magnitude

        if Magnitude > Distance then continue end

        if not OnScreen then continue end

        if OnScreen then
            Distance = Magnitude
            Player = Value
        end
    end

    return Player
end



local aimassist_fov = UtilityStorage:create_drawing('Circle', {
    Visible = Shiroku_Rewrite.Fov.AimAssist.Visible,
    Transparency = Shiroku_Rewrite.Fov.AimAssist.Transparency,
    Thickness = Shiroku_Rewrite.Fov.AimAssist.Thickness,
    Color = Shiroku_Rewrite.Fov.AimAssist.Color,
    Radius =  Shiroku_Rewrite.Fov.AimAssist.Radius,
    Filled = Shiroku_Rewrite.Fov.AimAssist.Filled,
})

local silent_fov = UtilityStorage:create_drawing('Circle', {
    Visible = Shiroku_Rewrite.Fov.Silent.Visible,
    Transparency = Shiroku_Rewrite.Fov.Silent.Transparency,
    Thickness = Shiroku_Rewrite.Fov.Silent.Thickness,
    Color = Shiroku_Rewrite.Fov.Silent.Color,
    Radius =  Shiroku_Rewrite.Fov.Silent.Radius,
    Filled = Shiroku_Rewrite.Fov.Silent.Filled,
})

local aimassist_tracer = UtilityStorage:create_drawing('Line', {
    Visible = Shiroku_Rewrite.Visualize.AimAssist.Tracer.Visible,
    Thickness = Shiroku_Rewrite.Visualize.AimAssist.Tracer.Thickness,
    Color = Shiroku_Rewrite.Visualize.AimAssist.Tracer.Color,
})

local silentaim_tracer = UtilityStorage:create_drawing('Line', {
    Visible = Shiroku_Rewrite.Visualize.Silent.Tracer.Visible,
    Thickness = Shiroku_Rewrite.Visualize.Silent.Tracer.Thickness,
    Color = Shiroku_Rewrite.Visualize.Silent.Tracer.Color,
})

local paneltext = UtilityStorage:create_drawing('Text', {
    Visible = Shiroku_Rewrite.Panel.Enabled,
    Size = 15,
    Outline = true,
    OutlineColor = Color3.fromRGB(1, 1, 1),
    Color = Color3.fromRGB(189, 172, 255),
    Position = Shiroku_Rewrite.Panel.Position,
})

local aimassisthighlight = Instance.new("Highlight")
local silentaimhighlight = Instance.new("Highlight")

function UtilityStorage:FindTrueIndex(tbl)
    if tbl ~= nil then
        local indexes = {}
        for k, v in pairs(tbl) do
            if k ~= nil then
                if v == true then
                    table.insert(indexes, k)
                end
            end
        end
        return indexes
    end
end

function UtilityStorage:FindNearestPart(Character, Configuration)
    if local_player.Character then
        local Distance = math.huge
        local MousePosition = UtilityStorage:get_mouse_pos()
        local ClosestPart
        for i, v in pairs(Character:GetChildren()) do
            if v:IsA('Part') or v:IsA('MeshPart') then
                if table.find(UtilityStorage:FindTrueIndex(Configuration.Value), v.Name) then
                    local Point, OnScreen = UtilityStorage:get_camera():WorldToViewportPoint(v.Position)
                    if not OnScreen then ClosestPart = Character.HumanoidRootPart continue end
                    local Magnitude = (MousePosition - Vector2.new(Point.X, Point.Y)).Magnitude
                    if Magnitude < Distance then
                         Distance = Magnitude
                         ClosestPart = v
                    end
                 elseif #UtilityStorage:FindTrueIndex(Configuration.Value) == 0 then
                     local Point, OnScreen = UtilityStorage:get_camera():WorldToViewportPoint(v.Position)
                     if not OnScreen then ClosestPart = Character.HumanoidRootPart continue end
                     local Magnitude = (MousePosition - Vector2.new(Point.X, Point.Y)).Magnitude
                     if Magnitude < Distance then
                          Distance = Magnitude
                          ClosestPart = v
                     end
                 end
            end
        end

        return ClosestPart
    end
end

function UtilityStorage:GetClosestPoint(Part)
    local mouseray = local_player:GetMouse().UnitRay
    mouseray = mouseray.Origin + (mouseray.Direction * (Part.Position - mouseray.Origin).Magnitude)
    local point =
        (mouseray.Y >= (Part.Position - Part.Size / 2).Y and mouseray.Y <= (Part.Position + Part.Size / 2).Y) and
            (Part.Position + Vector3.new(0, -Part.Position.Y + mouseray.Y, 0)) or Part.Position
    local check = RaycastParams.new()
    check.FilterType = Enum.RaycastFilterType.Whitelist
    check.FilterDescendantsInstances = {Part}
    local ray = game:GetService("Workspace"):Raycast(mouseray, (point - mouseray), check)
    if ray then
        return ray.Position
    else
        return mouse.Hit.Position
    end
end

function UtilityStorage:get_cam_prediction()
    local prediction
    if aimassist_target and aimassist_targetting then
        if aimassist_target.Character:FindFirstChildOfClass('Humanoid'):GetState() == Enum.HumanoidStateType.Freefall then
            prediction = Shiroku_Rewrite['Aim Assist'].Prediction.Prediction_Y
        else
            prediction = Shiroku_Rewrite['Aim Assist'].Prediction.Prediction_X
        end
    end
    return prediction
end

function UtilityStorage:get_silent_prediction()
    local prediction
    if silent_target then
        if silent_target.Character:FindFirstChildOfClass('Humanoid'):GetState() == Enum.HumanoidStateType.Freefall then
            prediction = Shiroku_Rewrite['Silent'].Prediction.Prediction_Y
        else
            prediction = Shiroku_Rewrite['Silent'].Prediction.Prediction_X
        end
    end
    return prediction
end

function UtilityStorage:update_cam()
    if not aimassist_target then return end
    if not aimassist_targetting then return end

    local current_camera = UtilityStorage:get_camera()
    local prediction = UtilityStorage:get_cam_prediction()

    local part_position = aimassist_target.Character[Shiroku_Rewrite['Aim Assist'].HitPart].Position
    local part_velocity = aimassist_target.Character[Shiroku_Rewrite['Aim Assist'].HitPart][Shiroku_Rewrite['Aim Assist'].Vel_Type]

    local smoothingX, smoothingY = Shiroku_Rewrite['Aim Assist'].Smoothing.Smoothing_X, Shiroku_Rewrite['Aim Assist'].Smoothing.Smoothing_Y
    local easingStyle = Shiroku_Rewrite['Aim Assist'].Smoothing.EasingStyle
    local easingDirection = Shiroku_Rewrite['Aim Assist'].Smoothing.EasingDirection

    if aimassist_target.Character:FindFirstChildOfClass('Humanoid'):GetState() == Enum.HumanoidStateType.Freefall then
        part_position = aimassist_target.Character[Shiroku_Rewrite['Aim Assist'].AirPart].Position + Vector3.new(0, getgenv().Shiroku_Rewrite['Aim Assist'].Jump_Offset, 0)
        part_velocity = aimassist_target.Character[Shiroku_Rewrite['Aim Assist'].AirPart][Shiroku_Rewrite['Aim Assist'].Vel_Type] + Vector3.new(0, getgenv().Shiroku_Rewrite['Aim Assist'].Jump_Offset, 0)
    else
        part_position = aimassist_target.Character[Shiroku_Rewrite['Aim Assist'].HitPart].Position
        part_velocity = aimassist_target.Character[Shiroku_Rewrite['Aim Assist'].HitPart][Shiroku_Rewrite['Aim Assist'].Vel_Type]
    end

    if Shiroku_Rewrite['Aim Assist'].Prediction.UsePrediction then
        if Shiroku_Rewrite['Aim Assist'].Resolver.Enabled then
            if Shiroku_Rewrite['Aim Assist'].HitPart_Mode == 'Nearest Part' then
                aimassist_pos = CFrame.new(current_camera.CFrame.p, aimassist_target.Character[tostring(UtilityStorage:FindNearestPart(aimassist_target.Character, {Value = bones}))].Position + (aimassistresolverpos / prediction))
            elseif Shiroku_Rewrite['Aim Assist'].HitPart_Mode == 'Nearest Point' then
                hitscanpart_cam = tostring(UtilityStorage:FindNearestPart(aimassist_target.Character, {Value = bones}))
                aimassist_pos = CFrame.new(current_camera.CFrame.p, UtilityStorage:GetClosestPoint(aimassist_target.Character[hitscanpart_cam]) + (aimassistresolverpos / prediction))
            else
                aimassist_pos = CFrame.new(current_camera.CFrame.p, part_position + (aimassistresolverpos / prediction))
            end
        else
            if Shiroku_Rewrite['Aim Assist'].HitPart_Mode == 'Nearest Part' then
                aimassist_pos = CFrame.new(current_camera.CFrame.p, aimassist_target.Character[tostring(UtilityStorage:FindNearestPart(aimassist_target.Character, {Value = bones}))].Position + aimassist_target.Character[tostring(UtilityStorage:FindNearestPart(aimassist_target.Character, {Value = bones}))][Shiroku_Rewrite['Aim Assist'].Vel_Type] / prediction)
            elseif Shiroku_Rewrite['Aim Assist'].HitPart_Mode == 'Nearest Point' then
                hitscanpart_cam = tostring(UtilityStorage:FindNearestPart(aimassist_target.Character, {Value = bones}))                
                aimassist_pos = CFrame.new(current_camera.CFrame.p, UtilityStorage:GetClosestPoint(aimassist_target.Character[hitscanpart_cam])+(aimassist_target.Character[hitscanpart_cam][Shiroku_Rewrite['Aim Assist'].Vel_Type]/prediction))
            else
                aimassist_pos = CFrame.new(current_camera.CFrame.p, part_position + part_velocity / prediction)
            end
        end
    else
        if Shiroku_Rewrite['Aim Assist'].HitPart_Mode == 'Nearest Part' then
            aimassist_pos = CFrame.new(current_camera.CFrame.p, aimassist_target.Character[tostring(UtilityStorage:FindNearestPart(aimassist_target.Character, {Value = bones}))].Position)
        elseif Shiroku_Rewrite['Aim Assist'].HitPart_Mode == 'Nearest Point' then
            hitscanpart_cam = tostring(UtilityStorage:FindNearestPart(aimassist_target.Character, {Value = bones}))                
            aimassist_pos = CFrame.new(current_camera.CFrame.p, UtilityStorage:GetClosestPoint(aimassist_target.Character[hitscanpart_cam]))
        else
            aimassist_pos = CFrame.new(current_camera.CFrame.p, part_position)
        end
    end

    if aimassist_target.Character:FindFirstChildOfClass('Humanoid'):GetState() == Enum.HumanoidStateType.Freefall then
        current_camera.CFrame = current_camera.CFrame:Lerp(aimassist_pos, smoothingY / Shiroku_Rewrite['Aim Assist'].Smoothing.Sensitivity, easingStyle, easingDirection)
    else
        current_camera.CFrame = current_camera.CFrame:Lerp(aimassist_pos, smoothingX / Shiroku_Rewrite['Aim Assist'].Smoothing.Sensitivity, easingStyle, easingDirection)
    end
end

function UtilityStorage:initialize_silent()
    if not silent_target then return end

    local prediction = UtilityStorage:get_silent_prediction()

    if game.PlaceId == 9825515356 then
        if Shiroku_Rewrite['Silent'].Resolver.Enabled and silent_target and Shiroku_Rewrite['Silent'].Enabled then
            if silent_target and Shiroku_Rewrite['Silent'].Enabled and Shiroku_Rewrite['Silent'].HitPart_Mode == 'Custom' then
                game:GetService('ReplicatedStorage').MainEvent:FireServer(namecalltype, silent_target.Character.HumanoidRootPart.Position + (targetresolverpos * prediction) + Vector3.new(25, 100, 25))
            elseif silent_target and Shiroku_Rewrite['Silent'].Enabled and Shiroku_Rewrite['Silent'].HitPart_Mode == 'Nearest Part' then
                hitscanpart_silent = tostring(UtilityStorage:FindNearestPart(silent_target.Character, {Value = bones}))
                game:GetService('ReplicatedStorage').MainEvent:FireServer(namecalltype, silent_target.Character[hitscanpart_silent].Position + (silent_target.Character[hitscanpart_silent][Shiroku_Rewrite['Silent'].Vel_Type] * prediction) + Vector3.new(25, 100, 25))
            elseif silent_target and Shiroku_Rewrite['Silent'].Enabled and Shiroku_Rewrite['Silent'].HitPart_Mode == 'Nearest Point' then
                hitscanpart_silent = tostring(UtilityStorage:FindNearestPart(silent_target.Character, {Value = bones}))
                game:GetService('ReplicatedStorage').MainEvent:FireServer(namecalltype, UtilityStorage:GetClosestPoint(silent_target.Character[hitscanpart_silent])+(silent_target.Character[hitscanpart_silent][Shiroku_Rewrite['Silent'].Vel_Type]*prediction) + Vector3.new(25, 100, 25))
            end
        else
            if silent_target and Shiroku_Rewrite['Silent'].Enabled and Shiroku_Rewrite['Silent'].HitPart_Mode == 'Custom' then
                game:GetService('ReplicatedStorage').MainEvent:FireServer(namecalltype, silent_target.Character[Shiroku_Rewrite['Silent'].HitPart].Position + (silent_target.Character[Shiroku_Rewrite['Silent'].HitPart][Shiroku_Rewrite['Silent'].Vel_Type] * prediction) + Vector3.new(25, 100, 25))
            elseif silent_target and Shiroku_Rewrite['Silent'].Enabled and Shiroku_Rewrite['Silent'].HitPart_Mode == 'Nearest Part' then
                hitscanpart_silent = tostring(UtilityStorage:FindNearestPart(silent_target.Character, {Value = bones}))
                game:GetService('ReplicatedStorage').MainEvent:FireServer(namecalltype, silent_target.Character[hitscanpart_silent].Position + (silent_target.Character[hitscanpart_silent][Shiroku_Rewrite['Silent'].Vel_Type] * prediction) + Vector3.new(25, 100, 25))
            elseif silent_target and Shiroku_Rewrite['Silent'].Enabled and Shiroku_Rewrite['Silent'].HitPart_Mode == 'Nearest Point' then
                hitscanpart_silent = tostring(UtilityStorage:FindNearestPart(silent_target.Character, {Value = bones}))
                game:GetService('ReplicatedStorage').MainEvent:FireServer(namecalltype, UtilityStorage:GetClosestPoint(silent_target.Character[hitscanpart_silent])+(silent_target.Character[hitscanpart_silent][Shiroku_Rewrite['Silent'].Vel_Type]*prediction) + Vector3.new(25, 100, 25))
            end
        end
    else
        if Shiroku_Rewrite['Silent'].Resolver.Enabled and silent_target and Shiroku_Rewrite['Silent'].Enabled then
            if silent_target and Shiroku_Rewrite['Silent'].Enabled and Shiroku_Rewrite['Silent'].HitPart_Mode == 'Custom' then
                game:GetService('ReplicatedStorage').MainEvent:FireServer(namecalltype, silent_target.Character.HumanoidRootPart.Position + (targetresolverpos * prediction))
            elseif silent_target and Shiroku_Rewrite['Silent'].Enabled and Shiroku_Rewrite['Silent'].HitPart_Mode == 'Nearest Part' then
                hitscanpart_silent = tostring(UtilityStorage:FindNearestPart(silent_target.Character, {Value = bones}))
                game:GetService('ReplicatedStorage').MainEvent:FireServer(namecalltype, silent_target.Character[hitscanpart_silent].Position + (silent_target.Character[hitscanpart_silent][Shiroku_Rewrite['Silent'].Vel_Type] * prediction))
            elseif silent_target and Shiroku_Rewrite['Silent'].Enabled and Shiroku_Rewrite['Silent'].HitPart_Mode == 'Nearest Point' then
                hitscanpart_silent = tostring(UtilityStorage:FindNearestPart(silent_target.Character, {Value = bones}))
                game:GetService('ReplicatedStorage').MainEvent:FireServer(namecalltype, UtilityStorage:GetClosestPoint(silent_target.Character[hitscanpart_silent])+(silent_target.Character[hitscanpart_silent][Shiroku_Rewrite['Silent'].Vel_Type]*prediction))
            end
        else
            if silent_target and Shiroku_Rewrite['Silent'].Enabled and Shiroku_Rewrite['Silent'].HitPart_Mode == 'Custom' then
                game:GetService('ReplicatedStorage').MainEvent:FireServer(namecalltype, silent_target.Character[Shiroku_Rewrite['Silent'].HitPart].Position + (silent_target.Character[Shiroku_Rewrite['Silent'].HitPart][Shiroku_Rewrite['Silent'].Vel_Type] * prediction))
            elseif silent_target and Shiroku_Rewrite['Silent'].Enabled and Shiroku_Rewrite['Silent'].HitPart_Mode == 'Nearest Part' then
                hitscanpart_silent = tostring(UtilityStorage:FindNearestPart(silent_target.Character, {Value = bones}))
                game:GetService('ReplicatedStorage').MainEvent:FireServer(namecalltype, silent_target.Character[hitscanpart_silent].Position + (silent_target.Character[hitscanpart_silent][Shiroku_Rewrite['Silent'].Vel_Type] * prediction))
            elseif silent_target and Shiroku_Rewrite['Silent'].Enabled and Shiroku_Rewrite['Silent'].HitPart_Mode == 'Nearest Point' then
                hitscanpart_silent = tostring(UtilityStorage:FindNearestPart(silent_target.Character, {Value = bones}))
                game:GetService('ReplicatedStorage').MainEvent:FireServer(namecalltype, UtilityStorage:GetClosestPoint(silent_target.Character[hitscanpart_silent])+(silent_target.Character[hitscanpart_silent][Shiroku_Rewrite['Silent'].Vel_Type]*prediction))
            end
        end
    end
end

function UtilityStorage:get_distance_from_plr(part)
    return (part.Position - workspace.CurrentCamera.CFrame.Position).Magnitude
end

function UtilityStorage:get_nameof_tool(plr)
    local tool_name;

    if UtilityStorage:get_gun_target(plr) then
        local tool = plr.Character:FindFirstChildWhichIsA("Tool")
        tool_name = tool.Name
    else
        tool_name = "None"
    end
    return tool_name;
end

function UtilityStorage:get_ammo_of_tool(plr)
    local ammo_count;

    if UtilityStorage:get_gun_target(plr) and plr.Character:FindFirstChildWhichIsA("Tool").Ammo then
        local tool = plr.Character:FindFirstChildWhichIsA("Tool")
        ammo_count = tool.Ammo.Value
    else
        ammo_count = "None"
    end
    return ammo_count;
end

UtilityStorage:create_connection(RunService.RenderStepped, function(delta_time)
    local mouse_pos = UtilityStorage:get_mouse_pos()
    local current_camera = UtilityStorage:get_camera()

    aimassist_fov.Position = mouse_pos
    aimassist_fov.Visible = Shiroku_Rewrite.Fov.AimAssist.Visible
    aimassist_fov.Color = Shiroku_Rewrite.Fov.AimAssist.Color
    aimassist_fov.Radius = Shiroku_Rewrite.Fov.AimAssist.Radius
    aimassist_fov.Transparency = Shiroku_Rewrite.Fov.AimAssist.Transparency
    aimassist_fov.Filled = Shiroku_Rewrite.Fov.AimAssist.Filled
    aimassist_fov.Thickness = Shiroku_Rewrite.Fov.AimAssist.Thickness

    silent_fov.Position = mouse_pos
    silent_fov.Visible = Shiroku_Rewrite.Fov.Silent.Visible
    silent_fov.Radius = Shiroku_Rewrite.Fov.Silent.Radius
    silent_fov.Color = Shiroku_Rewrite.Fov.Silent.Color
    silent_fov.Transparency = Shiroku_Rewrite.Fov.Silent.Transparency
    silent_fov.Filled = Shiroku_Rewrite.Fov.Silent.Filled
    silent_fov.Thickness = Shiroku_Rewrite.Fov.Silent.Thickness

    UtilityStorage:update_cam()

    silent_target = UtilityStorage:get_silent_target()

    if aimassist_target and aimassist_targetting then
        if Shiroku_Rewrite['Aim Assist'].Disable_White_Not_Holding_Gun then
            if not local_player.Character:FindFirstChildWhichIsA('Tool') then
                aimassist_targetting = false
                aimassist_target = nil
            end
        end
    end
    if aimassist_target and aimassist_targetting then
        if Shiroku_Rewrite['Aim Assist'].Disable_On_Target_Death then
            if aimassist_target.Character.BodyEffects['K.O'].Value == true then
                aimassist_targetting = false
                aimassist_target = nil
            end
        end
    end

    -- panel
    if Shiroku_Rewrite.Panel.Enabled and silent_target then
        pcall(function()
                    
        local info_table = {
            "Player Data:",
            "Name: "..silent_target.DisplayName .. "("..silent_target.Name .. ")",
            "Health: "..math.round(silent_target.Character.Humanoid.Health),
            "Distance: "..tostring(math.floor(UtilityStorage:get_distance_from_plr(silent_target.Character.HumanoidRootPart))),
            "Tool: "..UtilityStorage:get_nameof_tool(silent_target) .. " (Ammo: "..UtilityStorage:get_ammo_of_tool(silent_target) .. ")",
            "Priorities: ".. "{Knocked: " .. tostring(silent_target.Character.BodyEffects['K.O'].Value) .. "}"
        }

        paneltext.Visible = true
        paneltext.Font = 41
        paneltext.Text = table.concat(info_table, "\n")
        end)
    elseif Shiroku_Rewrite.Panel.Enabled and not silent_target then
        local infotable = {
            "Player Data:",
            "Name: nil"
        }

        paneltext.Visible = true
        paneltext.Text = table.concat(infotable, "\n")
    else
        paneltext.Visible = false
        paneltext.Text = ""
    end
    -- panel

    if Shiroku_Rewrite.Silent.Anti_Curve.Enabled and silent_target and Shiroku_Rewrite.Silent.Enabled then
        if Shiroku_Rewrite.Silent.Anti_Curve.CheckIfStanding then
            if game.Players.LocalPlayer.Character.Humanoid.MoveDirection.Magnitude > 0 then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position, Vector3.new(silent_target.Character.HumanoidRootPart.CFrame.X, game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position.Y, silent_target.Character.HumanoidRootPart.CFrame.Z))
            end
        else
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position, Vector3.new(silent_target.Character.HumanoidRootPart.CFrame.X, game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position.Y, silent_target.Character.HumanoidRootPart.CFrame.Z))
        end
    end

    if Shiroku_Rewrite.Visualize.AimAssist.Highlight.Enabled then
        if aimassist_target and aimassist_targetting then
            aimassisthighlight.Name = "aimassisthighlight"
            aimassisthighlight.Enabled = true
            aimassisthighlight.Parent = aimassist_target.Character
            aimassisthighlight.FillColor = Shiroku_Rewrite.Visualize.AimAssist.Highlight.FillColor
            aimassisthighlight.OutlineColor = Shiroku_Rewrite.Visualize.AimAssist.Highlight.OutlineColor
            aimassisthighlight.DepthMode = Enum.HighlightDepthMode.Occluded
            aimassisthighlight.FillTransparency = Shiroku_Rewrite.Visualize.AimAssist.Highlight.FillTransparency
            aimassisthighlight.OutlineTransparency = Shiroku_Rewrite.Visualize.AimAssist.Highlight.OutlineTransparency
        else
            aimassisthighlight.Enabled = false
        end
    else
        aimassisthighlight.Enabled = false
    end

    if Shiroku_Rewrite.Visualize.AimAssist.Tracer.Enabled then
        if aimassist_target and aimassist_targetting then
            local pos = current_camera:WorldToViewportPoint(aimassist_target.Character[Shiroku_Rewrite['Aim Assist'].HitPart].Position)            
            
            aimassist_tracer.From = mouse_pos
            aimassist_tracer.To = Vector2.new(pos.X, pos.Y)
            aimassist_tracer.Visible = true
            aimassist_tracer.Color = Shiroku_Rewrite.Visualize.AimAssist.Tracer.Color
        else
            aimassist_tracer.Visible = false
        end
    else
        aimassist_tracer.Visible = false
    end

    if Shiroku_Rewrite.Visualize.Silent.Tracer.Enabled and Shiroku_Rewrite.Silent.Enabled then
        if silent_target then
            local pos = current_camera:WorldToViewportPoint(silent_target.Character[Shiroku_Rewrite['Silent'].HitPart].Position)            
            
            silentaim_tracer.From = mouse_pos
            silentaim_tracer.To = Vector2.new(pos.X, pos.Y)
            silentaim_tracer.Visible = true
            silentaim_tracer.Color = Shiroku_Rewrite.Visualize.Silent.Tracer.Color
        else
            silentaim_tracer.Visible = false
        end
    else
        silentaim_tracer.Visible = false
    end

    if Shiroku_Rewrite.Visualize.Silent.Highlight.Enabled and Shiroku_Rewrite.Silent.Enabled then
        if silent_target then
            silentaimhighlight.Name = "silentaimhighlight"
            silentaimhighlight.Enabled = true
            silentaimhighlight.Parent = silent_target.Character
            silentaimhighlight.FillColor = Shiroku_Rewrite.Visualize.Silent.Highlight.FillColor
            silentaimhighlight.OutlineColor = Shiroku_Rewrite.Visualize.Silent.Highlight.OutlineColor
            silentaimhighlight.DepthMode = Enum.HighlightDepthMode.Occluded
            silentaimhighlight.FillTransparency = Shiroku_Rewrite.Visualize.Silent.Highlight.FillTransparency
            silentaimhighlight.OutlineTransparency = Shiroku_Rewrite.Visualize.Silent.Highlight.OutlineTransparency
        else
            silentaimhighlight.Enabled = false
        end
    else
        silentaimhighlight.Enabled = false
    end

    if silent_target and Shiroku_Rewrite['Silent'].Enabled then
        if Shiroku_Rewrite['Silent'].Checks.NoGroundShots then
            if silent_target.Character[Shiroku_Rewrite['Silent'].HitPart].Velocity.Y < -20 then
                pcall(function()
                    local part = silent_target.Character[Shiroku_Rewrite['Silent'].HitPart]
                    part.Velocity = Vector3.new(part.Velocity.X, math.clamp(part.Velocity.Y, 0, 9e9), part.Velocity.Z)
                end)
            end
        end
    end
end)

UtilityStorage:create_connection(RunService.Heartbeat, function(delta_time)
    if Shiroku_Rewrite['Silent'].Resolver.Enabled and silent_target and Shiroku_Rewrite['Silent'].Enabled then
        targetresolverpos = UtilityStorage:recalculate_velocity(silent_target)
    end
    if Shiroku_Rewrite['Aim Assist'].Resolver.Enabled and aimassist_target and Shiroku_Rewrite['Aim Assist'].Enabled then
        aimassistresolverpos = UtilityStorage:recalculate_velocity(aimassist_target)
    end
end)

-- aim assist hook
UtilityStorage:create_connection(game:GetService("UserInputService").InputBegan, function(input)
    if Shiroku_Rewrite['Aim Assist'].Enabled then
        if input.KeyCode == Shiroku_Rewrite['Aim Assist'].Keybind then
            if aimassist_targetting then
                aimassist_targetting = false
                aimassist_target = UtilityStorage:get_target()
            else
                aimassist_target = UtilityStorage:get_target()
                aimassist_targetting = true
                if Shiroku_Rewrite['Aim Assist'].NotifyOnTarget and aimassist_target and aimassist_targetting then
                    Menu.Notify("<font color=\"rgb(189, 172, 255)\">[Revise] -> </font><font color=\"rgb(244, 244, 244)\">Target: </font>"..tostring(aimassist_target.DisplayName))
                end
            end
        end
    end
end)
-- aim assist hook

-- silent hook

game.Players.LocalPlayer.Character.ChildAdded:Connect(function(tool)
    if tool:IsA('Tool') then 
        tool.Activated:Connect(function()
            if silent_target ~= nil and Shiroku_Rewrite['Silent'].Enabled and UtilityStorage:Chance(Shiroku_Rewrite['Silent'].HitChance, 100) and Shiroku_Rewrite['Silent'].Mode == 'FOV' then
                UtilityStorage:initialize_silent()
            elseif silent_target ~= nil and Shiroku_Rewrite['Silent'].Enabled and UtilityStorage:Chance(Shiroku_Rewrite['Silent'].HitChance, 100) and Shiroku_Rewrite['Silent'].Mode == 'Target' then
                if aimassist_target and aimassist_targetting then
                    silent_target = aimassist_target
                    UtilityStorage:initialize_silent()
                end
            end
        end)
    end
end)

game:GetService('Players').LocalPlayer.CharacterAdded:Connect(function(char)
    char.ChildAdded:Connect(function(tool)
        tool.Activated:connect(function()
            if silent_target ~= nil and Shiroku_Rewrite['Silent'].Enabled and UtilityStorage:Chance(Shiroku_Rewrite['Silent'].HitChance, 100) and Shiroku_Rewrite['Silent'].Mode == 'FOV' then
                UtilityStorage:initialize_silent()
            elseif silent_target ~= nil and Shiroku_Rewrite['Silent'].Enabled and UtilityStorage:Chance(Shiroku_Rewrite['Silent'].HitChance, 100) and Shiroku_Rewrite['Silent'].Mode == 'Target' then
                if aimassist_target and aimassist_targetting then
                    silent_target = aimassist_target
                    UtilityStorage:initialize_silent()
                end
            end
        end)
    end)
end)

game:GetService('RunService').Heartbeat:Connect(function()
        if local_player.Character:FindFirstChildWhichIsA("Tool") and Shiroku_Rewrite['Silent'].SpamGuns then
            if local_player.Character:FindFirstChildWhichIsA("Tool").Ammo then
                UtilityStorage:initialize_silent()
            end
        end
end)

--// //--

getgenv().Faith = {
    Main = {
        Enabled = false,
        Keybind = Enum.KeyCode.Q,
        Part = "HumanoidRootPart",
        Prediction = 0.135298,
        PredictionY = 0.14019,
        AutoPrediction = false,
        MousePosMethods = "UpdateMousePosI", -- MousePos, GetMousePos, UpdateMousePos
    },
    HitDetects = {
        HitLogs = false,
        --
        HitSound = false,
        HitSoundVolume = 3,
        HitSoundType = "hitsounds/skeet.wav",
        --
        HitChams = false,
        HitChamsColor = Color3.fromRGB(189, 172, 255),
        HitChamsMaterial = "ForceField",
        HitChamsDelay = 2,
        --
        HitEffect = false,
        HitEffectColor = Color3.fromRGB(189, 172, 255),
    },
    Resolver = {
        Enable = false,
        Type == "Velocity Recalculation",
    },
    Notifications = {
        Enable = false,
        Delay = 2.5,
        Type = "xz", -- "Roblox", "xaxa", "Akali", "STX", "xz", "vKhonshu"
    },
    FovCircle = {
        Visible = false,
        AttachToTarget = false,
        Filled = false,
        Outline = false,
        Color = Color3.fromRGB(189, 172, 255),
        OutlineColor = Color3.fromRGB(0, 0, 0),
        Sides = 100,
        Transparency = 1,
        Radius = 35,
        PredictionType = "Prediction", -- "No Prediction"
    },
    Extras = {
        LookAt = false,
        ViewAt = false,
        --
        GrabCheck = false,
        KoCheck = false,
        VehicleCheck = false,
    },
    Visuals = {
        Tracer = false,
        TracerColor = Color3.fromRGB(189, 172, 255),
        TracerFrom = "Mouse",
        TracerPredictionType = "Prediction", -- "No Prediction"
        --
        Dot = false,
        DotFilled = true,
        DotColor = Color3.fromRGB(189, 172, 255),
        --
        HighLight = false,
        HighlightOutlineColor = Color3.fromRGB(170, 152, 215),
        HightLightFillColor = Color3.fromRGB(189, 172, 255),
        HighlightFillTransparency = 0.4,
        HighlightOutlineTransparency = 0.2,
        --
        Scan = false,
        ScanColor = Color3.fromRGB(189, 172, 255),
        ScanOutlineColor = Color3.fromRGB(170, 152, 215),
        ScanTransparency = 0.75,
        ScanOutlineTransparency = 0,
        --
        TargetStats = false,
        --
        FakeHitbox = false,
        FakeHitboxColor = Color3.fromRGB(189, 172, 255),
        FakeHitboxSize = Vector3.new(8, 8, 8),
        FakeHitboxTransparency = 0.7,
        FakeHitboxMaterial = "Plastic",
    },
    TargetStrafe = {
        Enabled = false,
        Type = "Normal",
        Distance = 10,
        Height = 0,
        Speed = 3,
    },
}

getgenv().crosshair = {
    enabled = false,
    ingamecrosshair = false,
    mode = 'mouse', -- center, mouse, custom
    position = Vector2.new(0,0), -- custom position
 
    width = 1.5,
    length = 35,
    radius = 11,
    color = Color3.fromRGB(189, 172, 255),
 
    spin = false, -- animate the rotation
    spin_speed = 150,
    spin_max = 340,
    spin_style = "Linear", -- Linear for normal smooth spin
    spin_direction = "InOut",
 
    resize = false, -- animate the length
    resize_speed = 150,
    resize_min = 5,
}

local Utilities = {
    NoJumpCooldown = false, 
    NoSlowdown = false, 
  
    AutoStomp = false, 
    AutoReload = false
}

local ColorCorrectionEffect = Instance.new("ColorCorrectionEffect", game:GetService("Lighting")); ColorCorrectionEffect.Enabled = false; ColorCorrectionEffect.Brightness = 0; ColorCorrectionEffect.Contrast = 0; ColorCorrectionEffect.Saturation = 0; ColorCorrectionEffect.TintColor = Color3.fromRGB(255,255,255) 
  
local Movement = {
    AutoJump = false, 
  
    BunnyHop = false, 
    HopAmount = 1, 
  
    FlightEnabled = false, 
    FlightAmount = 1
}
  
getgenv().Faith_CFrame = {
    Enabled = false,
    Keybind = Enum.KeyCode.X,
    Speed = 2
}

getgenv().Sonic_Anti = {
    Enabled = false,
    Bind = Enum.KeyCode.T,
    Type = "Custom",
    Custom = {
        X = 0,
        Y = 0,
        Z = 0
    },
    Random_Tp = {
        Min = 5,
        Maximum = 50
    },
}

-- // UI Library // --
local Settings = {
    Accent = Color3.fromRGB(189, 172, 255),
    Font = Enum.Font.RobotoMono,
    IsBackgroundTransparent = true,
    Rounded = false,
    Dim = false,
    
    ItemColor = Color3.fromRGB(30, 30, 30),
    BorderColor = Color3.fromRGB(45, 45, 45),
    MinSize = Vector2.new(300, 400),
    MaxSize = Vector2.new(800, 750)
}

local Menu = {}
local Tabs = {}
local Items = {}
local EventObjects = {} -- For updating items on menu property change
local Notifications = {}

local Scaling = {True = false, Origin = nil, Size = nil}
local Dragging = {Gui = nil, True = false}
local Draggables = {}
local ToolTip = {Enabled = false, Content = "", Item = nil}

local HotkeyRemoveKey = Enum.KeyCode.LeftControl
local Selected = {
    Frame = nil,
    Item = nil,
    Offset = UDim2.new(),
    Follow = false
}
local SelectedTab
local SelectedTabLines = {}


local wait = task.wait
local delay = task.delay
local spawn = task.spawn
local protect_gui = function(Gui, Parent)
    if gethui and syn and syn.protect_gui then 
        Gui.Parent = gethui() 
    elseif not gethui and syn and syn.protect_gui then 
        syn.protect_gui(Gui)
        Gui.Parent = Parent 
    else 
        Gui.Parent = Parent 
    end
end


local CoreGui = game:GetService("CoreGui")
local UserInput = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TextService = game:GetService("TextService")
local TweenService = game:GetService("TweenService")


local __Menu = {}
setmetatable(Menu, {
    __index = function(self, Key) return __Menu[Key] end,
    __newindex = function(self, Key, Value)
        __Menu[Key] = Value
        
        if Key == "Hue" or Key == "ScreenSize" then return end

        for _, Object in pairs(EventObjects) do Object:Update() end
        for _, Notification in pairs(Notifications) do Notification:Update() end
    end
})


Menu.Accent = Settings.Accent
Menu.Font = Settings.Font
Menu.IsBackgroundTransparent = Settings.IsBackgroundTransparent
Menu.Rounded = Settings.IsRounded
Menu.Dim = Settings.IsDim
Menu.ItemColor = Settings.ItemColor
Menu.BorderColor = Settings.BorderColor
Menu.MinSize = Settings.MinSize
Menu.MaxSize = Settings.MaxSize

Menu.Hue = 0
Menu.IsVisible = false
Menu.ScreenSize = Vector2.new()


local function AddEventListener(self: GuiObject, Update: any)
    table.insert(EventObjects, {
        self = self,
        Update = Update
    })
end


local function CreateCorner(Parent: Instance, Pixels: number): UICorner
    local UICorner = Instance.new("UICorner")
    UICorner.Name = "Corner"
    UICorner.Parent = Parent
    return UICorner
end


local function CreateStroke(Parent: Instance, Color: Color3, Thickness: number, Transparency: number): UIStroke
    local UIStroke = Instance.new("UIStroke")
    UIStroke.Name = "Stroke"
    UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    UIStroke.LineJoinMode = Enum.LineJoinMode.Miter
    UIStroke.Color = Color or Color3.new()
    UIStroke.Thickness = Thickness or 1
    UIStroke.Transparency = Transparency or 0
    UIStroke.Enabled = true
    UIStroke.Parent = Parent
    return UIStroke
end 


local function CreateLine(Parent: Instance, Size: UDim2, Position: UDim2, Color: Color3): Frame
    local Line = Instance.new("Frame")
    Line.Name = "Line"
    Line.BackgroundColor3 = typeof(Color) == "Color3" and Color or Menu.Accent
    Line.BorderSizePixel = 0
    Line.Size = Size or UDim2.new(1, 0, 0, 1)
    Line.Position = Position or UDim2.new()
    Line.Parent = Parent

    if Line.BackgroundColor3 == Menu.Accent then
        AddEventListener(Line, function() Line.BackgroundColor3 = Menu.Accent end)
    end

    return Line
end


local function CreateLabel(Parent: Instance, Name: string, Text: string, Size: UDim2, Position: UDim2): TextLabel
    local Label = Instance.new("TextLabel")
    Label.Name = Name
    Label.BackgroundTransparency = 1
    Label.Size = Size or UDim2.new(1, 0, 0, 15)
    Label.Position = Position or UDim2.new()
    Label.Font = Enum.Font.RobotoMono
    Label.Text = Text or ""
    Label.TextColor3 = Color3.new(1, 1, 1)
    Label.TextSize = 14
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Parent
    return Label
end


local function UpdateSelected(Frame: Instance, Item: Item, Offset: UDim2)
    local Selected_Frame = Selected.Frame
    if Selected_Frame then
        Selected_Frame.Visible = false
        Selected_Frame.Parent = nil
    end

    Selected = {}

    if Frame then
        if Selected_Frame == Frame then return end
        Selected = {
            Frame = Frame,
            Item = Item,
            Offset = Offset
        }

        Frame.ZIndex = 3
        Frame.Visible = true
        Frame.Parent = Menu.Screen
    end
end


local function SetDraggable(self: GuiObject)
    table.insert(Draggables, self)
    local DragOrigin
    local GuiOrigin

    self.InputBegan:Connect(function(Input: InputObject, Process: boolean)
        if (not Dragging.Gui and not Dragging.True) and (Input.UserInputType == Enum.UserInputType.MouseButton1) then
            for _, v in ipairs(Draggables) do
                v.ZIndex = 1
            end
            self.ZIndex = 2

            Dragging = {Gui = self, True = true}
            DragOrigin = Vector2.new(Input.Position.X, Input.Position.Y)
            GuiOrigin = self.Position
        end
    end)

    UserInput.InputChanged:Connect(function(Input: InputObject, Process: boolean)
        if Dragging.Gui ~= self then return end
        if not (UserInput:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)) then
            Dragging = {Gui = nil, True = false}
            return
        end
        if (Input.UserInputType == Enum.UserInputType.MouseMovement) then
            local Delta = Vector2.new(Input.Position.X, Input.Position.Y) - DragOrigin
            local ScreenSize = Menu.ScreenSize

            local ScaleX = (ScreenSize.X * GuiOrigin.X.Scale)
            local ScaleY = (ScreenSize.Y * GuiOrigin.Y.Scale)
            local OffsetX = math.clamp(GuiOrigin.X.Offset + Delta.X + ScaleX,   0, ScreenSize.X - self.AbsoluteSize.X)
            local OffsetY = math.clamp(GuiOrigin.Y.Offset + Delta.Y + ScaleY, -36, ScreenSize.Y - self.AbsoluteSize.Y)
            
            local Position = UDim2.fromOffset(OffsetX, OffsetY)
			self.Position = Position
        end
    end)
end


Menu.Screen = Instance.new("ScreenGui")
Menu.Screen.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
protect_gui(Menu.Screen, CoreGui)
Menu.ScreenSize = Menu.Screen.AbsoluteSize


local Menu_Frame = Instance.new("Frame")
local MenuScaler_Button = Instance.new("TextButton")
local Title_Label = Instance.new("TextLabel")
local Icon_Image = Instance.new("ImageLabel")
local TabHandler_Frame = Instance.new("Frame")
local TabIndex_Frame = Instance.new("Frame")
local Tabs_Frame = Instance.new("Frame")

local Notifications_Frame = Instance.new("Frame")
local MenuDim_Frame = Instance.new("Frame")
local ToolTip_Label = Instance.new("TextLabel")
local Modal = Instance.new("TextButton")

Menu_Frame.Name = "Menu"
Menu_Frame.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
Menu_Frame.BorderColor3 = Color3.fromRGB(40, 40, 40)
Menu_Frame.BorderMode = Enum.BorderMode.Inset
Menu_Frame.Position = UDim2.new(0.5, -250, 0.5, -275)
Menu_Frame.Size = UDim2.new(0, 550, 0, 650)
Menu_Frame.Visible = false
Menu_Frame.Parent = Menu.Screen
CreateStroke(Menu_Frame, Color3.new(), 2)
CreateLine(Menu_Frame, UDim2.new(1, -8, 0, 1), UDim2.new(0, 4, 0, 15))
SetDraggable(Menu_Frame)

MenuScaler_Button.Name = "MenuScaler"
MenuScaler_Button.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
MenuScaler_Button.BorderColor3 = Color3.fromRGB(40, 40, 40)
MenuScaler_Button.BorderSizePixel = 0
MenuScaler_Button.Position = UDim2.new(1, -15, 1, -15)
MenuScaler_Button.Size = UDim2.fromOffset(15, 15)
MenuScaler_Button.Font = Enum.Font.RobotoMono
MenuScaler_Button.Text = ""
MenuScaler_Button.TextColor3 = Color3.new(1, 1, 1)
MenuScaler_Button.TextSize = 14
MenuScaler_Button.AutoButtonColor = false
MenuScaler_Button.Parent = Menu_Frame
MenuScaler_Button.InputBegan:Connect(function(Input, Process)
    if Process then return end
    if (Input.UserInputType == Enum.UserInputType.MouseButton1) then
        UpdateSelected()
        Scaling = {
            True = true,
            Origin = Vector2.new(Input.Position.X, Input.Position.Y),
            Size = Menu_Frame.AbsoluteSize - Vector2.new(0, 36)
        }
    end
end)
MenuScaler_Button.InputEnded:Connect(function(Input, Process)
    if (Input.UserInputType == Enum.UserInputType.MouseButton1) then
        UpdateSelected()
        Scaling = {
            True = false,
            Origin = nil,
            Size = nil
        }
    end
end)


Icon_Image.Name = "Icon"
Icon_Image.BackgroundTransparency = 1
Icon_Image.Position = UDim2.new(0, 5, 0, 0)
Icon_Image.Size = UDim2.fromOffset(15, 15)
Icon_Image.Image = "rbxassetid://0"
Icon_Image.Visible = false
Icon_Image.Parent = Menu_Frame

Title_Label.Name = "Title"
Title_Label.BackgroundTransparency = 1
Title_Label.Position = UDim2.new(0, 5, 0, 0)
Title_Label.Size = UDim2.new(1, -10, 0, 15)
Title_Label.Font = Enum.Font.RobotoMono
Title_Label.Text = ""
Title_Label.TextColor3 = Color3.new(1, 1, 1)
Title_Label.TextSize = 14
Title_Label.TextXAlignment = Enum.TextXAlignment.Left
Title_Label.RichText = true
Title_Label.Parent = Menu_Frame

TabHandler_Frame.Name = "TabHandler"
TabHandler_Frame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
TabHandler_Frame.BorderColor3 = Color3.fromRGB(40, 40, 40)
TabHandler_Frame.BorderMode = Enum.BorderMode.Inset
TabHandler_Frame.Position = UDim2.new(0, 4, 0, 19)
TabHandler_Frame.Size = UDim2.new(1, -8, 1, -25)
TabHandler_Frame.Parent = Menu_Frame
CreateStroke(TabHandler_Frame, Color3.new(), 2)

TabIndex_Frame.Name = "TabIndex"
TabIndex_Frame.BackgroundTransparency = 1
TabIndex_Frame.Position = UDim2.new(0, 1, 0, 1)
TabIndex_Frame.Size = UDim2.new(1, -2, 0, 20)
TabIndex_Frame.Parent = TabHandler_Frame

Tabs_Frame.Name = "Tabs"
Tabs_Frame.BackgroundTransparency = 1
Tabs_Frame.Position = UDim2.new(0, 1, 0, 26)
Tabs_Frame.Size = UDim2.new(1, -2, 1, -25)
Tabs_Frame.Parent = TabHandler_Frame

Notifications_Frame.Name = "Notifications"
Notifications_Frame.BackgroundTransparency = 1
Notifications_Frame.Size = UDim2.new(1, 0, 1, 36)
Notifications_Frame.Position = UDim2.fromOffset(0, -36)
Notifications_Frame.ZIndex = 5
Notifications_Frame.Parent = Menu.Screen

ToolTip_Label.Name = "ToolTip"
ToolTip_Label.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
ToolTip_Label.BorderColor3 = Menu.BorderColor
ToolTip_Label.BorderMode = Enum.BorderMode.Inset
ToolTip_Label.AutomaticSize = Enum.AutomaticSize.XY
ToolTip_Label.Size = UDim2.fromOffset(0, 0, 0, 15)
ToolTip_Label.Text = ""
ToolTip_Label.TextSize = 14
ToolTip_Label.Font = Enum.Font.RobotoMono
ToolTip_Label.TextColor3 = Color3.new(1, 1, 1)
ToolTip_Label.ZIndex = 5
ToolTip_Label.Visible = false
ToolTip_Label.Parent = Menu.Screen
CreateStroke(ToolTip_Label, Color3.new(), 1)
AddEventListener(ToolTip_Label, function()
    ToolTip_Label.BorderColor3 = Menu.BorderColor
end)

Modal.Name = "Modal"
Modal.BackgroundTransparency = 1
Modal.Modal = true
Modal.Text = ""
Modal.Parent = Menu_Frame


--SelectedTabLines.Top = CreateLine(nil, UDim2.new(1, 0, 0, 1), UDim2.new())
SelectedTabLines.Left = CreateLine(nil, UDim2.new(0, 1, 1, 0), UDim2.new(), Color3.new())
SelectedTabLines.Right = CreateLine(nil, UDim2.new(0, 1, 1, 0), UDim2.new(1, -1, 0, 0), Color3.new())
SelectedTabLines.Bottom = CreateLine(TabIndex_Frame, UDim2.new(), UDim2.new(0, 0, 1, 0), Color3.new())
SelectedTabLines.Bottom2 = CreateLine(TabIndex_Frame, UDim2.new(), UDim2.new(), Color3.new())


local function GetDictionaryLength(Dictionary: table)
    local Length = 0
    for _ in pairs(Dictionary) do
        Length += 1
    end
    return Length
end


local function UpdateSelectedTabLines(Tab: Tab)
    if not Tab then return end

    if (Tab.Button.AbsolutePosition.X > Tab.self.AbsolutePosition.X) then
        SelectedTabLines.Left.Visible = true
    else
        SelectedTabLines.Left.Visible = false
    end

    if (Tab.Button.AbsolutePosition.X + Tab.Button.AbsoluteSize.X < Tab.self.AbsolutePosition.X + Tab.self.AbsoluteSize.X) then
        SelectedTabLines.Right.Visible = true
    else
        SelectedTabLines.Right.Visible = false
    end

    --SelectedTabLines.Top.Parent = Tab.Button
    SelectedTabLines.Left.Parent = Tab.Button
    SelectedTabLines.Right.Parent = Tab.Button

    local FRAME_POSITION = Tab.self.AbsolutePosition
    local BUTTON_POSITION = Tab.Button.AbsolutePosition
    local BUTTON_SIZE = Tab.Button.AbsoluteSize
    local LENGTH = BUTTON_POSITION.X - FRAME_POSITION.X
    local OFFSET = (BUTTON_POSITION.X + BUTTON_SIZE.X) - FRAME_POSITION.X

    SelectedTabLines.Bottom.Size = UDim2.new(0, LENGTH + 1, 0, 1)
    SelectedTabLines.Bottom2.Size = UDim2.new(1, -OFFSET, 0, 1)
    SelectedTabLines.Bottom2.Position = UDim2.new(0, OFFSET, 1, 0)
end


local function UpdateTabs()
    for _, Tab in pairs(Tabs) do
        Tab.Button.Size = UDim2.new(1 / GetDictionaryLength(Tabs), 0, 1, 0)
        Tab.Button.Position = UDim2.new((1 / GetDictionaryLength(Tabs)) * (Tab.Index - 1), 0, 0, 0)
    end
    UpdateSelectedTabLines(SelectedTab)
end


local function GetTab(Tab_Name: string): Tab
    assert(Tab_Name, "NO TAB_NAME GIVEN")
    return Tabs[Tab_Name]
end


local function ChangeTab(Tab_Name: string)
    assert(Tabs[Tab_Name], "Tab \"" .. tostring(Tab_Name) .. "\" does not exist!")
    for _, Tab in pairs(Tabs) do
        Tab.self.Visible = false
        Tab.Button.BackgroundColor3 = Menu.ItemColor
        Tab.Button.TextColor3 = Color3.fromRGB(205, 205, 205)
    end
    local Tab = GetTab(Tab_Name)
    Tab.self.Visible = true
    Tab.Button.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    Tab.Button.TextColor3 = Color3.new(1, 1, 1)

    SelectedTab = Tab
    UpdateSelected()
    UpdateSelectedTabLines(Tab)
end


local function GetContainer(Tab_Name: string, Container_Name: string): Container
    assert(Tab_Name, "NO TAB_NAME GIVEN")
    assert(Container_Name, "NO CONTAINER NAME GIVEN")
    return GetTab(Tab_Name)[Container_Name]
end

local function CheckItemIndex(Item_Index: number, Method: string)
    assert(typeof(Item_Index) == "number", "invalid argument #1 to '" .. Method .. "' (number expected, got " .. typeof(Item_Index) .. ")")
    assert(Item_Index <= #Items and Item_Index > 0, "invalid argument #1 to '" .. Method .. "' (index out of range")
end


function Menu:GetItem(Index: number): Item
    CheckItemIndex(Index, "GetItem")
    return Items[Index]
end

function Menu:FindItem(Tab_Name: string, Container_Name: string, Class_Name: string, Name: string): Item
    local Result
    for Index, Item in ipairs(Items) do
        if Item.Tab == Tab_Name and Item.Container == Container_Name then
            if Item.Name == Name and (Item.Class == Class_Name) then
                Result = Index
                break
            end
        end
    end

    if Result then
        return Menu:GetItem(Result)
    else
        return error("Item " .. tostring(Name) .. " was not found")
    end
end


function Menu:SetTitle(Name: string)
    Title_Label.Text = tostring(Name)
end


function Menu:SetIcon(Icon: string)
    if typeof(Icon) == "string" or typeof(Icon) == "number" then
        Title_Label.Position = UDim2.fromOffset(20, 0)
        Title_Label.Size = UDim2.new(1, -40, 0, 15)
        Icon_Image.Image = "rbxassetid://" .. string.gsub(tostring(Icon), "rbxassetid://", "")
        Icon_Image.Visible = true
    else
        Title_Label.Position = UDim2.fromOffset(5, 0)
        Title_Label.Size = UDim2.new(1, -10, 0, 15)
        Icon_Image.Image = ""
        Icon_Image.Visible = false
    end
end


function Menu:SetSize(Size: Vector2)
    local Size = typeof(Size) == "Vector2" and Size or typeof(Size) == "UDim2" and Vector2.new(Size.X, Size.Y) or Menu.MinSize
    local X = Size.X
    local Y = Size.Y

    if (X > Menu.MinSize.X and X < Menu.MaxSize.X) then
        X = math.clamp(X, Menu.MinSize.X, Menu.MaxSize.X)
    end
    if (Y > Menu.MinSize.Y and Y < Menu.MaxSize.Y) then
        Y = math.clamp(Y, Menu.MinSize.Y, Menu.MaxSize.Y)
    end

    Menu_Frame.Size = UDim2.fromOffset(X, Y)
    UpdateTabs()
end


function Menu:SetVisible(Visible: boolean)
    local IsVisible = typeof(Visible) == "boolean" and Visible
    Menu_Frame.Visible = IsVisible
    Menu.IsVisible = IsVisible
    if IsVisible == false then
        UpdateSelected()
    end
end


function Menu:SetTab(Tab_Name: string)
    ChangeTab(Tab_Name)
end


-- this function should be private
function Menu:SetToolTip(Enabled: boolean, Content: string, Item: Instance)
    ToolTip = {
        Enabled = Enabled,
        Content = Content,
        Item = Item
    }

    ToolTip_Label.Visible = Enabled
end


function Menu.Line(Parent: Instance, Size: UDim2, Position: UDim2): Line
    local Line = {self = CreateLine(Parent, Size, Position)}
    Line.Class = "Line"
    return Line
end


function Menu.Tab(Tab_Name: string): Tab
    assert(Tab_Name and typeof(Tab_Name) == "string", "TAB_NAME REQUIRED")
    if Tabs[Tab_Name] then return error("TAB_NAME '" .. tostring(Tab_Name) .. "' ALREADY EXISTS") end
    local Frame = Instance.new("Frame")
    local Button = Instance.new("TextButton")

    local Tab = {self = Frame, Button = Button}
    Tab.Class = "Tab"
    Tab.Index = GetDictionaryLength(Tabs) + 1


    local function CreateSide(Side: string)
        local Frame = Instance.new("ScrollingFrame")
        local ListLayout = Instance.new("UIListLayout")

        Frame.Name = Side
        Frame.Active = true
        Frame.BackgroundTransparency = 1
        Frame.BorderSizePixel = 0
        Frame.Size = Side == "Middle" and UDim2.new(1, -10, 1, -10) or UDim2.new(0.5, -10, 1, -10)
        Frame.Position = (Side == "Left" and UDim2.fromOffset(5, 5)) or (Side == "Right" and UDim2.new(0.5, 5, 0, 5) or Side == "Middle" and UDim2.fromOffset(5, 5))
        Frame.CanvasSize = UDim2.new(0, 0, 0, -10)
        Frame.ScrollBarThickness = 2
        Frame.ScrollBarImageColor3 = Menu.Accent
        Frame.Parent = Tab.self
        AddEventListener(Frame, function()
            Frame.ScrollBarImageColor3 = Menu.Accent
        end)
        Frame:GetPropertyChangedSignal("CanvasPosition"):Connect(UpdateSelected)

        ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ListLayout.Padding = UDim.new(0, 10)
        ListLayout.Parent = Frame
    end


    Button.Name = "Button"
    Button.BackgroundColor3 = Menu.ItemColor
    Button.BorderSizePixel = 0
    Button.Font = Enum.Font.RobotoMono
    Button.Text = Tab_Name
    Button.TextColor3 = Color3.fromRGB(205, 205, 205)
    Button.TextSize = 14
    Button.Parent = TabIndex_Frame
    AddEventListener(Button, function()
        if Button.TextColor3 == Color3.fromRGB(205, 205, 205) then
            Button.BackgroundColor3 = Menu.ItemColor
        end
        Button.BackgroundColor3 = Menu.ItemColor
        Button.BorderColor3 = Menu.BorderColor
    end)
    Button.MouseButton1Click:Connect(function()
        ChangeTab(Tab_Name)
    end)
    
    Frame.Name = Tab_Name .. "Tab"
    Frame.BackgroundTransparency = 1
    Frame.Size = UDim2.new(1, 0, 1, 0)
    Frame.Visible = false
    Frame.Parent = Tabs_Frame

    CreateSide("Middle")
    CreateSide("Left")
    CreateSide("Right")

    Tabs[Tab_Name] = Tab

    ChangeTab(Tab_Name)
    UpdateTabs()
    return Tab
end


function Menu.Container(Tab_Name: string, Container_Name: string, Side: string): Container
    local Tab = GetTab(Tab_Name)
    assert(typeof(Tab_Name) == "string", "TAB_NAME REQUIRED")
    if Tab[Container_Name] then return error("CONTAINER_NAME '" .. tostring(Container_Name) .. "' ALREADY EXISTS") end
    local Side = Side or "Left"

    local Frame = Instance.new("Frame")
    local Label = CreateLabel(Frame, "Title", Container_Name, UDim2.fromOffset(206, 15),  UDim2.fromOffset(5, 0))
    local Line = CreateLine(Frame, UDim2.new(1, -10, 0, 1), UDim2.fromOffset(5, 15))

    local Container = {self = Frame, Height = 0}
    Container.Class = "Container"
    Container.Visible = true

    function Container:SetLabel(Name: string)
        Label.Text = tostring(Name)
    end

    function Container:SetVisible(Visible: boolean)
        if typeof(Visible) ~= "boolean" then return end
        if self.Visible == Visible then return end
        
        Frame.Visible = Visible
        self.Visible = Visible
        self:UpdateSize(Visible and 25 or -25, Frame)
    end

    function Container:UpdateSize(Height: float, Item: GuiObject)
        self.Height += Height
        Frame.Size += UDim2.fromOffset(0, Height)
        Tab.self[Side].CanvasSize += UDim2.fromOffset(0, Height)

        if Item then
            local ItemY = Item.AbsolutePosition.Y
            if math.sign(Height) == 1 then
                ItemY -= 1
            end

            for _, item in ipairs(Frame:GetChildren()) do
                if (item == Label or item == Line or item == Stroke or Item == item) then continue end -- exlude these
                local item_y = item.AbsolutePosition.Y
                if item_y > ItemY then
                    item.Position += UDim2.fromOffset(0, Height)
                end
            end
        end
    end

    function Container:GetHeight(): number
        return self.Height
    end


    Frame.Name = "Container"
    Frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    Frame.BorderColor3 = Color3.new()
    Frame.BorderMode = Enum.BorderMode.Inset
    Frame.Size = UDim2.new(1, -6, 0, 0)
    Frame.Parent = Tab.self[Side]

    Container:UpdateSize(25)
    Tab.self[Side].CanvasSize += UDim2.fromOffset(0, 10)
    Tab[Container_Name] = Container
    return Container
end


function Menu.Label(Tab_Name: string, Container_Name: string, Name: string, ToolTip: string): Label
    local Container = GetContainer(Tab_Name, Container_Name)
    local GuiLabel = CreateLabel(Container.self, "Label", Name, nil, UDim2.fromOffset(20, Container:GetHeight()))

    GuiLabel.MouseEnter:Connect(function()
        if ToolTip then
            Menu:SetToolTip(true, ToolTip, GuiLabel)
        end
    end)
    GuiLabel.MouseLeave:Connect(function()
        if ToolTip then
            Menu:SetToolTip(false)
        end
    end)

    local Label = {self = Label}
    Label.Name = Name
    Label.Class = "Label"
    Label.Index = #Items + 1
    Label.Tab = Tab_Name
    Label.Container = Container_Name

    function Label:SetLabel(Name: string)
        GuiLabel.Text = tostring(Name)
    end

    function Label:SetVisible(Visible: boolean)
        if typeof(Visible) ~= "boolean" then return end
        if GuiLabel.Visible == Visible then return end
        
        GuiLabel.Visible = Visible
        Container:UpdateSize(Visible and 20 or -20, GuiLabel)
    end

    Container:UpdateSize(20)
    table.insert(Items, Label)
    return #Items
end


function Menu.Button(Tab_Name: string, Container_Name: string, Name: string, Callback: any, ToolTip: string): Button
    local Container = GetContainer(Tab_Name, Container_Name)
    local GuiButton = Instance.new("TextButton")

    local Button = {self = GuiButton}
    Button.Name = Name
    Button.Class = "Button"
    Button.Tab = Tab_Name
    Button.Container = Container_Name
    Button.Index = #Items + 1
    Button.Callback = typeof(Callback) == "function" and Callback or function() end

    
    function Button:SetLabel(Name: string)
        GuiButton.Text = tostring(Name)
    end

    function Button:SetVisible(Visible: boolean)
        if typeof(Visible) ~= "boolean" then return end
        if GuiButton.Visible == Visible then return end
        
        GuiButton.Visible = Visible
        Container:UpdateSize(Visible and 25 or -25, GuiButton)
    end


    GuiButton.Name = "Button"
    GuiButton.BackgroundColor3 = Menu.ItemColor
    GuiButton.BorderColor3 = Menu.BorderColor
    GuiButton.BorderMode = Enum.BorderMode.Inset
    GuiButton.Position = UDim2.fromOffset(20, Container:GetHeight())
    GuiButton.Size = UDim2.new(1, -50, 0, 20)
    GuiButton.Font = Enum.Font.RobotoMono
    GuiButton.Text = Name
    GuiButton.TextColor3 = Color3.new(1, 1, 1)
    GuiButton.TextSize = 14
    GuiButton.TextTruncate = Enum.TextTruncate.AtEnd
    GuiButton.Parent = Container.self
    CreateStroke(GuiButton, Color3.new(), 1)
    AddEventListener(GuiButton, function()
        GuiButton.BackgroundColor3 = Menu.ItemColor
        GuiButton.BorderColor3 = Menu.BorderColor
    end)
    GuiButton.MouseButton1Click:Connect(function()
        Button.Callback()
    end)
    GuiButton.MouseEnter:Connect(function()
        if ToolTip then
            Menu:SetToolTip(true, ToolTip, GuiButton)
        end
    end)
    GuiButton.MouseLeave:Connect(function()
        Menu:SetToolTip(false)
    end)

    Container:UpdateSize(25)
    table.insert(Items, Button)
    return #Items
end


function Menu.TextBox(Tab_Name: string, Container_Name: string, Name: string, Value: string, Callback: any, ToolTip: string): TextBox
    local Container = GetContainer(Tab_Name, Container_Name)
    local Label = CreateLabel(Container.self, "TextBox", Name, nil, UDim2.fromOffset(20, Container:GetHeight()))
    local GuiTextBox = Instance.new("TextBox")

    local TextBox = {self = GuiTextBox}
    TextBox.Name = Name
    TextBox.Class = "TextBox"
    TextBox.Tab = Tab_Name
    TextBox.Container = Container_Name
    TextBox.Index = #Items + 1
    TextBox.Value = typeof(Value) == "string" and Value or ""
    TextBox.Callback = typeof(Callback) == "function" and Callback or function() end


    function TextBox:SetLabel(Name: string)
        Label.Text = tostring(Name)
    end

    function TextBox:SetVisible(Visible: boolean)
        if typeof(Visible) ~= "boolean" then return end
        if Label.Visible == Visible then return end
        
        Label.Visible = Visible
        Container:UpdateSize(Visible and 45 or -45, Label)
    end

    function TextBox:GetValue(): string
        return self.Value
    end

    function TextBox:SetValue(Value: string)
        self.Value = tostring(Value)
        GuiTextBox.Text = self.Value
    end


    GuiTextBox.Name = "TextBox"
    GuiTextBox.BackgroundColor3 = Menu.ItemColor
    GuiTextBox.BorderColor3 = Menu.BorderColor
    GuiTextBox.BorderMode = Enum.BorderMode.Inset
    GuiTextBox.Position = UDim2.fromOffset(0, 20)
    GuiTextBox.Size = UDim2.new(1, -50, 0, 20)
    GuiTextBox.Font = Enum.Font.RobotoMono
    GuiTextBox.Text = TextBox.Value
    GuiTextBox.TextColor3 = Color3.new(1, 1, 1)
    GuiTextBox.TextSize = 14
    GuiTextBox.ClearTextOnFocus = false
    GuiTextBox.ClipsDescendants = true
    GuiTextBox.Parent = Label
    CreateStroke(GuiTextBox, Color3.new(), 1)
    AddEventListener(GuiTextBox, function()
        GuiTextBox.BackgroundColor3 = Menu.ItemColor
        GuiTextBox.BorderColor3 = Menu.BorderColor
    end)
    GuiTextBox.FocusLost:Connect(function()
        TextBox.Value = GuiTextBox.Text
        TextBox.Callback(GuiTextBox.Text)
    end)
    GuiTextBox.MouseEnter:Connect(function()
        if ToolTip then
            Menu:SetToolTip(true, ToolTip, GuiTextBox)
        end
    end)
    GuiTextBox.MouseLeave:Connect(function()
        if ToolTip then
            Menu:SetToolTip(false)
        end
    end)

    Container:UpdateSize(45)
    table.insert(Items, TextBox)
    return #Items
end


function Menu.CheckBox(Tab_Name: string, Container_Name: string, Name: string, Boolean: boolean, Callback: any, ToolTip: string): CheckBox
    local Container = GetContainer(Tab_Name, Container_Name)
    local Label = CreateLabel(Container.self, "CheckBox", Name, nil, UDim2.fromOffset(20, Container:GetHeight()))
    local Button = Instance.new("TextButton")
    
    local CheckBox = {self = Label}
    CheckBox.Name = Name
    CheckBox.Class = "CheckBox"
    CheckBox.Tab = Tab_Name
    CheckBox.Container = Container_Name
    CheckBox.Index = #Items + 1
    CheckBox.Value = typeof(Boolean) == "boolean" and Boolean or false
    CheckBox.Callback = typeof(Callback) == "function" and Callback or function() end


    function CheckBox:Update(Value: boolean)
        self.Value = typeof(Value) == "boolean" and Value
        Button.BackgroundColor3 = self.Value and Menu.Accent or Menu.ItemColor
    end

    function CheckBox:SetLabel(Name: string)
        Label.Text = tostring(Name)
    end

    function CheckBox:SetVisible(Visible: boolean)
        if typeof(Visible) ~= "boolean" then return end
        if Label.Visible == Visible then return end
        
        Label.Visible = Visible
        Container:UpdateSize(Visible and 20 or -20, Label)
    end

    function CheckBox:GetValue(): boolean
        return self.Value
    end

    function CheckBox:SetValue(Value: boolean)
        self:Update(Value)
    end


    Label.MouseEnter:Connect(function()
        if ToolTip then
            Menu:SetToolTip(true, ToolTip, Label)
        end
    end)
    Label.MouseLeave:Connect(function()
        if ToolTip then
            Menu:SetToolTip(false)
        end
    end)

    Button.BackgroundColor3 = Menu.ItemColor
    Button.BorderColor3 = Color3.new()
    Button.Position = UDim2.fromOffset(-14, 4)
    Button.Size = UDim2.fromOffset(8, 8)
    Button.Text = ""
    Button.Parent = Label
    AddEventListener(Button, function()
        Button.BackgroundColor3 = CheckBox.Value and Menu.Accent or Menu.ItemColor
    end)
    Button.MouseButton1Click:Connect(function()
        CheckBox:Update(not CheckBox.Value)
        CheckBox.Callback(CheckBox.Value)
    end)

    CheckBox:Update(CheckBox.Value)
    Container:UpdateSize(20)
    table.insert(Items, CheckBox)
    return #Items
end


function Menu.Hotkey(Tab_Name: string, Container_Name: string, Name: string, Key:EnumItem, Callback: any, ToolTip: string): Hotkey
    local Container = GetContainer(Tab_Name, Container_Name)
    local Label = CreateLabel(Container.self, "Hotkey", Name, nil, UDim2.fromOffset(20, Container:GetHeight()))
    local Button = Instance.new("TextButton")
    local Selected_Hotkey = Instance.new("Frame")
    local HotkeyToggle = Instance.new("TextButton")
    local HotkeyHold = Instance.new("TextButton")

    local Hotkey = {self = Label}
    Hotkey.Name = Name
    Hotkey.Class = "Hotkey"
    Hotkey.Tab = Tab_Name
    Hotkey.Container = Container_Name
    Hotkey.Index = #Items + 1
    Hotkey.Key = typeof(Key) == "EnumItem" and Key or nil
    Hotkey.Callback = typeof(Callback) == "function" and Callback or function() end
    Hotkey.Editing = false
    Hotkey.Mode = "Toggle"


    function Hotkey:Update(Input: EnumItem, Mode: string)
        Button.Text = Input and string.format("[%s]", Input.Name) or "[None]"

        self.Key = Input
        self.Mode = Mode or "Toggle"
        self.Editing = false
    end

    function Hotkey:SetLabel(Name: string)
        Label.Text = tostring(Name)
    end

    function Hotkey:SetVisible(Visible: boolean)
        if typeof(Visible) ~= "boolean" then return end
        if Label.Visible == Visible then return end
        
        Label.Visible = Visible
        Container:UpdateSize(Visible and 20 or -20, Label)
    end

    function Hotkey:GetValue(): EnumItem--, string
        return self.Key, self.Mode
    end

    function Hotkey:SetValue(Key: EnumItem, Mode: string)
        self:Update(Key, Mode)
    end


    Label.MouseEnter:Connect(function()
        if ToolTip then
            Menu:SetToolTip(true, ToolTip, Label)
        end
    end)
    Label.MouseLeave:Connect(function()
        if ToolTip then
            Menu:SetToolTip(false)
        end
    end)

    Button.Name = "Hotkey"
    Button.BackgroundTransparency = 1
    Button.Position = UDim2.new(1, -100, 0, 4)
    Button.Size = UDim2.fromOffset(75, 8)
    Button.Font = Enum.Font.RobotoMono
    Button.Text = Key and "[" .. Key.Name .. "]" or "[None]"
    Button.TextColor3 = Color3.new(1, 1, 1)
    Button.TextSize = 12
    Button.TextXAlignment = Enum.TextXAlignment.Right
    Button.Parent = Label

    Selected_Hotkey.Name = "Selected_Hotkey"
    Selected_Hotkey.Visible = false
    Selected_Hotkey.BackgroundColor3 = Menu.ItemColor
    Selected_Hotkey.BorderColor3 = Menu.BorderColor
    Selected_Hotkey.Position = UDim2.fromOffset(200, 100)
    Selected_Hotkey.Size = UDim2.fromOffset(100, 30)
    Selected_Hotkey.Parent = nil
    CreateStroke(Selected_Hotkey, Color3.new(), 1)
    AddEventListener(Selected_Hotkey, function()
        Selected_Hotkey.BackgroundColor3 = Menu.ItemColor
        Selected_Hotkey.BorderColor3 = Menu.BorderColor
    end)

    HotkeyToggle.Parent = Selected_Hotkey
    HotkeyToggle.BackgroundColor3 = Menu.ItemColor
    HotkeyToggle.BorderColor3 = Color3.new()
    HotkeyToggle.BorderSizePixel = 0
    HotkeyToggle.Position = UDim2.new()
    HotkeyToggle.Size = UDim2.new(1, 0, 0, 13)
    HotkeyToggle.Font = Enum.Font.RobotoMono
    HotkeyToggle.Text = "Toggle"
    HotkeyToggle.TextColor3 = Menu.Accent
    HotkeyToggle.TextSize = 14
    AddEventListener(HotkeyToggle, function()
        HotkeyToggle.BackgroundColor3 = Menu.ItemColor
        if Hotkey.Mode == "Toggle" then
            HotkeyToggle.TextColor3 = Menu.Accent
        end
    end)
    HotkeyToggle.MouseButton1Click:Connect(function()
        Hotkey:Update(Hotkey.Key, "Toggle")
        HotkeyToggle.TextColor3 = Menu.Accent
        HotkeyHold.TextColor3 = Color3.new(1, 1, 1)
        UpdateSelected()
        Hotkey.Callback(Hotkey.Key, Hotkey.Mode)
    end)

    HotkeyHold.Parent = Selected_Hotkey
    HotkeyHold.BackgroundColor3 = Menu.ItemColor
    HotkeyHold.BorderColor3 = Color3.new()
    HotkeyHold.BorderSizePixel = 0
    HotkeyHold.Position = UDim2.new(0, 0, 0, 15)
    HotkeyHold.Size = UDim2.new(1, 0, 0, 13)
    HotkeyHold.Font = Enum.Font.RobotoMono
    HotkeyHold.Text = "Hold"
    HotkeyHold.TextColor3 = Color3.new(1, 1, 1)
    HotkeyHold.TextSize = 14
    AddEventListener(HotkeyHold, function()
        HotkeyHold.BackgroundColor3 = Menu.ItemColor
        if Hotkey.Mode == "Hold" then
            HotkeyHold.TextColor3 = Menu.Accent
        end
    end)
    HotkeyHold.MouseButton1Click:Connect(function()
        Hotkey:Update(Hotkey.Key, "Hold")
        HotkeyHold.TextColor3 = Menu.Accent
        HotkeyToggle.TextColor3 = Color3.new(1, 1, 1)
        UpdateSelected()
        Hotkey.Callback(Hotkey.Key, Hotkey.Mode)
    end)

    Button.MouseButton1Click:Connect(function()
        Button.Text = "..."
        Hotkey.Editing = true
        if UserInput:IsKeyDown(HotkeyRemoveKey) and Key ~= HotkeyRemoveKey then
            Hotkey:Update()
            Hotkey.Callback(nil, Hotkey.Mode)
        end
    end)
    Button.MouseButton2Click:Connect(function()
        UpdateSelected(Selected_Hotkey, Button, UDim2.fromOffset(100, 0))
    end)

    UserInput.InputBegan:Connect(function(Input)
        if Hotkey.Editing then
            local Key = Input.KeyCode
            if Key == Enum.KeyCode.Unknown then
                local InputType = Input.UserInputType
                Hotkey:Update(InputType)
                Hotkey.Callback(InputType, Hotkey.Mode)
            else
                Hotkey:Update(Key)
                Hotkey.Callback(Key, Hotkey.Mode)
            end
        end
    end)

    Container:UpdateSize(20)
    table.insert(Items, Hotkey)
    return #Items
end


function Menu.Slider(Tab_Name: string, Container_Name: string, Name: string, Min: number, Max: number, Value: number, Unit: string, Scale: number, Callback: any, ToolTip: string): Slider
    local Container = GetContainer(Tab_Name, Container_Name)
    local Label = CreateLabel(Container.self, "Slider", Name, UDim2.new(1, -10, 0, 15), UDim2.fromOffset(20, Container:GetHeight()))
    local Button = Instance.new("TextButton")
    local ValueBar = Instance.new("TextLabel")
    local ValueBox = Instance.new("TextBox")
    local ValueLabel = Instance.new("TextLabel")

    local Slider = {}
    Slider.Name = Name
    Slider.Class = "Slider"
    Slider.Tab = Tab_Name
    Slider.Container = Container_Name
    Slider.Index = #Items + 1
    Slider.Min = typeof(Min) == "number" and math.clamp(Min, Min, Max) or 0
    Slider.Max = typeof(Max) == "number" and Max or 100
    Slider.Value = typeof(Value) == "number" and Value or 100
    Slider.Unit = typeof(Unit) == "string" and Unit or ""
    Slider.Scale = typeof(Scale) == "number" and Scale or 0
    Slider.Callback = typeof(Callback) == "function" and Callback or function() end


    local function UpdateSlider(Percentage: number)
        local Percentage = typeof(Percentage == "number") and math.clamp(Percentage, 0, 1) or 0
        local Value = Slider.Min + ((Slider.Max - Slider.Min) * Percentage)
        local Scale = (10 ^ Slider.Scale)
        Slider.Value = math.round(Value * Scale) / Scale

        ValueBar.Size = UDim2.new(Percentage, 0, 0, 5)
        ValueBox.Text = "[" .. Slider.Value .. "]"
        ValueLabel.Text = Slider.Value .. Slider.Unit
    end


    function Slider:Update(Percentage: number)
        UpdateSlider(Percentage)
    end

    function Slider:SetLabel(Name: string)
        Label.Text = tostring(Name)
    end

    function Slider:SetVisible(Visible: boolean)
        if typeof(Visible) ~= "boolean" then return end
        if Label.Visible == Visible then return end
        
        Label.Visible = Visible
        Container:UpdateSize(Visible and 30 or -30, Label)
    end

    function Slider:GetValue(): number
        return self.Value
    end

    function Slider:SetValue(Value: number)
        self.Value = typeof(Value) == "number" and math.clamp(Value, self.Min, self.Max) or self.Min
        local Percentage = (self.Value - self.Min) / (self.Max - self.Min)
        self:Update(Percentage)
    end

    Slider.self = Label

    Label.MouseEnter:Connect(function()
        if ToolTip then
            Menu:SetToolTip(true, ToolTip, Label)
        end
    end)
    Label.MouseLeave:Connect(function()
        Menu:SetToolTip(false)
    end)

    Button.Name = "Slider"
    Button.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    Button.BorderColor3 = Color3.new()
    Button.Position = UDim2.fromOffset(0, 20)
    Button.Size = UDim2.new(1, -40, 0, 5)
    Button.Text = ""
    Button.AutoButtonColor = false
    Button.Parent = Label

    ValueBar.Name = "ValueBar"
    ValueBar.BackgroundColor3 = Menu.Accent
    ValueBar.BorderSizePixel = 0
    ValueBar.Size = UDim2.fromScale(1, 1)
    ValueBar.Text = ""
    ValueBar.Parent = Button
    AddEventListener(ValueBar, function()
        ValueBar.BackgroundColor3 = Menu.Accent
    end)
    
    ValueBox.Name = "ValueBox"
    ValueBox.BackgroundTransparency = 1
    ValueBox.Position = UDim2.new(1, -65, 0, 5)
    ValueBox.Size = UDim2.fromOffset(50, 10)
    ValueBox.Font = Enum.Font.RobotoMono
    ValueBox.Text = ""
    ValueBox.TextColor3 = Color3.new(1, 1, 1)
    ValueBox.TextSize = 12
    ValueBox.TextXAlignment = Enum.TextXAlignment.Right
    ValueBox.ClipsDescendants = true
    ValueBox.Parent = Label
    ValueBox.FocusLost:Connect(function()
        Slider.Value = tonumber(ValueBox.Text) or 0
        local Percentage = (Slider.Value - Slider.Min) / (Slider.Max - Slider.Min)
        Slider:Update(Percentage)
        Slider.Callback(Slider.Value)
    end)

    ValueLabel.Name = "ValueLabel"
    ValueLabel.BackgroundTransparency = 1
    ValueLabel.Position = UDim2.new(1, 0, 0, 2)
    ValueLabel.Size = UDim2.new(0, 0, 1, 0)
    ValueLabel.Font = Enum.Font.RobotoMono
    ValueLabel.Text = ""
    ValueLabel.TextColor3 = Color3.new(1, 1, 1)
    ValueLabel.TextSize = 14
    ValueLabel.Parent = ValueBar

    Button.InputBegan:Connect(function(Input: InputObject, Process: boolean)
        if (not Dragging.Gui and not Dragging.True) and (Input.UserInputType == Enum.UserInputType.MouseButton1) then
            Dragging = {Gui = Button, True = true}
            local InputPosition = Vector2.new(Input.Position.X, Input.Position.Y)
            local Percentage = (InputPosition - Button.AbsolutePosition) / Button.AbsoluteSize
            Slider:Update(Percentage.X)
            Slider.Callback(Slider.Value)
        end
    end)

    UserInput.InputChanged:Connect(function(Input: InputObject, Process: boolean)
        if Dragging.Gui ~= Button then return end
        if not (UserInput:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)) then
            Dragging = {Gui = nil, True = false}
            return
        end
        if (Input.UserInputType == Enum.UserInputType.MouseMovement) then
            local InputPosition = Vector2.new(Input.Position.X, Input.Position.Y)
            local Percentage = (InputPosition - Button.AbsolutePosition) / Button.AbsoluteSize
            Slider:Update(Percentage.X)
            Slider.Callback(Slider.Value)
        end
    end)


    Slider:SetValue(Slider.Value)
    Container:UpdateSize(30)
    table.insert(Items, Slider)
    return #Items
end


function Menu.ColorPicker(Tab_Name: string, Container_Name: string, Name: string, Color: Color3, Alpha: number, Callback: any, ToolTip: string): ColorPicker
    local Container = GetContainer(Tab_Name, Container_Name)
    local Label = CreateLabel(Container.self, "ColorPicker", Name, UDim2.new(1, -10, 0, 15), UDim2.fromOffset(20, Container:GetHeight()))
    local Button = Instance.new("TextButton")
    local Selected_ColorPicker = Instance.new("Frame")
    local HexBox = Instance.new("TextBox")
    local Saturation = Instance.new("ImageButton")
    local Alpha = Instance.new("ImageButton")
    local Hue = Instance.new("ImageButton")
    local SaturationCursor = Instance.new("Frame")
    local AlphaCursor = Instance.new("Frame")
    local HueCursor = Instance.new("Frame")
    local CopyButton = Instance.new("TextButton") -- rbxassetid://9090721920
    local PasteButton = Instance.new("TextButton") -- rbxassetid://9090721063
    local AlphaColorGradient = Instance.new("UIGradient")

    local ColorPicker = {self = Label}
    ColorPicker.Name = Name
    ColorPicker.Tab = Tab_Name
    ColorPicker.Class = "ColorPicker"
    ColorPicker.Container = Container_Name
    ColorPicker.Index = #Items + 1
    ColorPicker.Color = typeof(Color) == "Color3" and Color or Color3.new(1, 1, 1)
    ColorPicker.Saturation = {0, 0} -- no i'm not going to use ColorPicker.Value that would confuse people with ColorPicker.Color
    ColorPicker.Alpha = typeof(Alpha) == "number" and Alpha or 0
    ColorPicker.Hue = 0
    ColorPicker.Callback = typeof(Callback) == "function" and Callback or function() end


    local function UpdateColor()
        ColorPicker.Color = Color3.fromHSV(ColorPicker.Hue, ColorPicker.Saturation[1], ColorPicker.Saturation[2])

        HexBox.Text = "#" .. string.upper(ColorPicker.Color:ToHex()) .. string.upper(string.format("%X", ColorPicker.Alpha * 255))
        Button.BackgroundColor3 = ColorPicker.Color
        Saturation.BackgroundColor3 = ColorPicker.Color
        AlphaColorGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)), ColorSequenceKeypoint.new(1, ColorPicker.Color)}

        SaturationCursor.Position = UDim2.fromScale(math.clamp(ColorPicker.Saturation[1], 0, 0.95), math.clamp(1 - ColorPicker.Saturation[2], 0, 0.95))
        AlphaCursor.Position = UDim2.fromScale(0, math.clamp(ColorPicker.Alpha, 0, 0.98))
        HueCursor.Position = UDim2.fromScale(0, math.clamp(ColorPicker.Hue, 0, 0.98))

        ColorPicker.Callback(ColorPicker.Color, ColorPicker.Alpha)
    end


    function ColorPicker:Update()
        UpdateColor()
    end

    function ColorPicker:SetLabel(Name: string)
        Label.Text = tostring(Name)
    end

    function ColorPicker:SetVisible(Visible: boolean)
        if typeof(Visible) ~= "boolean" then return end
        if Label.Visible == Visible then return end
        
        Label.Visible = Visible
        Container:UpdateSize(Visible and 20 or -20, Label)
    end

    function ColorPicker:SetValue(Color: Color3, Alpha: number)
        self.Color, self.Alpha = typeof(Color) == "Color3" and Color or Color3.new(), typeof(Alpha) == "number" and Alpha or 0
        self.Hue, self.Saturation[1], self.Saturation[2] = self.Color:ToHSV()
        self:Update()
    end

    function ColorPicker:GetValue(): Color3--, number
        return self.Color, self.Alpha
    end


    Label.MouseEnter:Connect(function()
        if ToolTip then
            Menu:SetToolTip(true, ToolTip, Label)
        end
    end)
    Label.MouseLeave:Connect(function()
        if ToolTip then
            Menu:SetToolTip(false)
        end
    end)

    Button.Name = "ColorPicker"
    Button.BackgroundColor3 = ColorPicker.Color
    Button.BorderColor3 = Color3.new()
    Button.Position = UDim2.new(1, -35, 0, 4)
    Button.Size = UDim2.fromOffset(20, 8)
    Button.Font = Enum.Font.RobotoMono
    Button.Text = ""
    Button.TextColor3 = Color3.new(1, 1, 1)
    Button.TextSize = 12
    Button.Parent = Label
    Button.MouseButton1Click:Connect(function()
        UpdateSelected(Selected_ColorPicker, Button, UDim2.fromOffset(20, 20))
    end)

    Selected_ColorPicker.Name = "Selected_ColorPicker"
    Selected_ColorPicker.Visible = false
    Selected_ColorPicker.BackgroundColor3 = Menu.ItemColor
    Selected_ColorPicker.BorderColor3 = Menu.BorderColor
    Selected_ColorPicker.BorderMode = Enum.BorderMode.Inset
    Selected_ColorPicker.Position = UDim2.new(0, 200, 0, 170)
    Selected_ColorPicker.Size = UDim2.new(0, 190, 0, 180)
    Selected_ColorPicker.Parent = nil
    CreateStroke(Selected_ColorPicker, Color3.new(), 1)
    AddEventListener(Selected_ColorPicker, function()
        Selected_ColorPicker.BackgroundColor3 = Menu.ItemColor
        Selected_ColorPicker.BorderColor3 = Menu.BorderColor
    end)

    HexBox.Name = "Hex"
    HexBox.BackgroundColor3 = Menu.ItemColor
    HexBox.BorderColor3 = Menu.BorderColor
    HexBox.BorderMode = Enum.BorderMode.Inset
    HexBox.Size = UDim2.new(1, -10, 0, 20)
    HexBox.Position = UDim2.fromOffset(5, 150)
    HexBox.Text = "#" .. string.upper(ColorPicker.Color:ToHex())
    HexBox.Font = Enum.Font.RobotoMono
    HexBox.TextSize = 14
    HexBox.TextColor3 = Color3.new(1, 1, 1)
    HexBox.ClearTextOnFocus = false
    HexBox.ClipsDescendants = true
    HexBox.Parent = Selected_ColorPicker
    CreateStroke(HexBox, Color3.new(), 1)
    HexBox.FocusLost:Connect(function()
        pcall(function()
            local Color, Alpha = string.sub(HexBox.Text, 1, 7), string.sub(HexBox.Text, 8, #HexBox.Text)
            ColorPicker.Color = Color3.fromHex(Color)
            ColorPicker.Alpha = tonumber(Alpha, 16) / 255
            ColorPicker.Hue, ColorPicker.Saturation[1], ColorPicker.Saturation[2] = ColorPicker.Color:ToHSV()
            ColorPicker:Update()
        end)
    end)
    AddEventListener(HexBox, function()
        HexBox.BackgroundColor3 = Menu.ItemColor
        HexBox.BorderColor3 = Menu.BorderColor
    end)

    Saturation.Name = "Saturation"
    Saturation.BackgroundColor3 = ColorPicker.Color
    Saturation.BorderColor3 = Menu.BorderColor
    Saturation.Position = UDim2.new(0, 4, 0, 4)
    Saturation.Size = UDim2.new(0, 150, 0, 140)
    Saturation.Image = "rbxassetid://8180999986"
    Saturation.ImageColor3 = Color3.new()
    Saturation.AutoButtonColor = false
    Saturation.Parent = Selected_ColorPicker
    CreateStroke(Saturation, Color3.new(), 1)
    AddEventListener(Saturation, function()
        Saturation.BorderColor3 = Menu.BorderColor
    end)
    
    Alpha.Name = "Alpha"
    Alpha.BorderColor3 = Menu.BorderColor
    Alpha.Position = UDim2.new(0, 175, 0, 4)
    Alpha.Size = UDim2.new(0, 10, 0, 140)
    Alpha.Image = "rbxassetid://9090739505"--"rbxassetid://8181003956"
    Alpha.ScaleType = Enum.ScaleType.Crop
    Alpha.AutoButtonColor = false
    Alpha.Parent = Selected_ColorPicker
    CreateStroke(Alpha, Color3.new(), 1)
    AddEventListener(Alpha, function()
        Alpha.BorderColor3 = Menu.BorderColor
    end)

    Hue.Name = "Hue"
    Hue.BackgroundColor3 = Color3.new(1, 1, 1)
    Hue.BorderColor3 = Menu.BorderColor
    Hue.Position = UDim2.new(0, 160, 0, 4)
    Hue.Size = UDim2.new(0, 10, 0, 140)
    Hue.Image = "rbxassetid://8180989234"
    Hue.ScaleType = Enum.ScaleType.Crop
    Hue.AutoButtonColor = false
    Hue.Parent = Selected_ColorPicker
    CreateStroke(Hue, Color3.new(), 1)
    AddEventListener(Hue, function()
        Hue.BorderColor3 = Menu.BorderColor
    end)

    SaturationCursor.Name = "Cursor"
    SaturationCursor.BackgroundColor3 = Color3.new(1, 1, 1)
    SaturationCursor.BorderColor3 = Color3.new()
    SaturationCursor.Size = UDim2.fromOffset(5, 5)
    SaturationCursor.Parent = Saturation

    AlphaCursor.Name = "Cursor"
    AlphaCursor.BackgroundColor3 = Color3.new(1, 1, 1)
    AlphaCursor.BorderColor3 = Color3.new()
    AlphaCursor.Size = UDim2.new(1, 0, 0, 2)
    AlphaCursor.Parent = Alpha

    HueCursor.Name = "Cursor"
    HueCursor.BackgroundColor3 = Color3.new(1, 1, 1)
    HueCursor.BorderColor3 = Color3.new()
    HueCursor.Size = UDim2.new(1, 0, 0, 2)
    HueCursor.Parent = Hue

    AlphaColorGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)), ColorSequenceKeypoint.new(1, ColorPicker.Color)}
    AlphaColorGradient.Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0, 0.20), NumberSequenceKeypoint.new(1, 0.2)}
    AlphaColorGradient.Offset = Vector2.new(0, -0.1)
    AlphaColorGradient.Rotation = -90
    AlphaColorGradient.Parent = Alpha

    local function UpdateSaturation(PercentageX: number, PercentageY: number)
        local PercentageX = typeof(PercentageX == "number") and math.clamp(PercentageX, 0, 1) or 0
        local PercentageY = typeof(PercentageY == "number") and math.clamp(PercentageY, 0, 1) or 0
        ColorPicker.Saturation[1] = PercentageX
        ColorPicker.Saturation[2] = 1 - PercentageY
        ColorPicker:Update()
    end

    local function UpdateAlpha(Percentage: number)
        local Percentage = typeof(Percentage == "number") and math.clamp(Percentage, 0, 1) or 0
        ColorPicker.Alpha = Percentage
        ColorPicker:Update()
    end

    local function UpdateHue(Percentage: number)
        local Percentage = typeof(Percentage == "number") and math.clamp(Percentage, 0, 1) or 0
        ColorPicker.Hue = Percentage
        ColorPicker:Update()
    end

    Saturation.InputBegan:Connect(function(Input: InputObject, Process: boolean)
        if (not Dragging.Gui and not Dragging.True) and (Input.UserInputType == Enum.UserInputType.MouseButton1) then
            Dragging = {Gui = Saturation, True = true}
            local InputPosition = Vector2.new(Input.Position.X, Input.Position.Y)
            local Percentage = (InputPosition - Saturation.AbsolutePosition) / Saturation.AbsoluteSize
            UpdateSaturation(Percentage.X, Percentage.Y)
        end
    end)

    Alpha.InputBegan:Connect(function(Input: InputObject, Process: boolean)
        if (not Dragging.Gui and not Dragging.True) and (Input.UserInputType == Enum.UserInputType.MouseButton1) then
            Dragging = {Gui = Alpha, True = true}
            local InputPosition = Vector2.new(Input.Position.X, Input.Position.Y)
            local Percentage = (InputPosition - Alpha.AbsolutePosition) / Alpha.AbsoluteSize
            UpdateAlpha(Percentage.Y)
        end
    end)

    Hue.InputBegan:Connect(function(Input: InputObject, Process: boolean)
        if (not Dragging.Gui and not Dragging.True) and (Input.UserInputType == Enum.UserInputType.MouseButton1) then
            Dragging = {Gui = Hue, True = true}
            local InputPosition = Vector2.new(Input.Position.X, Input.Position.Y)
            local Percentage = (InputPosition - Hue.AbsolutePosition) / Hue.AbsoluteSize
            UpdateHue(Percentage.Y)
        end
    end)

    UserInput.InputChanged:Connect(function(Input: InputObject, Process: boolean)
        if (Dragging.Gui ~= Saturation and Dragging.Gui ~= Alpha and Dragging.Gui ~= Hue) then return end
        if not (UserInput:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)) then
            Dragging = {Gui = nil, True = false}
            return
        end

        local InputPosition = Vector2.new(Input.Position.X, Input.Position.Y)
        if (Input.UserInputType == Enum.UserInputType.MouseMovement) then
            if Dragging.Gui == Saturation then
                local Percentage = (InputPosition - Saturation.AbsolutePosition) / Saturation.AbsoluteSize
                UpdateSaturation(Percentage.X, Percentage.Y)
            end
            if Dragging.Gui == Alpha then
                local Percentage = (InputPosition - Alpha.AbsolutePosition) / Alpha.AbsoluteSize
                UpdateAlpha(Percentage.Y)
            end
            if Dragging.Gui == Hue then
                local Percentage = (InputPosition - Hue.AbsolutePosition) / Hue.AbsoluteSize
                UpdateHue(Percentage.Y)
            end
        end
    end)
    
    
    ColorPicker.Hue, ColorPicker.Saturation[1], ColorPicker.Saturation[2] = ColorPicker.Color:ToHSV()
    ColorPicker:Update()
    Container:UpdateSize(20)
    table.insert(Items, ColorPicker)
    return #Items
end


function Menu.ComboBox(Tab_Name: string, Container_Name: string, Name: string, Value: string, Value_Items: table, Callback: any, ToolTip: string): ComboBox
    local Container = GetContainer(Tab_Name, Container_Name)
    local Label = CreateLabel(Container.self, "ComboBox", Name, UDim2.new(1, -10, 0, 15), UDim2.fromOffset(20, Container:GetHeight()))
    local Button = Instance.new("TextButton")
    local Symbol = Instance.new("TextLabel")
    local List = Instance.new("ScrollingFrame")
    local ListLayout = Instance.new("UIListLayout")

    local ComboBox = {}
    ComboBox.Name = Name
    ComboBox.Class = "ComboBox"
    ComboBox.Tab = Tab_Name
    ComboBox.Container = Container_Name
    ComboBox.Index = #Items + 1
    ComboBox.Callback = typeof(Callback) == "function" and Callback or function() end
    ComboBox.Value = typeof(Value) == "string" and Value or ""
    ComboBox.Items = typeof(Value_Items) == "table" and Value_Items or {}

    local function UpdateValue(Value: string)
        ComboBox.Value = tostring(Value)
        Button.Text = ComboBox.Value or "[...]"
    end

    local ItemObjects = {}
    local function AddItem(Name: string)
        local Button = Instance.new("TextButton")
        Button.BackgroundColor3 = Menu.ItemColor
        Button.BorderColor3 = Color3.new()
        Button.BorderSizePixel = 0
        Button.Size = UDim2.new(1, 0, 0, 15)
        Button.Font = Enum.Font.RobotoMono
        Button.Text = tostring(Name)
        Button.TextColor3 = ComboBox.Value == Button.Text and Menu.Accent or Color3.new(1, 1, 1)
        Button.TextSize = 14
        Button.TextTruncate = Enum.TextTruncate.AtEnd
        Button.Parent = List
        Button.MouseButton1Click:Connect(function()
            for _, v in ipairs(List:GetChildren()) do
                if v:IsA("GuiButton") then
                    if v == Button then continue end
                    v.TextColor3 = Color3.new(1, 1, 1)
                end
            end
            Button.TextColor3 = Menu.Accent
            UpdateValue(Button.Text)
            UpdateSelected()
            ComboBox.Callback(ComboBox.Value)
        end)
        AddEventListener(Button, function()
            Button.BackgroundColor3 = Menu.ItemColor
            if ComboBox.Value == Button.Text then
                Button.TextColor3 = Menu.Accent
            else
                Button.TextColor3 = Color3.new(1, 1, 1)
            end
        end)
        
        if #ComboBox.Items >= 6 then
            List.CanvasSize += UDim2.fromOffset(0, 15)
        end
        table.insert(ItemObjects, Button)
    end


    function ComboBox:Update(Value: string, Items: any)
        UpdateValue(Value)
        if typeof(Items) == "table" then
            for _, Button in ipairs(ItemObjects) do
                Button:Destroy()
            end
            table.clear(ItemObjects)

            List.CanvasSize = UDim2.new()
            List.Size = UDim2.fromOffset(Button.AbsoluteSize.X, math.clamp(#self.Items * 15, 15, 90))
            for _, Item in ipairs(self.Items) do
                AddItem(tostring(Item))
            end
        else
            for _, Button in ipairs(ItemObjects) do
                Button.TextColor3 = self.Value == Button.Text and Menu.Accent or Color3.new(1, 1, 1)
            end
        end
    end

    function ComboBox:SetLabel(Name: string)
        Label.Text = tostring(Name)
    end

    function ComboBox:SetVisible(Visible: boolean)
        if typeof(Visible) ~= "boolean" then return end
        if Label.Visible == Visible then return end
        
        Label.Visible = Visible
        Container:UpdateSize(Visible and 40 or -40, Label)
    end

    function ComboBox:GetValue(): table
        return self.Value
    end

    function ComboBox:SetValue(Value: string, Items: any)
        if typeof(Items) == "table" then
            self.Items = Items
        end
        self:Update(Value, self.Items)
    end


    Label.MouseEnter:Connect(function()
        if ToolTip then
            Menu:SetToolTip(true, ToolTip, Label)
        end
    end)
    Label.MouseLeave:Connect(function()
        if ToolTip then
            Menu:SetToolTip(false)
        end
    end)

    Button.Name = "Button"
    Button.BackgroundColor3 = Menu.ItemColor
    Button.BorderColor3 = Color3.new()
    Button.Position = UDim2.new(0, 0, 0, 20)
    Button.Size = UDim2.new(1, -40, 0, 15)
    Button.Font = Enum.Font.RobotoMono
    Button.Text = ComboBox.Value
    Button.TextColor3 = Color3.new(1, 1, 1)
    Button.TextSize = 14
    Button.TextTruncate = Enum.TextTruncate.AtEnd
    Button.Parent = Label
    Button.MouseButton1Click:Connect(function()
        UpdateSelected(List, Button, UDim2.fromOffset(0, 15))
        List.Size = UDim2.fromOffset(Button.AbsoluteSize.X, math.clamp(#ComboBox.Items * 15, 15, 90))
    end)
    AddEventListener(Button, function()
        Button.BackgroundColor3 = Menu.ItemColor
    end)

    Symbol.Name = "Symbol"
    Symbol.Parent = Button
    Symbol.BackgroundColor3 = Color3.new(1, 1, 1)
    Symbol.BackgroundTransparency = 1
    Symbol.Position = UDim2.new(1, -10, 0, 0)
    Symbol.Size = UDim2.new(0, 5, 1, 0)
    Symbol.Font = Enum.Font.RobotoMono
    Symbol.Text = "-"
    Symbol.TextColor3 = Color3.new(1, 1, 1)
    Symbol.TextSize = 14

    List.Visible = false
    List.BackgroundColor3 = Menu.ItemColor
    List.BorderColor3 = Menu.BorderColor
    List.BorderMode = Enum.BorderMode.Inset
    List.Size = UDim2.fromOffset(Button.AbsoluteSize.X, math.clamp(#ComboBox.Items * 15, 15, 90))
    List.Position = UDim2.fromOffset(20, 30)
    List.CanvasSize = UDim2.new()
    List.ScrollBarThickness = 4
    List.ScrollBarImageColor3 = Menu.Accent
    List.Parent = Label
    CreateStroke(List, Color3.new(), 1)
    AddEventListener(List, function()
        List.BackgroundColor3 = Menu.ItemColor
        List.BorderColor3 = Menu.BorderColor
        List.ScrollBarImageColor3 = Menu.Accent
    end)

    ListLayout.Parent = List

    ComboBox:Update(ComboBox.Value, ComboBox.Items)
    Container:UpdateSize(40)
    table.insert(Items, ComboBox)
    return #Items
end


function Menu.MultiSelect(Tab_Name: string, Container_Name: string, Name: string, Value_Items: table, Callback: any, ToolTip: string): MultiSelect
    local Container = GetContainer(Tab_Name, Container_Name)
    local Label = CreateLabel(Container.self, "MultiSelect", Name, UDim2.new(1, -10, 0, 15), UDim2.fromOffset(20, Container:GetHeight()))
    local Button = Instance.new("TextButton")
    local Symbol = Instance.new("TextLabel")
    local List = Instance.new("ScrollingFrame")
    local ListLayout = Instance.new("UIListLayout")

    local MultiSelect = {self = Label}
    MultiSelect.Name = Name
    MultiSelect.Class = "MultiSelect"
    MultiSelect.Tab = Tab_Name
    MultiSelect.Container = Container_Name
    MultiSelect.Index = #Items + 1
    MultiSelect.Callback = typeof(Callback) == "function" and Callback or function() end
    MultiSelect.Items = typeof(Value_Items) == "table" and Value_Items or {}
    MultiSelect.Value = {}


    local function GetSelectedItems(): table
        local Selected = {}
        for k, v in pairs(MultiSelect.Items) do
            if v == true then table.insert(Selected, k) end
        end
        return Selected
    end

    local function UpdateValue()
        MultiSelect.Value = GetSelectedItems()
        Button.Text = #MultiSelect.Value > 0 and table.concat(MultiSelect.Value, ", ") or "[...]"
    end

    local ItemObjects = {}
    local function AddItem(Name: string, Checked: boolean)
        local Button = Instance.new("TextButton")
        Button.BackgroundColor3 = Menu.ItemColor
        Button.BorderColor3 = Color3.new()
        Button.BorderSizePixel = 0
        Button.Size = UDim2.new(1, 0, 0, 15)
        Button.Font = Enum.Font.RobotoMono
        Button.Text = Name
        Button.TextColor3 = Checked and Menu.Accent or Color3.new(1, 1, 1)
        Button.TextSize = 14
        Button.Parent = List
        Button.TextTruncate = Enum.TextTruncate.AtEnd
        Button.MouseButton1Click:Connect(function()
            MultiSelect.Items[Name] = not MultiSelect.Items[Name]
            Button.TextColor3 = MultiSelect.Items[Name] and Menu.Accent or Color3.new(1, 1, 1)
            UpdateValue()
            MultiSelect.Callback(MultiSelect.Items) -- don't send value
        end)
        AddEventListener(Button, function()
            Button.BackgroundColor3 = Menu.ItemColor
            Button.TextColor3 = table.find(GetSelectedItems(), Button.Text) and Menu.Accent or Color3.new(1, 1, 1)
        end)

        if GetDictionaryLength(MultiSelect.Items) >= 6 then
            List.CanvasSize += UDim2.fromOffset(0, 15)
        end
        table.insert(ItemObjects, Button)
    end


    function MultiSelect:Update(Value: any)
        if typeof(Value) == "table" then
            self.Items = Value
            UpdateValue()

            for _, Button in ipairs(ItemObjects) do
                Button:Destroy()
            end
            table.clear(ItemObjects)

            List.CanvasSize = UDim2.new()
            List.Size = UDim2.fromOffset(Button.AbsoluteSize.X, math.clamp(GetDictionaryLength(self.Items) * 15, 15, 90))
            for Name, Checked in pairs(self.Items) do
                AddItem(tostring(Name), Checked)
            end
        else
            local Selected = GetSelectedItems()
            for _, Button in ipairs(ItemObjects) do
                local Checked = table.find(Selected, Button.Text)
                Button.TextColor3 = Checked and Menu.Accent or Color3.new(1, 1, 1)
            end
        end
    end

    function MultiSelect:SetLabel(Name: string)
        Label.Text = tostring(Name)
    end

    function MultiSelect:SetVisible(Visible: boolean)
        if typeof(Visible) ~= "boolean" then return end
        if Label.Visible == Visible then return end
        
        Label.Visible = Visible
        Container:UpdateSize(Visible and 40 or -40, Label)
    end

    function MultiSelect:GetValue(): table
        return self.Items
    end

    function MultiSelect:SetValue(Value: any)
        self:Update(Value)
    end


    Label.MouseEnter:Connect(function()
        if ToolTip then
            Menu:SetToolTip(true, ToolTip, Label)
        end
    end)
    Label.MouseLeave:Connect(function()
        if ToolTip then
            Menu:SetToolTip(false)
        end
    end)

    Button.BackgroundColor3 = Menu.ItemColor
    Button.BorderColor3 = Color3.new()
    Button.Position = UDim2.new(0, 0, 0, 20)
    Button.Size = UDim2.new(1, -40, 0, 15)
    Button.Font = Enum.Font.RobotoMono
    Button.Text = "[...]"
    Button.TextColor3 = Color3.new(1, 1, 1)
    Button.TextSize = 14
    Button.TextTruncate = Enum.TextTruncate.AtEnd
    Button.Parent = Label
    Button.MouseButton1Click:Connect(function()
        UpdateSelected(List, Button, UDim2.fromOffset(0, 15))
        List.Size = UDim2.fromOffset(Button.AbsoluteSize.X, math.clamp(GetDictionaryLength(MultiSelect.Items) * 15, 15, 90))
    end)
    AddEventListener(Button, function()
        Button.BackgroundColor3 = Menu.ItemColor
    end)

    Symbol.Name = "Symbol"
    Symbol.BackgroundTransparency = 1
    Symbol.Position = UDim2.new(1, -10, 0, 0)
    Symbol.Size = UDim2.new(0, 5, 1, 0)
    Symbol.Font = Enum.Font.RobotoMono
    Symbol.Text = "-"
    Symbol.TextColor3 = Color3.new(1, 1, 1)
    Symbol.TextSize = 14
    Symbol.Parent = Button

    List.Visible = false
    List.BackgroundColor3 = Menu.ItemColor
    List.BorderColor3 = Menu.BorderColor
    List.BorderMode = Enum.BorderMode.Inset
    List.Size = UDim2.fromOffset(Button.AbsoluteSize.X, math.clamp(GetDictionaryLength(MultiSelect.Items) * 15, 15, 90))
    List.Position = UDim2.fromOffset(20, 30)
    List.CanvasSize = UDim2.new()
    List.ScrollBarThickness = 4
    List.ScrollBarImageColor3 = Menu.Accent
    List.Parent = Label
    CreateStroke(List, Color3.new(), 1)
    AddEventListener(List, function()
        List.BackgroundColor3 = Menu.ItemColor
        List.BorderColor3 = Menu.BorderColor
        List.ScrollBarImageColor3 = Menu.Accent
    end)

    ListLayout.Parent = List

    MultiSelect:Update(MultiSelect.Items)
    Container:UpdateSize(40)
    table.insert(Items, MultiSelect)
    return #Items
end


function Menu.ListBox(Tab_Name: string, Container_Name: string, Name: string, Multi: boolean, Value_Items: table, Callback: any, ToolTip: string): ListBox
    local Container = GetContainer(Tab_Name, Container_Name)
    local List = Instance.new("ScrollingFrame")
    local ListLayout = Instance.new("UIListLayout")

    local ListBox = {self = Label}
    ListBox.Name = Name
    ListBox.Class = "ListBox"
    ListBox.Tab = Tab_Name
    ListBox.Container = Container_Name
    ListBox.Index = #Items + 1
    ListBox.Method = Multi and "Multi" or "Default"
    ListBox.Items = typeof(Value_Items) == "table" and Value_Items or {}
    ListBox.Value = {}
    ListBox.Callback = typeof(Callback) == "function" and Callback or function() end

    local ItemObjects = {}

    local function GetSelectedItems(): table
        local Selected = {}
        for k, v in pairs(ListBox.Items) do
            if v == true then table.insert(Selected, k) end
        end
        return Selected
    end

    local function UpdateValue(Value: any)
        if ListBox.Method == "Default" then
            ListBox.Value = tostring(Value)
        else
            ListBox.Value = GetSelectedItems()
        end
    end

    local function AddItem(Name: string, Checked: boolean)
        local Button = Instance.new("TextButton")
        Button.BackgroundColor3 = Menu.ItemColor
        Button.BorderColor3 = Color3.new()
        Button.BorderSizePixel = 0
        Button.Size = UDim2.new(1, 0, 0, 15)
        Button.Font = Enum.Font.RobotoMono
        Button.Text = Name
        Button.TextSize = 14
        Button.TextXAlignment = Enum.TextXAlignment.Left
        Button.TextTruncate = Enum.TextTruncate.AtEnd
        Button.Parent = List
        if ListBox.Method == "Default" then
            Button.TextColor3 = ListBox.Value == Button.Text and Menu.Accent or Color3.new(1, 1, 1)
            Button.MouseButton1Click:Connect(function()
                for _, v in ipairs(List:GetChildren()) do
                    if v:IsA("GuiButton") then
                        if v == Button then continue end
                        v.TextColor3 = Color3.new(1, 1, 1)
                    end
                end
                Button.TextColor3 = Menu.Accent
                UpdateValue(Button.Text)
                UpdateSelected()
                ListBox.Callback(ListBox.Value)
            end)
            AddEventListener(Button, function()
                Button.BackgroundColor3 = Menu.ItemColor
                if ListBox.Value == Button.Text then
                    Button.TextColor3 = Menu.Accent
                else
                    Button.TextColor3 = Color3.new(1, 1, 1)
                end
            end)
            
            if #ListBox.Items >= 6 then
                List.CanvasSize += UDim2.fromOffset(0, 15)
            end
        else
            Button.TextColor3 = Checked and Menu.Accent or Color3.new(1, 1, 1)
            Button.MouseButton1Click:Connect(function()
                ListBox.Items[Name] = not ListBox.Items[Name]
                Button.TextColor3 = ListBox.Items[Name] and Menu.Accent or Color3.new(1, 1, 1)
                UpdateValue()
                UpdateSelected()
                ListBox.Callback(ListBox.Value)
            end)
            AddEventListener(Button, function()
                Button.BackgroundColor3 = Menu.ItemColor
                if table.find(ListBox.Value, Name) then
                    Button.TextColor3 = Menu.Accent
                else
                    Button.TextColor3 = Color3.new(1, 1, 1)
                end
            end)
            
            if GetDictionaryLength(ListBox.Items) >= 10 then
                List.CanvasSize += UDim2.fromOffset(0, 15)
            end
        end
        table.insert(ItemObjects, Button)
    end


    function ListBox:Update(Value: string, Items: any)
        if self.Method == "Default" then
            UpdateValue(Value)
        end
        if typeof(Items) == "table" then
            if self.Method == "Multi" then
                self.Items = Value
                UpdateValue()
            end
            for _, Button in ipairs(ItemObjects) do
                Button:Destroy()
            end
            table.clear(ItemObjects)

            List.CanvasSize = UDim2.new()
            List.Size = UDim2.new(1, -50, 0, 150)
            if self.Method == "Default" then
                for _, Item in ipairs(self.Items) do
                    AddItem(tostring(Item))
                end
            else
                for Name, Checked in pairs(self.Items) do
                    AddItem(tostring(Name), Checked)
                end
            end
        else
            if self.Method == "Default" then
                for _, Button in ipairs(ItemObjects) do
                    Button.TextColor3 = self.Value == Button.Text and Menu.Accent or Color3.new(1, 1, 1)
                end
            else
                local Selected = GetSelectedItems()
                for _, Button in ipairs(ItemObjects) do
                    local Checked = table.find(Selected, Button.Text)
                    Button.TextColor3 = Checked and Menu.Accent or Color3.new(1, 1, 1)
                end
            end
        end
    end

    function ListBox:SetVisible(Visible: boolean)
        if typeof(Visible) ~= "boolean" then return end
        if List.Visible == Visible then return end
        
        List.Visible = Visible
        Container:UpdateSize(Visible and 155 or -155, List)
    end

    function ListBox:SetValue(Value: string, Items: any)
        if self.Method == "Default" then
            if typeof(Items) == "table" then
                self.Items = Items
            end
            self:Update(Value, self.Items)
        else
            self:Update(Value)
        end
    end

    function ListBox:GetValue(): table
        return self.Value
    end


    List.Name = "List"
    List.Active = true
    List.BackgroundColor3 = Menu.ItemColor
    List.BorderColor3 = Color3.new()
    List.Position = UDim2.fromOffset(20, Container:GetHeight())
    List.Size = UDim2.new(1, -50, 0, 150)
    List.CanvasSize = UDim2.new()
    List.ScrollBarThickness = 4
    List.ScrollBarImageColor3 = Menu.Accent
    List.Parent = Container.self
    List.MouseEnter:Connect(function()
        if ToolTip then
            Menu:SetToolTip(true, ToolTip, List)
        end
    end)
    List.MouseLeave:Connect(function()
        if ToolTip then
            Menu:SetToolTip(false)
        end
    end)
    CreateStroke(List, Color3.new(), 1)
    AddEventListener(List, function()
        List.BackgroundColor3 = Menu.ItemColor
        List.ScrollBarImageColor3 = Menu.Accent
    end)

    ListLayout.Parent = List

    if ListBox.Method == "Default" then
        ListBox:Update(ListBox.Value, ListBox.Items)
    else
        ListBox:Update(ListBox.Items)
    end
    Container:UpdateSize(155)
    table.insert(Items, ListBox)
    return #Items
end

function Menu.Notify(Content: string, Delay: number)
    assert(typeof(Content) == "string", "missing argument #1, (string expected got " .. typeof(Content) .. ")")
    local Delay = typeof(Delay) == "number" and Delay or 3

    local Text = Instance.new("TextLabel")
    local Notification = {
        self = Text,
        Class = "Notification"
    }

    Text.Name = "Notification"
    Text.BackgroundTransparency = 1
    Text.Position = UDim2.new(0.5, -100, 1, -150 - (GetDictionaryLength(Notifications) * 15))
    Text.Size = UDim2.new(0, 0, 0, 15)
    Text.Text = Content
    Text.Font = Enum.Font.RobotoMono
    Text.TextSize = 15.7
    Text.TextColor3 = Color3.new(1, 1, 1)
    Text.TextStrokeTransparency = 0.2
    Text.TextTransparency = 1
    Text.RichText = true
    Text.ZIndex = 4
    Text.Parent = Notifications_Frame

    local function CustomTweenOffset(Offset: number)
        spawn(function()
            local Steps = 33
            for i = 1, Steps do
                Text.Position += UDim2.fromOffset(Offset / Steps, 0)
                RunService.RenderStepped:Wait()
            end
        end)
    end

    function Notification:Update()
        
    end

    function Notification:Destroy()
        Notifications[self] = nil
        Text:Destroy()

        local Index = 1
        for _, v in pairs(Notifications) do
            local self = v.self
            self.Position += UDim2.fromOffset(0, 15)
            Index += 1
        end
    end

    Notifications[Notification] = Notification
    
    local TweenIn  = TweenService:Create(Text, TweenInfo.new(0.3, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0), {TextTransparency = 0})
    local TweenOut = TweenService:Create(Text, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0), {TextTransparency = 1})
    
    TweenIn:Play()
    CustomTweenOffset(100)
    
    TweenIn.Completed:Connect(function()
        delay(Delay, function()
            TweenOut:Play()
            CustomTweenOffset(100)

            TweenOut.Completed:Connect(function()
                Notification:Destroy()
            end)
        end)
    end)
end


function Menu.Prompt(Message: string, Callback: any, ...)
    do
        local Prompt = Menu.Screen:FindFirstChild("Prompt")
        if Prompt then Prompt:Destroy() end
    end

    local Prompt = Instance.new("Frame")
    local Title = Instance.new("TextLabel")

    local Height = -20
    local function CreateButton(Text, Callback, ...)
        local Arguments = {...}

        local Callback = typeof(Callback) == "function" and Callback or function() end
        local Button = Instance.new("TextButton")
        Button.Name = "Button"
        Button.BorderSizePixel = 0
        Button.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        Button.Size = UDim2.fromOffset(100, 20)
        Button.Position = UDim2.new(0.5, -50, 0.5, Height)
        Button.Text = Text
        Button.TextStrokeTransparency = 0.8
        Button.TextSize = 14
        Button.Font = Enum.Font.RobotoMono
        Button.TextColor3 = Color3.new(1, 1, 1)
        Button.Parent = Prompt
        Button.MouseButton1Click:Connect(function() Prompt:Destroy() Callback(unpack(Arguments)) end)
        CreateStroke(Button, Color3.new(), 1)
        Height += 25
    end

    CreateButton("OK", Callback, ...)
    CreateButton("Cancel", function() Prompt:Destroy() end)


    Title.Name = "Title"
    Title.BackgroundTransparency = 1
    Title.Size = UDim2.new(1, 0, 0, 15)
    Title.Position = UDim2.new(0, 0, 0.5, -100)
    Title.Text = Message
    Title.TextSize = 14
    Title.Font = Enum.Font.RobotoMono
    Title.TextColor3 = Color3.new(1, 1, 1)
    Title.Parent = Prompt

    Prompt.Name = "Prompt"
    Prompt.BackgroundTransparency = 0.5
    Prompt.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    Prompt.BorderSizePixel = 0
    Prompt.Size = UDim2.new(1, 0, 1, 36)
    Prompt.Position = UDim2.fromOffset(0, -36)
    Prompt.Parent = Menu.Screen
end


function Menu.Spectators(): Spectators
    local Frame = Instance.new("Frame")
    local Title = Instance.new("TextLabel")
    local List = Instance.new("Frame")
    local ListLayout = Instance.new("UIListLayout")
    local Spectators = {self = Frame}
    Spectators.List = {}
    Menu.Spectators = Spectators


    Frame.Name = "Spectators"
    Frame.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    Frame.BorderColor3 = Color3.fromRGB(40, 40, 40)
    Frame.BorderMode = Enum.BorderMode.Inset
    Frame.Size = UDim2.fromOffset(250, 50)
    Frame.Position = UDim2.fromOffset(Menu.ScreenSize.X - Frame.Size.X.Offset, -36)
    Frame.Visible = false
    Frame.Parent = Menu.Screen
    CreateStroke(Frame, Color3.new(), 1)
    CreateLine(Frame, UDim2.new(0, 240, 0, 1), UDim2.new(0, 5, 0, 20))
    SetDraggable(Frame)
    
    Title.Name = "Title"
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 5, 0, 5)
    Title.Size = UDim2.new(0, 240, 0, 15)
    Title.Font = Enum.Font.RobotoMono
    Title.Text = "Spectators"
    Title.TextColor3 = Color3.new(1, 1, 1)
    Title.TextSize = 14
    Title.Parent = Frame

    List.Name = "List"
    List.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    List.BorderColor3 = Color3.fromRGB(40, 40, 40)
    List.BorderMode = Enum.BorderMode.Inset
    List.Position = UDim2.new(0, 4, 0, 30)
    List.Size = UDim2.new(0, 240, 0, 10)
    List.Parent = Frame

    ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ListLayout.Parent = List


    local function UpdateFrameSize()
        local Height = ListLayout.AbsoluteContentSize.Y + 5
        Spectators.self:TweenSize(UDim2.fromOffset(250, math.clamp(Height + 50, 50, 5000)), nil, nil, 0.3, true)
        Spectators.self.List:TweenSize(UDim2.fromOffset(240, math.clamp(Height, 10, 5000)), nil, nil, 0.3, true)
    end


    function Spectators.Add(Name: string, Icon: string)
        Spectators.Remove(Name)
        local Object = Instance.new("Frame")
        local NameLabel = Instance.new("TextLabel")
        local IconImage = Instance.new("ImageLabel")
        local Spectator = {self = Object}

        Object.Name = "Object"
        Object.BackgroundTransparency = 1
        Object.Position = UDim2.new(0, 5, 0, 30)
        Object.Size = UDim2.new(0, 240, 0, 15)
        Object.Parent = List

        NameLabel.Name = "Name"
        NameLabel.BackgroundTransparency = 1
        NameLabel.Position = UDim2.new(0, 20, 0, 0)
        NameLabel.Size = UDim2.new(0, 230, 1, 0)
        NameLabel.Font = Enum.Font.RobotoMono
        NameLabel.Text = tostring(Name)
        NameLabel.TextColor3 = Color3.new(1, 1, 1)
        NameLabel.TextSize = 14
        NameLabel.TextXAlignment = Enum.TextXAlignment.Left
        NameLabel.Parent = Object

        IconImage.Name = "Icon"
        IconImage.BackgroundTransparency = 1
        IconImage.Image = Icon or ""
        IconImage.Size = UDim2.new(0, 15, 0, 15)
        IconImage.Position = UDim2.new(0, 2, 0, 0)
        IconImage.Parent = Object

        Spectators.List[Name] = Spectator
        UpdateFrameSize()
    end


    function Spectators.Remove(Name: string)
        if Spectators.List[Name] then
            Spectators.List[Name].self:Destroy()
            Spectators.List[Name] = nil
        end
        UpdateFrameSize()
    end


    function Spectators:SetVisible(Visible: boolean)
        self.self.Visible = Visible
    end


    return Spectators
end


function Menu.Keybinds(): Keybinds
    local Frame = Instance.new("Frame")
    local Title = Instance.new("TextLabel")
    local List = Instance.new("Frame")
    local ListLayout = Instance.new("UIListLayout")
    local Keybinds = {self = Frame}
    Keybinds.List = {}
    Menu.Keybinds = Keybinds


    Frame.Name = "Keybinds"
    Frame.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    Frame.BorderColor3 = Color3.fromRGB(40, 40, 40)
    Frame.BorderMode = Enum.BorderMode.Inset
    Frame.Size = UDim2.fromOffset(250, 45)
    Frame.Position = UDim2.fromOffset(Menu.ScreenSize.X - Frame.Size.X.Offset, -36)
    Frame.Visible = false
    Frame.Parent = Menu.Screen
    CreateStroke(Frame, Color3.new(), 1)
    CreateLine(Frame, UDim2.new(0, 240, 0, 1), UDim2.new(0, 5, 0, 20))
    SetDraggable(Frame)

    Title.Name = "Title"
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 5, 0, 5)
    Title.Size = UDim2.new(0, 240, 0, 15)
    Title.Font = Enum.Font.RobotoMono
    Title.Text = "Key binds"
    Title.TextColor3 = Color3.new(1, 1, 1)
    Title.TextSize = 14
    Title.Parent = Frame

    List.Name = "List"
    List.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    List.BorderColor3 = Color3.fromRGB(40, 40, 40)
    List.BorderMode = Enum.BorderMode.Inset
    List.Position = UDim2.new(0, 4, 0, 30)
    List.Size = UDim2.new(0, 240, 0, 10)
    List.Parent = Frame

    ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ListLayout.Padding = UDim.new(0, 3)
    ListLayout.Parent = List

    local function UpdateFrameSize()
        local Height = ListLayout.AbsoluteContentSize.Y + 5
        Keybinds.self:TweenSize(UDim2.fromOffset(250, math.clamp(Height + 45, 45, 5000)), nil, nil, 0.3, true)
        Keybinds.self.List:TweenSize(UDim2.fromOffset(240, math.clamp(Height, 10, 5000)), nil, nil, 0.3, true)
    end

    function Keybinds.Add(Name: string, State: string): Keybind
        Keybinds.Remove(Name)
        local Object = Instance.new("Frame")
        local NameLabel = Instance.new("TextLabel")
        local StateLabel = Instance.new("TextLabel")
        local Keybind = {self = Object}

        Object.Name = "Object"
        Object.BackgroundTransparency = 1
        Object.Position = UDim2.new(0, 5, 0, 30)
        Object.Size = UDim2.new(0, 230, 0, 15)
        Object.Parent = List

        NameLabel.Name = "Indicator"
        NameLabel.BackgroundTransparency = 1
        NameLabel.Position = UDim2.new(0, 5, 0, 0)
        NameLabel.Size = UDim2.new(0, 180, 1, 0)
        NameLabel.Font = Enum.Font.RobotoMono
        NameLabel.Text = Name
        NameLabel.TextColor3 = Color3.new(1, 1, 1)
        NameLabel.TextSize = 14
        NameLabel.TextXAlignment = Enum.TextXAlignment.Left
        NameLabel.Parent = Object

        StateLabel.Name = "State"
        StateLabel.BackgroundTransparency = 1
        StateLabel.Position = UDim2.new(0, 190, 0, 0)
        StateLabel.Size = UDim2.new(0, 40, 1, 0)
        StateLabel.Font = Enum.Font.RobotoMono
        StateLabel.Text = "[" .. tostring(State) .. "]"
        StateLabel.TextColor3 = Color3.new(1, 1, 1)
        StateLabel.TextSize = 14
        StateLabel.TextXAlignment = Enum.TextXAlignment.Right
        StateLabel.Parent = Object

        
        function Keybind:Update(State: string)
            StateLabel.Text = "[" .. tostring(State) .. "]"
        end

        function Keybind:SetVisible(Visible: boolean)
            if typeof(Visible) ~= "boolean" then return end
            if Object.Visible == Visible then return end
        
            Object.Visible = Visible
            UpdateFrameSize()
        end

        
        Keybinds.List[Name] = Keybind
        UpdateFrameSize()

        return Keybind
    end

    function Keybinds.Remove(Name: string)
        if Keybinds.List[Name] then
            Keybinds.List[Name].self:Destroy()
            Keybinds.List[Name] = nil
        end
        UpdateFrameSize()
    end

    function Keybinds:SetVisible(Visible: boolean)
        self.self.Visible = Visible
    end

    function Keybinds:SetPosition(Position: UDim2)
        self.self.Position = Position
    end

    return Keybinds
end


function Menu.Indicators(): Indicators
    local Frame = Instance.new("Frame")
    local Title = Instance.new("TextLabel")
    local List = Instance.new("Frame")
    local ListLayout = Instance.new("UIListLayout")

    local Indicators = {self = Frame}
    Indicators.List = {}
    Menu.Indicators = Indicators

    Frame.Name = "Indicators"
    Frame.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    Frame.BorderColor3 = Color3.fromRGB(40, 40, 40)
    Frame.BorderMode = Enum.BorderMode.Inset
    Frame.Size = UDim2.fromOffset(250, 45)
    Frame.Position = UDim2.fromOffset(Menu.ScreenSize.X - Frame.Size.X.Offset, -36)
    Frame.Visible = false
    Frame.Parent = Menu.Screen
    CreateStroke(Frame, Color3.new(), 1)
    CreateLine(Frame, UDim2.new(0, 240, 0, 1), UDim2.new(0, 5, 0, 20))
    SetDraggable(Frame)

    Title.Name = "Title"
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 5, 0, 5)
    Title.Size = UDim2.new(0, 240, 0, 15)
    Title.Font = Enum.Font.RobotoMono
    Title.Text = "Indicators"
    Title.TextColor3 = Color3.new(1, 1, 1)
    Title.TextSize = 14
    Title.Parent = Frame
    
    List.Name = "List"
    List.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    List.BorderColor3 = Color3.fromRGB(40, 40, 40)
    List.BorderMode = Enum.BorderMode.Inset
    List.Position = UDim2.new(0, 4, 0, 30)
    List.Size = UDim2.new(0, 240, 0, 10)
    List.Parent = Frame

    ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ListLayout.Padding = UDim.new(0, 3)
    ListLayout.Parent = List

    local function UpdateFrameSize()
        local Height = ListLayout.AbsoluteContentSize.Y + 12
        Indicators.self:TweenSize(UDim2.fromOffset(250, math.clamp(Height + 45, 45, 5000)), nil, nil, 0.3, true)
        Indicators.self.List:TweenSize(UDim2.fromOffset(240, math.clamp(Height, 10, 5000)), nil, nil, 0.3, true)
    end

    function Indicators.Add(Name: string, Type: string, Value: string, ...): Indicator
        Indicators.Remove(Name)
        local Object = Instance.new("Frame")
        local NameLabel = Instance.new("TextLabel")
        local StateLabel = Instance.new("TextLabel")

        local Indicator = {self = Object}
        Indicator.Type = Type
        Indicator.Value = Value

        Object.Name = "Object"
        Object.BackgroundTransparency = 1
        Object.Size = UDim2.new(0, 230, 0, 30)
        Object.Parent = Indicators.self.List
        
        NameLabel.Name = "Indicator"
        NameLabel.BackgroundTransparency = 1
        NameLabel.Position = UDim2.new(0, 5, 0, 0)
        NameLabel.Size = UDim2.new(0, 130, 0, 15)
        NameLabel.Font = Enum.Font.RobotoMono
        NameLabel.Text = Name
        NameLabel.TextColor3 = Color3.new(1, 1, 1)
        NameLabel.TextSize = 14
        NameLabel.TextXAlignment = Enum.TextXAlignment.Left
        NameLabel.Parent = Indicator.self
    
        StateLabel.Name = "State"
        StateLabel.BackgroundTransparency = 1
        StateLabel.Position = UDim2.new(0, 180, 0, 0)
        StateLabel.Size = UDim2.new(0, 40, 0, 15)
        StateLabel.Font = Enum.Font.RobotoMono
        StateLabel.Text = "[" .. tostring(Value) .. "]"
        StateLabel.TextColor3 = Color3.new(1, 1, 1)
        StateLabel.TextSize = 14
        StateLabel.TextXAlignment = Enum.TextXAlignment.Right
        StateLabel.Parent = Indicator.self


        if Type == "Bar" then
            local ObjectBase = Instance.new("Frame")
            local ValueLabel = Instance.new("TextLabel")

            ObjectBase.Name = "Bar"
            ObjectBase.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
            ObjectBase.BorderColor3 = Color3.new()
            ObjectBase.Position = UDim2.new(0, 0, 0, 20)
            ObjectBase.Size = UDim2.new(0, 220, 0, 5)
            ObjectBase.Parent = Indicator.self
    
            ValueLabel.Name = "Value"
            ValueLabel.BorderSizePixel = 0
            ValueLabel.BackgroundColor3 = Menu.Accent
            ValueLabel.Text = ""
            ValueLabel.Parent = ObjectBase
            AddEventListener(ValueLabel, function()
                ValueLabel.BackgroundColor3 = Menu.Accent
            end)
        else
            Object.Size = UDim2.new(0, 230, 0, 15)
        end


        function Indicator:Update(Value: string, ...)
            if Indicators.List[Name] then
                if Type == "Text" then
                    self.Value = Value
                    Object.State.Text = Value
                elseif Type == "Bar" then
                    local Min, Max = select(1, ...)
                    self.Min = typeof(Min) == "number" and Min or self.Min
                    self.Max = typeof(Max) == "number" and Max or self.Max

                    local Scale = (self.Value - self.Min) / (self.Max - self.Min)
                    Object.State.Text = "[" .. tostring(self.Value) .. "]"
                    Object.Bar.Value.Size = UDim2.new(math.clamp(Scale, 0, 1), 0, 0, 5)
                end
                self.Value = Value
            end
        end


        function Indicator:SetVisible(Visible: boolean)
            if typeof(Visible) ~= "boolean" then return end
            if Object.Visible == Visible then return end
            
            Object.Visible = Visible
            UpdateFrameSize()
        end

        
        Indicator:Update(Indicator.Value, ...)
        Indicators.List[Name] = Indicator
        UpdateFrameSize()
        return Indicator
    end


    function Indicators.Remove(Name: string)
        if Indicators.List[Name] then
            Indicators.List[Name].self:Destroy()
            Indicators.List[Name] = nil
        end
        UpdateFrameSize()
    end


    function Indicators:SetVisible(Visible: boolean)
        self.self.Visible = Visible
    end

    function Indicators:SetPosition(Position: UDim2)
        self.self.Position = Position
    end


    return Indicators
end


function Menu.Watermark(): Watermark
    local Watermark = {}
    Watermark.Frame = Instance.new("Frame")
    Watermark.Title = Instance.new("TextLabel")
    Menu.Watermark = Watermark

    Watermark.Frame.Name = "Watermark"
    Watermark.Frame.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    Watermark.Frame.BorderColor3 = Color3.fromRGB(40, 40, 40)
    Watermark.Frame.BorderMode = Enum.BorderMode.Inset
    Watermark.Frame.Size = UDim2.fromOffset(250, 20)
    Watermark.Frame.Position = UDim2.fromOffset((Menu.ScreenSize.X - Watermark.Frame.Size.X.Offset) - 50, -25)
    Watermark.Frame.Visible = false
    Watermark.Frame.Parent = Menu.Screen
    CreateStroke(Watermark.Frame, Color3.new(), 1)
    CreateLine(Watermark.Frame, UDim2.new(0, 245, 0, 1), UDim2.new(0, 2, 0, 15))
    SetDraggable(Watermark.Frame)

    Watermark.Title.Name = "Title"
    Watermark.Title.BackgroundTransparency = 1
    Watermark.Title.Position = UDim2.new(0, 5, 0, -1)
    Watermark.Title.Size = UDim2.new(0, 240, 0, 15)
    Watermark.Title.Font = Enum.Font.RobotoMono
    Watermark.Title.Text = ""
    Watermark.Title.TextColor3 = Color3.new(1, 1, 1)
    Watermark.Title.TextSize = 14
    Watermark.Title.RichText = true
    Watermark.Title.Parent = Watermark.Frame

    function Watermark:Update(Text: string)
        self.Title.Text = tostring(Text)
    end

    function Watermark:SetVisible(Visible: boolean)
        self.Frame.Visible = Visible
    end

    return Watermark
end


function Menu:Init()
    UserInput.InputBegan:Connect(function(Input: InputObject, Process: boolean) end)
    UserInput.InputEnded:Connect(function(Input: InputObject)
        if (Input.UserInputType == Enum.UserInputType.MouseButton1) then
            Dragging = {Gui = nil, True = false}
        end
    end)
    RunService.RenderStepped:Connect(function(Step: number)
        local Menu_Frame = Menu.Screen.Menu
        Menu_Frame.Position = UDim2.fromOffset(
            math.clamp(Menu_Frame.AbsolutePosition.X,   0, math.clamp(Menu.ScreenSize.X - Menu_Frame.AbsoluteSize.X, 0, Menu.ScreenSize.X    )),
            math.clamp(Menu_Frame.AbsolutePosition.Y, -36, math.clamp(Menu.ScreenSize.Y - Menu_Frame.AbsoluteSize.Y, 0, Menu.ScreenSize.Y - 36))
        )
        local Selected_Frame = Selected.Frame
        local Selected_Item = Selected.Item
        if (Selected_Frame and Selected_Item) then
            local Offset = Selected.Offset or UDim2.fromOffset()
            local Position = UDim2.fromOffset(Selected_Item.AbsolutePosition.X, Selected_Item.AbsolutePosition.Y)
            Selected_Frame.Position = Position + Offset
        end
    
        if Scaling.True then
            MenuScaler_Button.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
            local Origin = Scaling.Origin
            local Size = Scaling.Size
    
            if Origin and Size then
                local Location = UserInput:GetMouseLocation()
                local NewSize = Location + (Size - Origin)
    
                Menu:SetSize(Vector2.new(
                    math.clamp(NewSize.X, Menu.MinSize.X, Menu.MaxSize.X),
                    math.clamp(NewSize.Y, Menu.MinSize.Y, Menu.MaxSize.Y)
                ))
            end
        else
            MenuScaler_Button.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
        end
    
        Menu.Hue += math.clamp(Step / 100, 0, 1)
        if Menu.Hue >= 1 then Menu.Hue = 0 end
    
        if ToolTip.Enabled == true then
            ToolTip_Label.Text = ToolTip.Content
            ToolTip_Label.Position = UDim2.fromOffset(ToolTip.Item.AbsolutePosition.X, ToolTip.Item.AbsolutePosition.Y + 25)
        end
    end)
    Menu.Screen:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
        Menu.ScreenSize = Menu.Screen.AbsoluteSize
    end)
end

local settings = {
    Bind = Enum.KeyCode.Insert,
    color = Color3.fromRGB(244, 244, 244),
}

game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.KeyCode == settings.Bind then
        if Menu.IsVisible then
            Menu:SetVisible(false)
        else
            Menu:SetVisible(true)
        end
    end
end)

local Watermark = Menu.Watermark()
Watermark:SetVisible(false)

local FrameTimer = tick()
local FrameCounter = 0;
local FPS = 60;

local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
    FrameCounter += 1;

    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter;
        FrameTimer = tick();
        FrameCounter = 0;
    end;

    Watermark:Update(('<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\"> |</font> %s FPS | %s ms'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    ));
end);

-- tabs
local ragetab = Menu.Tab("Rage")
local legittab = Menu.Tab("Legit")
local visualstab = Menu.Tab("Visuals")
local misctab = Menu.Tab("Misc")
local settingstab = Menu.Tab("Settings")

-- rage section
local cont = Menu.Container("Rage", "Target Aim", "Left")
local cont = Menu.Container("Rage", "Resolver", "Left")
local cont = Menu.Container("Rage", "Target Strafe", "Left")
local cont = Menu.Container("Rage", "Visuals", "Right")
-- legit section
local cont = Menu.Container("Legit", "Aim Assist", "Left")
local cont_part = Menu.Container("Legit", "Hit Part", "Left")
local cont_prediction = Menu.Container("Legit", "Prediction", "Left")
local cont_smoothing = Menu.Container("Legit", "Smoothing", "Left")
local cont_checks = Menu.Container("Legit", "Checks", "Left")
local aimbot_visualizer = Menu.Container("Legit", "Visuals ", "Left")
local silent_cont = Menu.Container("Legit", "Silent Aim", "Right")
local silent_part = Menu.Container("Legit", "Hit Part ", "Right")
local silent_prediction = Menu.Container("Legit", "Prediction ", "Right")
local silent_check = Menu.Container("Legit", "Checks ", "Right")
local silent_anticurve = Menu.Container("Legit", "Anti-Curve", "Right")
local silent_visualize = Menu.Container("Legit", "Visuals  ", "Right")
-- visuals section
local cont = Menu.Container("Visuals", "Esp", "Left")
local cont = Menu.Container("Visuals", "Local Player", "Right")
local cont = Menu.Container("Visuals", "Atmosphere", "Right")
local cont = Menu.Container("Visuals", "Crosshair", "Left")
-- misc section
local cont = Menu.Container("Misc", "Anti Aim", "Left")
local cont = Menu.Container("Misc", "Movement", "Left")
local cont = Menu.Container("Misc", "Player", "Right")
-- settings section
local cont = Menu.Container("Settings", "Menu", "Left")
--

-- target aim section (rage)
Menu.CheckBox("Rage", "Target Aim", "Enable", getgenv().Faith.Main.Enabled, function(v) getgenv().Faith.Main.Enabled = v end, "Tooltip")
Menu.Hotkey("Rage", "Target Aim", "Keybind", getgenv().Faith.Main.Keybind, function(v) getgenv().Faith.Main.Keybind = v end, "Tooltip")
Menu.CheckBox("Rage", "Target Aim", "Auto Prediction", getgenv().Faith.Main.AutoPrediction, function(v) getgenv().Faith.Main.AutoPrediction = v end, "Tooltip")
Menu.CheckBox("Rage", "Target Aim", "Look At", getgenv().Faith.Extras.LookAt, function(v) getgenv().Faith.Extras.LookAt = v end, "Tooltip")
Menu.CheckBox("Rage", "Target Aim", "View At", getgenv().Faith.Extras.ViewAt, function(v) getgenv().Faith.Extras.ViewAt = v end, "Tooltip")
Menu.CheckBox("Rage", "Target Aim", "Notifications", getgenv().Faith.Notifications.Enable, function(v) getgenv().Faith.Notifications.Enable = v end, "Tooltip")
Menu.ComboBox("Rage", "Target Aim", "Notification Type", getgenv().Faith.Notifications.Type, {"Library", "xz", "xaxa", "vKhonshu", "STX", "Akali", "Roblox"}, function(v) getgenv().Faith.Notifications.Type = v end, "Tooltip")
Menu.Slider("Rage", "Target Aim", "Notification Delay", 1, 5, getgenv().Faith.Notifications.Delay, "", 1, function(v) getgenv().Faith.Notifications.Delay = v end, "Tooltip")
Menu.ComboBox("Rage", "Target Aim", "Hit Part", getgenv().Faith.Main.Part, {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso"}, function(v) getgenv().Faith.Main.Part = v end, "Tooltip")
Menu.TextBox("Rage", "Target Aim", "Prediction", getgenv().Faith.Main.Prediction, function(v) getgenv().Faith.Main.Prediction = v end, "Tooltip")
Menu.ComboBox("Rage", "Target Aim", "Namecall", getgenv().Faith.Main.MousePosMethods, {"UpdateMousePosI", "UpdateMousePos", "MousePosUpdate"}, function(v) getgenv().Faith.Main.MousePosMethods = v end, "Tooltip")

-- resolver section (rage)
Menu.CheckBox("Rage", "Resolver", "Enable", getgenv().Faith.Resolver.Enable, function(v) getgenv().Faith.Resolver.Enable = v end, "Tooltip")
Menu.ComboBox("Rage", "Resolver", "Type", getgenv().Faith.Resolver.Type, {"Velocity Recalculation", "Move Direction"}, function(v) getgenv().Faith.Resolver.Type = v end, "Tooltip")
Menu.Slider("Rage", "Resolver", "Velocity Recal Delay", 0.00035, 0.035, interval, "", 5, function(v) interval = v end, "Tooltip")

-- target strafe section (rage)
Menu.CheckBox("Rage", "Target Strafe", "Enable", getgenv().Faith.TargetStrafe.Enabled, function(v) getgenv().Faith.TargetStrafe.Enabled = v end, "Tooltip")
Menu.ComboBox("Rage", "Target Strafe", "Type", getgenv().Faith.TargetStrafe.Type, {"Normal", "Random"}, function(v) getgenv().Faith.TargetStrafe.Type = v end, "Tooltip")
Menu.Slider("Rage", "Target Strafe", "Distance", 0, 20, getgenv().Faith.TargetStrafe.Distance, "", 1, function(v) getgenv().Faith.TargetStrafe.Distance = v end, "Tooltip")
Menu.Slider("Rage", "Target Strafe", "Height", 0, 20, getgenv().Faith.TargetStrafe.Height, "", 1, function(v) getgenv().Faith.TargetStrafe.Height = v end, "Tooltip")
Menu.Slider("Rage", "Target Strafe", "Speed", 1, 10, getgenv().Faith.TargetStrafe.Speed, "", 1, function(v) getgenv().Faith.TargetStrafe.Speed = v end, "Tooltip")

-- target aim visuals (rage)
Menu.CheckBox("Rage", "Visuals", "Fov", getgenv().Faith.FovCircle.Visible, function(v) getgenv().Faith.FovCircle.Visible = v end, "Tooltip")
Menu.ColorPicker("Rage", "Visuals", "Color", getgenv().Faith.FovCircle.Color, 1, function(v) getgenv().Faith.FovCircle.Color = v end, "Tooltip")
Menu.CheckBox("Rage", "Visuals", "Attach To Target", getgenv().Faith.FovCircle.AttachToTarget, function(v) getgenv().Faith.FovCircle.AttachToTarget = v end, "Tooltip")
Menu.CheckBox("Rage", "Visuals", "Filled", getgenv().Faith.FovCircle.Filled, function(v) getgenv().Faith.FovCircle.Filled = v end, "Tooltip")
Menu.Slider("Rage", "Visuals", "Size", 1, 100, getgenv().Faith.FovCircle.Radius, "", 0, function(v) getgenv().Faith.FovCircle.Radius = v end, "Tooltip")
Menu.Slider("Rage", "Visuals", "Transparency", 0, 1, getgenv().Faith.FovCircle.Transparency, "", 2, function(v) getgenv().Faith.FovCircle.Transparency = v end, "Tooltip")
Menu.ComboBox("Rage", "Visuals", "Prediction Type", getgenv().Faith.FovCircle.PredictionType, {"Prediction", "No Prediction"}, function(v) getgenv().Faith.FovCircle.PredictionType = v end, "Tooltip")

Menu.Label("Rage", "Visuals", "--------------------------------")

Menu.CheckBox("Rage", "Visuals", "Tracer", getgenv().Faith.Visuals.Tracer, function(v) getgenv().Faith.Visuals.Tracer = v end, "Tooltip")
Menu.ColorPicker("Rage", "Visuals", "Color", getgenv().Faith.Visuals.TracerColor, 1, function(v) getgenv().Faith.Visuals.TracerColor = v end, "Tooltip")
Menu.ComboBox("Rage", "Visuals", "From", getgenv().Faith.Visuals.TracerFrom, {"Head", "HumanoidRootPart", "LowerTorso", "Gun", "Mouse"}, function(v) getgenv().Faith.Visuals.TracerFrom = v end, "Tooltip")
Menu.ComboBox("Rage", "Visuals", "Prediction Type", getgenv().Faith.Visuals.TracerPredictionType, {"Prediction", "No Prediction"}, function(v) getgenv().Faith.Visuals.TracerPredictionType = v end, "Tooltip")

Menu.Label("Rage", "Visuals", "--------------------------------")

Menu.CheckBox("Rage", "Visuals", "Dot", getgenv().Faith.Visuals.Dot, function(v) getgenv().Faith.Visuals.Dot = v end, "Tooltip")
Menu.ColorPicker("Rage", "Visuals", "Color", getgenv().Faith.Visuals.DotColor, 1, function(v) getgenv().Faith.Visuals.DotColor = v end, "Tooltip")
Menu.CheckBox("Rage", "Visuals", "Fill", getgenv().Faith.Visuals.DotFilled, function(v) getgenv().Faith.Visuals.DotFilled = v end, "Tooltip")

Menu.Label("Rage", "Visuals", "--------------------------------")

Menu.CheckBox("Rage", "Visuals", "Highlight", getgenv().Faith.Visuals.HighLight, function(v) getgenv().Faith.Visuals.HighLight = v end, "Tooltip")
Menu.ColorPicker("Rage", "Visuals", "Filled Color", getgenv().Faith.Visuals.HightLightFillColor, 1, function(v) getgenv().Faith.Visuals.HightLightFillColor = v end, "Tooltip")
Menu.ColorPicker("Rage", "Visuals", "Outline Color", getgenv().Faith.Visuals.HighlightOutlineColor, 1, function(v) getgenv().Faith.Visuals.HighlightOutlineColor = v end, "Tooltip")
Menu.Slider("Rage", "Visuals", "Filled Transparency", 0, 1, getgenv().Faith.Visuals.HighlightFillTransparency, "", 2, function(v) getgenv().Faith.Visuals.HighlightFillTransparency = v end, "Tooltip")
Menu.Slider("Rage", "Visuals", "Outline Transparency", 0, 1, getgenv().Faith.Visuals.HighlightOutlineTransparency, "", 2, function(v) getgenv().Faith.Visuals.HighlightOutlineTransparency = v end, "Tooltip")

Menu.Label("Rage", "Visuals", "--------------------------------")

Menu.CheckBox("Rage", "Visuals", "Scan", getgenv().Faith.Visuals.Scan, function(v) getgenv().Faith.Visuals.Scan = v end, "Tooltip")
Menu.ColorPicker("Rage", "Visuals", "Filled Color", getgenv().Faith.Visuals.ScanColor, 1, function(v) getgenv().Faith.Visuals.ScanColor = v end, "Tooltip")
Menu.ColorPicker("Rage", "Visuals", "Outline Color", getgenv().Faith.Visuals.ScanOutlineColor, 1, function(v) getgenv().Faith.Visuals.ScanOutlineColor = v end, "Tooltip")
Menu.Slider("Rage", "Visuals", "Filled Transparency", 0, 1, getgenv().Faith.Visuals.ScanTransparency, "", 2, function(v) getgenv().Faith.Visuals.ScanTransparency = v end, "Tooltip")
Menu.Slider("Rage", "Visuals", "Outline Transparency", 0, 1, getgenv().Faith.Visuals.ScanOutlineTransparency, "", 2, function(v) getgenv().Faith.Visuals.ScanOutlineTransparency = v end, "Tooltip")

Menu.Label("Rage", "Visuals", "--------------------------------")

Menu.CheckBox("Rage", "Visuals", "Fake Hitbox", getgenv().Faith.Visuals.FakeHitbox, function(v) getgenv().Faith.Visuals.FakeHitbox = v end, "Tooltip")
Menu.ColorPicker("Rage", "Visuals", "Color", getgenv().Faith.Visuals.FakeHitboxColor, 1, function(v) getgenv().Faith.Visuals.FakeHitboxColor = v end, "Tooltip")
Menu.Slider("Rage", "Visuals", "Size", 0, 25, getgenv().Faith.Visuals.FakeHitboxSize, "", 0, function(v) getgenv().Faith.Visuals.FakeHitboxSize = v end, "Tooltip")
Menu.Slider("Rage", "Visuals", "Transparency", 0, 1, getgenv().Faith.Visuals.FakeHitboxTransparency, "", 2, function(v) getgenv().Faith.Visuals.FakeHitboxTransparency = v end, "Tooltip")
Menu.ComboBox("Rage", "Visuals", "Material", getgenv().Faith.Visuals.FakeHitboxMaterial, {"ForceField", "Plastic", "Neon"}, function(v) getgenv().Faith.Visuals.FakeHitboxMaterial = v end, "Tooltip")

Menu.Label("Rage", "Visuals", "--------------------------------")

Menu.CheckBox("Rage", "Visuals", "Target Stats", getgenv().Faith.Visuals.TargetStats, function(v) getgenv().Faith.Visuals.TargetStats = v end, "Tooltip")

Menu.Label("Rage", "Visuals", "--------------------------------")

Menu.CheckBox("Rage", "Visuals", "Hit Logs", getgenv().Faith.HitDetects.HitLogs, function(v) getgenv().Faith.HitDetects.HitLogs = v end, "Tooltip")

Menu.Label("Rage", "Visuals", "--------------------------------")

Menu.CheckBox("Rage", "Visuals", "Hit Effect", getgenv().Faith.HitDetects.HitEffect, function(v) getgenv().Faith.HitDetects.HitEffect = v end, "Tooltip")
Menu.ColorPicker("Rage", "Visuals", "Color", getgenv().Faith.HitDetects.HitEffectColor, 1, function(v) getgenv().Faith.HitDetects.HitEffectColor = v end, "Tooltip")

Menu.Label("Rage", "Visuals", "--------------------------------")

Menu.CheckBox("Rage", "Visuals", "Hit Chams", getgenv().Faith.HitDetects.HitChams, function(v) getgenv().Faith.HitDetects.HitChams = v end, "Tooltip")
Menu.ColorPicker("Rage", "Visuals", "Color", getgenv().Faith.HitDetects.HitChamsColor, 1, function(v) getgenv().Faith.HitDetects.HitChamsColor = v end, "Tooltip")
Menu.Slider("Rage", "Visuals", "Delay", 0, 5, getgenv().Faith.HitDetects.HitChamsDelay, "", 2, function(v) getgenv().Faith.HitDetects.HitChamsDelay = v end, "Tooltip")
Menu.ComboBox("Rage", "Visuals", "Material", getgenv().Faith.HitDetects.HitChamsMaterial, {"ForceField", "SmoothPlastic", "Plastic", "Neon"}, function(v) getgenv().Faith.HitDetects.HitChamsMaterial = v end, "Tooltip")

Menu.Label("Rage", "Visuals", "--------------------------------")

Menu.CheckBox("Rage", "Visuals", "Hit Sound", getgenv().Faith.HitDetects.HitSound, function(v) getgenv().Faith.HitDetects.HitSound = v end, "Tooltip")
Menu.Slider("Rage", "Visuals", "Volume", 0, 5, getgenv().Faith.HitDetects.HitSoundVolume, "", 2, function(v) getgenv().Faith.HitDetects.HitSoundVolume = v end, "Tooltip")
Menu.ComboBox("Rage", "Visuals", "Type", getgenv().Faith.HitDetects.HitSoundType, {"hitsounds/skeet.wav", "hitsounds/neverlose.wav", "hitsounds/69.wav", "hitsounds/bell.wav", "hitsounds/bepis.wav", "hitsounds/bubble.wav", "hitsounds/cock.wav", "hitsounds/cod.wav", "hitsounds/fatality.wav", "hitsounds/phonk.wav", "hitsounds/sparkle.wav", "hitsounds/windows.wav", "hitsounds/minecraftbow.wav", "hitsounds/stapler.wav", "hitsounds/primordial.wav", "hitsounds/rust.wav", "hitsounds/burp.wav", "hitsounds/coinmaster.wav", "hitsounds/klatsch.wav", "hitsounds/fire.wav", "hitsounds/roblox.wav"}, function(v) getgenv().Faith.HitDetects.HitSoundType = v end, "Tooltip")


-- aim assist
Menu.CheckBox("Legit", "Aim Assist", "Enable", Shiroku_Rewrite['Aim Assist'].Enabled, function(v) Shiroku_Rewrite['Aim Assist'].Enabled = v end)
Menu.Hotkey("Legit", "Aim Assist", "Keybind",  Shiroku_Rewrite['Aim Assist'].Keybind, function(v)  Shiroku_Rewrite['Aim Assist'].Keybind = v end)
Menu.CheckBox("Legit", "Aim Assist", "Resolver", Shiroku_Rewrite['Aim Assist'].Resolver.Enabled, function(v) Shiroku_Rewrite['Aim Assist'].Resolver.Enabled = v end)
-- aim assist parts
Menu.ComboBox("Legit", "Hit Part", "Part-Type", Shiroku_Rewrite['Aim Assist'].HitPart_Mode, {"Custom", "Nearest Part", "Nearest Point"}, function(v) Shiroku_Rewrite['Aim Assist'].HitPart_Mode = v end)
Menu.ComboBox("Legit", "Hit Part", "Part", Shiroku_Rewrite['Aim Assist'].HitPart, bones, function(v) Shiroku_Rewrite['Aim Assist'].HitPart = v end)
Menu.ComboBox("Legit", "Hit Part", "Air-Part", Shiroku_Rewrite['Aim Assist'].AirPart, bones, function(v) Shiroku_Rewrite['Aim Assist'].AirPart = v end)
Menu.Slider("Legit", "Hit Part", "Jump-Offset", -5, 5, Shiroku_Rewrite['Aim Assist'].Jump_Offset, "°", 4, function(v) Shiroku_Rewrite['Aim Assist'].Jump_Offset = v end)
-- aim assist prediction
Menu.CheckBox("Legit", "Prediction", "Use Prediction", Shiroku_Rewrite['Aim Assist'].Prediction.UsePrediction, function(v) Shiroku_Rewrite['Aim Assist'].Prediction.UsePrediction = v end)
Menu.ComboBox("Legit", "Prediction", "Velocity Type", Shiroku_Rewrite['Aim Assist'].Vel_Type, {"Velocity", "AssemblyLinearVelocity"}, function(v) Shiroku_Rewrite['Aim Assist'].Vel_Type = v end)
Menu.TextBox("Legit", "Prediction", "Horizontal Prediction", Shiroku_Rewrite['Aim Assist'].Prediction.Prediction_X, function(v) Shiroku_Rewrite['Aim Assist'].Prediction.Prediction_X = v end, "Tooltip")
Menu.TextBox("Legit", "Prediction", "Vertical Prediction", Shiroku_Rewrite['Aim Assist'].Prediction.Prediction_Y, function(v) Shiroku_Rewrite['Aim Assist'].Prediction.Prediction_Y = v end, "Tooltip")
-- aim assist smoothing
Menu.TextBox("Legit", "Smoothing", "Horizontal Smoothing", Shiroku_Rewrite['Aim Assist'].Smoothing.Smoothing_X, function(v) Shiroku_Rewrite['Aim Assist'].Smoothing.Smoothing_X = v end)
Menu.TextBox("Legit", "Smoothing", "Vertical Smoothing", Shiroku_Rewrite['Aim Assist'].Smoothing.Smoothing_Y, function(v) Shiroku_Rewrite['Aim Assist'].Smoothing.Smoothing_Y = v end)
Menu.Slider("Legit", "Smoothing", "Sensitivity", 0, 2, Shiroku_Rewrite['Aim Assist'].Smoothing.Sensitivity, "°", 4, function(v) Shiroku_Rewrite['Aim Assist'].Smoothing.Sensitivity = v end)
Menu.ComboBox("Legit", "Smoothing", "Easing Style", Shiroku_Rewrite['Aim Assist'].Smoothing.EasingStyle, {"Linear", "Sine", "Back", "Quad", "Quart", "Quint", "Bounce", "Elastic", "Exponential", "Circular", "Cubic"}, function(v) Shiroku_Rewrite['Aim Assist'].Smoothing.EasingStyle = v end)
Menu.ComboBox("Legit", "Smoothing", "Easing Direction", Shiroku_Rewrite['Aim Assist'].Smoothing.EasingDirection, {"In", "Out", "InOut"}, function(v) Shiroku_Rewrite['Aim Assist'].Smoothing.EasingDirection = v end)
-- aim assist checks
Menu.CheckBox("Legit", "Checks", "Knocked Check", Shiroku_Rewrite['Aim Assist'].Checks.KnockedCheck, function(v) Shiroku_Rewrite['Aim Assist'].Checks.KnockedCheck = v end)
Menu.CheckBox("Legit", "Checks", "Grabbed Check", Shiroku_Rewrite['Aim Assist'].Checks.GrabbedCheck, function(v) Shiroku_Rewrite['Aim Assist'].Checks.GrabbedCheck = v end)
Menu.CheckBox("Legit", "Checks", "Vehicle Check", Shiroku_Rewrite['Aim Assist'].Checks.VehicleCheck, function(v) Shiroku_Rewrite['Aim Assist'].Checks.VehicleCheck = v end)
Menu.CheckBox("Legit", "Checks", "Crew Check", Shiroku_Rewrite['Aim Assist'].Checks.CrewCheck, function(v) Shiroku_Rewrite['Aim Assist'].Checks.CrewCheck = v end)
Menu.CheckBox("Legit", "Checks", "Holding Tool Check", Shiroku_Rewrite['Aim Assist'].Checks.HeldToolCheck, function(v) Shiroku_Rewrite['Aim Assist'].Checks.HeldToolCheck = v end)

-- aim assist visuals
Menu.CheckBox("Legit", "Visuals ", "Fov", Shiroku_Rewrite.Fov.AimAssist.Visible, function(v) Shiroku_Rewrite.Fov.AimAssist.Visible = v end)
Menu.ColorPicker("Legit", "Visuals ", "Fov Color", Shiroku_Rewrite.Fov.AimAssist.Color, Shiroku_Rewrite.Fov.AimAssist.Transparency, function(v) Shiroku_Rewrite.Fov.AimAssist.Color = v end)
Menu.CheckBox("Legit", "Visuals ", "Filled", Shiroku_Rewrite.Fov.AimAssist.Filled, function(v) Shiroku_Rewrite.Fov.AimAssist.Filled = v end)
Menu.Slider("Legit", "Visuals ", "Radius", 0, 500, Shiroku_Rewrite.Fov.AimAssist.Radius, "%", 1, function(v) Shiroku_Rewrite.Fov.AimAssist.Radius = v end)
Menu.Slider("Legit", "Visuals ", "Thickness", 0, 50, Shiroku_Rewrite.Fov.AimAssist.Thickness, "%", 2, function(v) Shiroku_Rewrite.Fov.AimAssist.Thickness = v end)
Menu.Slider("Legit", "Visuals ", "Transparency", 0, 1, Shiroku_Rewrite.Fov.AimAssist.Transparency, "%", 2, function(v) Shiroku_Rewrite.Fov.AimAssist.Transparency = v end)

Menu.Label("Legit", "Visuals ", "--------------------------------")

Menu.CheckBox("Legit", "Visuals ", "Tracer", Shiroku_Rewrite.Visualize.AimAssist.Tracer.Enabled, function(v) Shiroku_Rewrite.Visualize.AimAssist.Tracer.Enabled = v end)
Menu.ColorPicker("Legit", "Visuals ", "Tracer Color", Shiroku_Rewrite.Visualize.AimAssist.Tracer.Color, 1, function(v) Shiroku_Rewrite.Visualize.AimAssist.Tracer.Color = v end)

Menu.Label("Legit", "Visuals ", "--------------------------------")

Menu.CheckBox("Legit", "Visuals ", "Highlight", Shiroku_Rewrite.Visualize.AimAssist.Highlight.Enabled, function(v) Shiroku_Rewrite.Visualize.AimAssist.Highlight.Enabled = v end)
Menu.ColorPicker("Legit", "Visuals ", "Filled Color", Shiroku_Rewrite.Visualize.AimAssist.Highlight.FillColor, 1, function(v) Shiroku_Rewrite.Visualize.AimAssist.Highlight.FillColor = v end, "Tooltip")
Menu.ColorPicker("Legit", "Visuals ", "Outline Color", Shiroku_Rewrite.Visualize.AimAssist.Highlight.OutlineColor, 1, function(v) Shiroku_Rewrite.Visualize.AimAssist.Highlight.OutlineColor = v end, "Tooltip")
Menu.Slider("Legit", "Visuals ", "Filled Transparency", 0, 1, Shiroku_Rewrite.Visualize.AimAssist.Highlight.FillTransparency, "", 2, function(v) Shiroku_Rewrite.Visualize.AimAssist.Highlight.FillTransparency = v end, "Tooltip")
Menu.Slider("Legit", "Visuals ", "Outline Transparency", 0, 1, Shiroku_Rewrite.Visualize.AimAssist.Highlight.OutlineTransparency, "", 2, function(v) Shiroku_Rewrite.Visualize.AimAssist.Highlight.OutlineTransparency = v end, "Tooltip")

--silent aim
Menu.CheckBox("Legit", "Silent Aim", "Enable", Shiroku_Rewrite['Silent'].Enabled, function(v) Shiroku_Rewrite['Silent'].Enabled = v end)
Menu.CheckBox("Legit", "Silent Aim", "Spam-Guns [Da Hood Only]", Shiroku_Rewrite['Silent'].SpamGuns, function(v) Shiroku_Rewrite['Silent'].SpamGuns = v end)
Menu.CheckBox("Legit", "Silent Aim", "Resolver", Shiroku_Rewrite['Silent'].Resolver.Enabled, function(v) Shiroku_Rewrite['Silent'].Resolver.Enabled = v end)
Menu.Slider("Legit", "Silent Aim", "Hit-Chance", 0, 100, Shiroku_Rewrite['Silent'].HitChance, "%", 0, function(v) Shiroku_Rewrite['Silent'].HitChance = v end)
-- silent aim parts
Menu.ComboBox("Legit", "Hit Part ", "Part-Type", Shiroku_Rewrite['Silent'].HitPart_Mode, {"Custom", "Nearest Part", "Nearest Point"}, function(v) Shiroku_Rewrite['Silent'].HitPart_Mode = v end)
Menu.ComboBox("Legit", "Hit Part ", "Part", Shiroku_Rewrite['Silent'].HitPart, bones, function(v) Shiroku_Rewrite['Silent'].HitPart = v end)
-- silent aim prediction
Menu.CheckBox("Legit", "Prediction ", "Auto Prediction", Shiroku_Rewrite['Silent'].Prediction.AutoPrediction, function(v) Shiroku_Rewrite['Silent'].Prediction.AutoPrediction = v end)
Menu.ComboBox("Legit", "Prediction ", "Velocity Type", Shiroku_Rewrite['Silent'].Vel_Type, {"Velocity", "AssemblyLinearVelocity"}, function(v) Shiroku_Rewrite['Silent'].Vel_Type = v end)
Menu.TextBox("Legit", "Prediction ", "Horizontal Prediction", Shiroku_Rewrite['Silent'].Prediction.Prediction_X, function(v) Shiroku_Rewrite['Silent'].Prediction.Prediction_X = v end, "Tooltip")
Menu.TextBox("Legit", "Prediction ", "Vertical Prediction", Shiroku_Rewrite['Silent'].Prediction.Prediction_Y, function(v) Shiroku_Rewrite['Silent'].Prediction.Prediction_Y = v end, "Tooltip")
-- silent aim checks
Menu.CheckBox("Legit", "Checks ", "No Ground Shots", Shiroku_Rewrite['Silent'].Checks.NoGroundShots, function(v) Shiroku_Rewrite['Silent'].Checks.NoGroundShots = v end)
Menu.CheckBox("Legit", "Checks ", "Knocked Check", Shiroku_Rewrite['Silent'].Checks.KnockedCheck, function(v) Shiroku_Rewrite['Silent'].Checks.KnockedCheck = v end)
Menu.CheckBox("Legit", "Checks ", "Grabbed Check", Shiroku_Rewrite['Silent'].Checks.GrabbedCheck, function(v) Shiroku_Rewrite['Silent'].Checks.GrabbedCheck = v end)
Menu.CheckBox("Legit", "Checks ", "Vehicle Check", Shiroku_Rewrite['Silent'].Checks.VehicleCheck, function(v) Shiroku_Rewrite['Silent'].Checks.VehicleCheck = v end)
Menu.CheckBox("Legit", "Checks ", "Crew Check", Shiroku_Rewrite['Silent'].Checks.CrewCheck, function(v) Shiroku_Rewrite['Silent'].Checks.CrewCheck = v end)
Menu.CheckBox("Legit", "Checks ", "Holding Tool Check", Shiroku_Rewrite['Silent'].Checks.HeldToolCheck, function(v) Shiroku_Rewrite['Silent'].Checks.HeldToolCheck = v end)
-- silent aim anti curve
Menu.CheckBox("Legit", "Anti-Curve", "Enabled", Shiroku_Rewrite.Silent.Anti_Curve.Enabled, function(v) Shiroku_Rewrite.Silent.Anti_Curve.Enabled = v end)
Menu.CheckBox("Legit", "Anti-Curve", "Look At", Shiroku_Rewrite.Silent.Anti_Curve.LookAt, function(v) Shiroku_Rewrite.Silent.Anti_Curve.LookAt = v end)
Menu.CheckBox("Legit", "Anti-Curve", "Check if Standing", Shiroku_Rewrite.Silent.Anti_Curve.CheckIfStanding, function(v) Shiroku_Rewrite.Silent.Anti_Curve.CheckIfStanding = v end)

-- silent aim visuals
Menu.CheckBox("Legit", "Visuals  ", "Fov", Shiroku_Rewrite.Fov.Silent.Visible, function(v) Shiroku_Rewrite.Fov.Silent.Visible = v end)
Menu.ColorPicker("Legit", "Visuals  ", "Fov Color", Shiroku_Rewrite.Fov.Silent.Color, Shiroku_Rewrite.Fov.Silent.Transparency, function(v) Shiroku_Rewrite.Fov.Silent.Color = v end)
Menu.CheckBox("Legit", "Visuals  ", "Filled", Shiroku_Rewrite.Fov.Silent.Filled, function(v) Shiroku_Rewrite.Fov.Silent.Filled = v end)
Menu.Slider("Legit", "Visuals  ", "Radius", 0, 500, Shiroku_Rewrite.Fov.Silent.Radius, "%", 1, function(v) Shiroku_Rewrite.Fov.Silent.Radius = v end)
Menu.Slider("Legit", "Visuals  ", "Thickness", 0, 50, Shiroku_Rewrite.Fov.Silent.Thickness, "%", 2, function(v) Shiroku_Rewrite.Fov.Silent.Thickness = v end)
Menu.Slider("Legit", "Visuals  ", "Transparency", 0, 1, Shiroku_Rewrite.Fov.Silent.Transparency, "%", 2, function(v) Shiroku_Rewrite.Fov.Silent.Transparency = v end)

Menu.Label("Legit", "Visuals  ", "--------------------------------")

Menu.CheckBox("Legit", "Visuals  ", "Tracer", Shiroku_Rewrite.Visualize.Silent.Tracer.Enabled, function(v) Shiroku_Rewrite.Visualize.Silent.Tracer.Enabled = v end)
Menu.ColorPicker("Legit", "Visuals  ", "Tracer Color", Shiroku_Rewrite.Visualize.Silent.Tracer.Color, 1, function(v) Shiroku_Rewrite.Visualize.Silent.Tracer.Color = v end)

Menu.Label("Legit", "Visuals  ", "--------------------------------")

Menu.CheckBox("Legit", "Visuals  ", "Highlight", Shiroku_Rewrite.Visualize.Silent.Highlight.Enabled, function(v) Shiroku_Rewrite.Visualize.Silent.Highlight.Enabled = v end)
Menu.ColorPicker("Legit", "Visuals  ", "Filled Color", Shiroku_Rewrite.Visualize.Silent.Highlight.FillColor, 1, function(v) Shiroku_Rewrite.Visualize.Silent.Highlight.FillColor = v end, "Tooltip")
Menu.ColorPicker("Legit", "Visuals  ", "Outline Color", Shiroku_Rewrite.Visualize.Silent.Highlight.OutlineColor, 1, function(v) Shiroku_Rewrite.Visualize.Silent.Highlight.OutlineColor = v end, "Tooltip")
Menu.Slider("Legit", "Visuals  ", "Filled Transparency", 0, 1, Shiroku_Rewrite.Visualize.Silent.Highlight.FillTransparency, "", 2, function(v) Shiroku_Rewrite.Visualize.Silent.Highlight.FillTransparency = v end, "Tooltip")
Menu.Slider("Legit", "Visuals  ", "Outline Transparency", 0, 1, Shiroku_Rewrite.Visualize.Silent.Highlight.OutlineTransparency, "", 2, function(v) Shiroku_Rewrite.Visualize.Silent.Highlight.OutlineTransparency = v end, "Tooltip")

Menu.Label("Legit", "Visuals  ", "--------------------------------")

Menu.CheckBox("Legit", "Visuals  ", "Panel", Shiroku_Rewrite.Panel.Enabled, function(v) Shiroku_Rewrite.Panel.Enabled = v end)

-- ESP (visuals)
Menu.CheckBox("Visuals", "Esp", "Enable", config.enabled, function(v) config.enabled = v end, "Tooltip")

Menu.Label("Visuals", "Esp", "--------------------------------")

Menu.CheckBox("Visuals", "Esp", "Name", config.Name.enabled, function(v) config.Name.enabled = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Esp", "Name Color", config.Name.color, 1, function(v) config.Name.color = v end, "Tooltip")

Menu.Label("Visuals", "Esp", "--------------------------------")

Menu.CheckBox("Visuals", "Esp", "Box", config.Box.enabled, function(v) config.Box.enabled = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Esp", "Box Color", config.Box.color, 1, function(v) config.Box.color = v end, "Tooltip")

Menu.Label("Visuals", "Esp", "--------------------------------")

Menu.CheckBox("Visuals", "Esp", "Health Bar", config.HealthBar.enabled, function(v) config.HealthBar.enabled = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Esp", "Max Health Color", config.HealthBar.maxhealth, 1, function(v) config.HealthBar.maxhealth = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Esp", "Low Health Color", config.HealthBar.lowhealth, 1, function(v) config.HealthBar.lowhealth = v end, "Tooltip")

Menu.Label("Visuals", "Esp", "--------------------------------")

Menu.CheckBox("Visuals", "Esp", "Chams", config.Chams.enabled, function(v) config.Chams.enabled = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Esp", "Fill Color", config.Chams.fillcolor, 1, function(v) config.Chams.fillcolor = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Esp", "Outline Color", config.Chams.outlinecolor, 1, function(v) config.Chams.outlinecolor = v end, "Tooltip")

Menu.Label("Visuals", "Esp", "--------------------------------")

Menu.CheckBox("Visuals", "Esp", "Tracer", config.Tracer.enabled, function(v) config.Tracer.enabled = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Esp", "Tracer Color", config.Tracer.color, 1, function(v) config.Tracer.color = v end, "Tooltip")

Menu.Label("Visuals", "Esp", "--------------------------------")

Menu.CheckBox("Visuals", "Esp", "Team Check", config.Misc.Teamcheck.enable, function(v) config.Misc.Teamcheck.enable = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Esp", "Enemy Color", config.Misc.Teamcheck.enemy, 1, function(v) config.Misc.Teamcheck.enemy = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Esp", "Friendly Color", config.Misc.Teamcheck.friendly, 1, function(v) config.Misc.Teamcheck.friendly = v end, "Tooltip")

-- local player (visuals)
Menu.CheckBox("Visuals", "Local Player", "Highlight", getgenv().LocalHighlight.Enabled, function(v) getgenv().LocalHighlight.Enabled = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Local Player", "Fill Color", getgenv().LocalHighlight.FillColor, 1, function(v) getgenv().LocalHighlight.FillColor = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Local Player", "Outline Color", getgenv().LocalHighlight.OutlineColor, 1, function(v) getgenv().LocalHighlight.OutlineColor = v end, "Tooltip")
Menu.Slider("Visuals", "Local Player", "Fill Transparency", 0, 1, getgenv().LocalHighlight.FillTransparency, "", 2, function(v) getgenv().LocalHighlight.FillTransparency = v end, "Tooltip")
Menu.Slider("Visuals", "Local Player", "Outline Transparency", 0, 1, getgenv().LocalHighlight.OutlineTransparency, "", 2, function(v) getgenv().LocalHighlight.OutlineTransparency = v end, "Tooltip")

Menu.Label("Visuals", "Local Player", "--------------------------------")

Menu.CheckBox("Visuals", "Local Player", "Clone Chams", getgenv().CloneChams.Enabled, function(v) getgenv().CloneChams.Enabled = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Local Player", "Color", getgenv().CloneChams.Color, 1, function(v) getgenv().CloneChams.Color = v end, "Tooltip")
Menu.Slider("Visuals", "Local Player", "Duration", 0, 20, getgenv().CloneChams.Duration, "", 2, function(v) getgenv().CloneChams.Duration = v end, "Tooltip")
Menu.ComboBox("Visuals", "Local Player", "Material", getgenv().CloneChams.Material, {"ForceField", "SmoothPlastic", "Plastic", "Neon"}, function(v) getgenv().CloneChams.Material = v end, "Tooltip")

Menu.Label("Visuals", "Local Player", "--------------------------------")

Menu.CheckBox("Visuals", "Local Player", "Gun Chams", getgenv().GunChams.Enabled, function(v) getgenv().GunChams.Enabled = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Local Player", "Color", getgenv().GunChams.Color, 1, function(v) getgenv().GunChams.Color = v end, "Tooltip")

Menu.Label("Visuals", "Local Player", "--------------------------------")

Menu.CheckBox("Visuals", "Local Player", "Bullet Tracers", BulletTracers, function(v) BulletTracers = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Local Player", "Start Color", bullet_tracer_startcolor, 1, function(v) bullet_tracer_startcolor = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Local Player", "End Color", bullet_tracer_endcolor, 1, function(v) bullet_tracer_endcolor = v end, "Tooltip")

-- atmosphere (visuals)
Menu.CheckBox("Visuals", "Atmosphere", "Enable", ColorCorrectionEffect.Enabled, function(v) ColorCorrectionEffect.Enabled = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Atmosphere", "Ambient Color", ColorCorrectionEffect.TintColor, 1, function(v) ColorCorrectionEffect.TintColor = v end, "Tooltip")
Menu.Slider("Visuals", "Atmosphere", "Brightness", 0, 1, ColorCorrectionEffect.Brightness, "", 2, function(v) ColorCorrectionEffect.Brightness = v end, "Tooltip")
Menu.Slider("Visuals", "Atmosphere", "Saturation", 0, 1, ColorCorrectionEffect.Saturation, "", 2, function(v) ColorCorrectionEffect.Saturation = v end, "Tooltip")
Menu.Slider("Visuals", "Atmosphere", "Contrast", 0, 1, ColorCorrectionEffect.Contrast, "", 2, function(v) ColorCorrectionEffect.Contrast = v end, "Tooltip")
Menu.Slider("Visuals", "Atmosphere", "Clock Time", 0, 24, game:GetService("Lighting").ClockTime, "", 0, function(v) game:GetService("Lighting").ClockTime = v end, "Tooltip")

-- crosshair (visuals) 
Menu.CheckBox("Visuals", "Crosshair", "Enable", getgenv().crosshair.enabled, function(v) getgenv().crosshair.enabled = v end, "Tooltip")
Menu.ColorPicker("Visuals", "Crosshair", "Color", getgenv().crosshair.color, 1, function(v) getgenv().crosshair.color = v end, "Tooltip")
Menu.CheckBox("Visuals", "Crosshair", "Dont Show In-Game Crosshair", getgenv().crosshair.ingamecrosshair, function(v) getgenv().crosshair.ingamecrosshair = v end, "Tooltip")
Menu.CheckBox("Visuals", "Crosshair", "Spin", getgenv().crosshair.spin, function(v) getgenv().crosshair.spin = v end, "Tooltip")
Menu.CheckBox("Visuals", "Crosshair", "Animate", getgenv().crosshair.resize, function(v) getgenv().crosshair.resize = v end, "Tooltip")
Menu.Slider("Visuals", "Crosshair", "Width", 0, 10, getgenv().crosshair.width, "", 1, function(v) getgenv().crosshair.width = v end, "Tooltip")
Menu.Slider("Visuals", "Crosshair", "Length", 0, 50, getgenv().crosshair.length, "", 0, function(v) getgenv().crosshair.length = v end, "Tooltip")
Menu.Slider("Visuals", "Crosshair", "Gap", 0, 50, getgenv().crosshair.radius, "", 0, function(v) getgenv().crosshair.radius = v end, "Tooltip")
Menu.Slider("Visuals", "Crosshair", "Spin Speed", 0, 350, getgenv().crosshair.spin_speed, "", 0, function(v) getgenv().crosshair.spin_speed = v end, "Tooltip")
Menu.Slider("Visuals", "Crosshair", "Animate Speed", 0, 350, getgenv().crosshair.resize_speed, "", 0, function(v) getgenv().crosshair.resize_speed = v end, "Tooltip")

-- anti aim (misc)
Menu.CheckBox("Misc", "Anti Aim", "Enable", getgenv().Sonic_Anti.Enabled, function(v) getgenv().Sonic_Anti.Enabled = v end, "Tooltip")
Menu.Hotkey("Misc", "Anti Aim", "Keybind", getgenv().Sonic_Anti.Bind, function(v) getgenv().Sonic_Anti.Bind = v end, "Tooltip")
Menu.ComboBox("Misc", "Anti Aim", "Type", getgenv().Sonic_Anti.Type, {"Custom", "Random"}, function(v) getgenv().Sonic_Anti.Type = v end, "Tooltip")

Menu.Label("Misc", "Anti Aim", "-------------Custom--------------")
Menu.Slider("Misc", "Anti Aim", "X", 0, 7500, getgenv().Sonic_Anti.Custom.X, "", 0, function(v) getgenv().Sonic_Anti.Custom.X = v end, "Tooltip")
Menu.Slider("Misc", "Anti Aim", "Y", 0, 7500, getgenv().Sonic_Anti.Custom.Y, "", 0, function(v) getgenv().Sonic_Anti.Custom.Y = v end, "Tooltip")
Menu.Slider("Misc", "Anti Aim", "Z", 0, 7500, getgenv().Sonic_Anti.Custom.Z, "", 0, function(v) getgenv().Sonic_Anti.Custom.Z = v end, "Tooltip")

Menu.Label("Misc", "Anti Aim", "-------------Random--------------")
Menu.Slider("Misc", "Anti Aim", "Minimum", 0, 2000, getgenv().Sonic_Anti.Random_Tp.Min, "", 0, function(v) getgenv().Sonic_Anti.Random_Tp.Min = v end, "Tooltip")
Menu.Slider("Misc", "Anti Aim", "Maximum", 0, 2000, getgenv().Sonic_Anti.Random_Tp.Maximum, "", 0, function(v) getgenv().Sonic_Anti.Random_Tp.Maximum = v end, "Tooltip")

-- movement (misc)
Menu.CheckBox("Misc", "Movement", "CFrame", getgenv().Faith_CFrame.Enabled, function(v) getgenv().Faith_CFrame.Enabled = v end, "Tooltip")
Menu.Hotkey("Misc", "Movement", "Keybind", getgenv().Faith_CFrame.Keybind, function(v) getgenv().Faith_CFrame.Keybind = v end, "Tooltip")
Menu.Slider("Misc", "Movement", "Speed", 0, 10, getgenv().Faith_CFrame.Speed, "", 1, function(v) getgenv().Faith_CFrame.Speed = v end, "Tooltip")

Menu.Label("Misc", "Movement", "--------------------------------")

Menu.CheckBox("Misc", "Movement", "Fly", Movement.FlightEnabled, function(v) Movement.FlightEnabled = v end, "Tooltip")
Menu.Slider("Misc", "Movement", "Speed", 0, 500, Movement.FlightAmount, "", 1, function(v) Movement.FlightAmount = v end, "Tooltip")

Menu.Label("Misc", "Movement", "--------------------------------")

Menu.CheckBox("Misc", "Movement", "Bunny Hop", Movement.BunnyHop, function(v) Movement.BunnyHop = v end, "Tooltip")
Menu.CheckBox("Misc", "Movement", "Auto Jump", Movement.AutoJump, function(v) Movement.AutoJump = v end, "Tooltip")
Menu.Slider("Misc", "Movement", "Speed", 0, 5, Movement.HopAmount, "", 1, function(v) Movement.HopAmount = v end, "Tooltip")

-- player (misc)
Menu.CheckBox("Misc", "Player", "No Jump Cooldown", Utilities.NoJumpCooldown, function(v) Utilities.NoJumpCooldown = v end, "Tooltip")
Menu.CheckBox("Misc", "Player", "No Slowdown", Utilities.NoSlowdown, function(v) Utilities.NoSlowdown = v end, "Tooltip")
Menu.CheckBox("Misc", "Player", "Auto Reload", Utilities.AutoReload, function(v) Utilities.AutoReload = v end, "Tooltip")
Menu.CheckBox("Misc", "Player", "Auto Stomp", Utilities.AutoStomp, function(v) Utilities.AutoStomp = v end, "Tooltip")
Menu.CheckBox("Misc", "Player", "Anti Stomp", getgenv().AntiStomp.Enabled, function(v) getgenv().AntiStomp.Enabled = v end, "Tooltip")
Menu.CheckBox("Misc", "Player", "Anti Bag", getgenv().AntiBag.Enabled, function(v) getgenv().AntiBag.Enabled = v end, "Tooltip")

Menu.Label("Misc", "Player", "--------------------------------")

Menu.CheckBox("Misc", "Player", "Auto Peek", getgenv().autopeek, function(v) getgenv().autopeek = v end, "Tooltip")
Menu.Hotkey("Misc", "Player", "Keybind", getgenv().autopeekkeybind, function(v) getgenv().autopeekkeybind = v end, "Tooltip")
Menu.ColorPicker("Misc", "Player", "Color", getgenv().autopeekcolor, 1, function(v) getgenv().autopeekcolor = v end, "Tooltip")
Menu.Slider("Misc", "Player", "Transparency", 0, 1, getgenv().autopeektransparency, "", 2, function(v) getgenv().autopeektransparency = v end, "Tooltip")
Menu.ComboBox("Misc", "Player", "Material", getgenv().autopeekmaterial, {"ForceField", "SmoothPlastic", "Plastic", "Neon"}, function(v) getgenv().autopeekmaterial = v end, "Tooltip")

-- settings section (settings)
Menu.Hotkey("Settings", "Menu", "Close/Open", settings.Bind, function(v) settings.Bind = v end, "Tooltip")
Menu.ColorPicker("Settings", "Menu", "Accent", Menu.Accent, 1, function(v) Menu.Accent = v end, "Tooltip")
Menu.CheckBox("Settings", "Menu", "Watermark", Watermark:SetVisible(), function(v) Watermark:SetVisible(v) end, "Tooltip")

--
Menu:SetVisible(true)
Menu:Init()



-- menu title animation
local xdt = {
    "",
    "",
    "",
    "|",
    "H|",
    "Hi",
    "H|",
    "|",
    "",
    "|",
    "<font color=\"rgb(189, 172, 255)\">R</font><font color=\"rgb(255, 255, 255)\">|</font>",
    "<font color=\"rgb(189, 172, 255)\">Re</font><font color=\"rgb(255, 255, 255)\">|</font>",
    "<font color=\"rgb(189, 172, 255)\">Rev</font><font color=\"rgb(255, 255, 255)\">|</font>",
    "<font color=\"rgb(189, 172, 255)\">Revi</font><font color=\"rgb(255, 255, 255)\">|</font>",
    "<font color=\"rgb(189, 172, 255)\">Revis</font><font color=\"rgb(255, 255, 255)\">|</font>",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">|</font>",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.</font>",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.l</font>",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lo</font>",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font>",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">!!</font>",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">|</font>",
    "<font color=\"rgb(189, 172, 255)\">Revis</font><font color=\"rgb(255, 255, 255)\">|</font>",
    "<font color=\"rgb(189, 172, 255)\">Revi</font><font color=\"rgb(255, 255, 255)\">|</font>",
    "<font color=\"rgb(189, 172, 255)\">Rev</font><font color=\"rgb(255, 255, 255)\">|</font>",
    "<font color=\"rgb(189, 172, 255)\">Re</font><font color=\"rgb(255, 255, 255)\">|</font>",
    "<font color=\"rgb(189, 172, 255)\">R</font><font color=\"rgb(255, 255, 255)\">|</font>",
    "|",
    "",
    "",
    "",
    "",
    "                                <font color=\"rgb(189, 172, 255)\">R</font>",
    "                               <font color=\"rgb(189, 172, 255)\">Re</font>",
    "                              <font color=\"rgb(189, 172, 255)\">Rev</font>",
    "                             <font color=\"rgb(189, 172, 255)\">Revi</font>",
    "                            <font color=\"rgb(189, 172, 255)\">Revis</font>",
    "                           <font color=\"rgb(189, 172, 255)\">Revise</font>",
    "                          <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.</font>",
    "                         <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.l</font>",
    "                        <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lo</font>",
    "                       <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> ",
    "                      <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> -",
    "                     <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - B",
    "                    <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Be",
    "                   <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Bea",
    "                  <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beat",
    "                 <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beati",
    "                <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beatin",
    "               <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating",
    "              <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating ",
    "             <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating k",
    "            <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating ki",
    "           <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kid ",
    "          <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids",
    "         <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids i",
    "        <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids is",
    "       <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids is l ",
    "      <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids is le",
    "     <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids is leg ",
    "    <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids is lega",
    "   <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids is legal!!",
    "  <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids is legal",
    " <font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids is legal!!",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids is legal",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids is legal|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids is lega|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids is leg|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids is le|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids is l|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids is|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids i|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kids|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating kid|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating ki",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating k|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beating|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beatin|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beati|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Beat|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Bea|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - Be|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font> - B|",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font>!!",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font>",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font>!!",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font>",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font>!!",
    "<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">.lol</font>",
}

spawn(function()
    local counter = 1
    local total_len = #xdt
    local dir = false
    while true do
        Menu:SetTitle(xdt[counter])
        
        if counter >= total_len then
            dir = true
        elseif counter <= 1 then
            dir = false
        end

        if dir == true then
            counter -= 1
            
        else
            counter += 1
        end

        wait(0.2)
    end 

end)

-- crosshair source
local old; old = hookfunction(Drawing.new, function(class, properties)
    local drawing = old(class)
    for i,v in next, properties or {} do
        drawing[i] = v
    end
    return drawing
 end)

 
 local runservice = game:GetService('RunService')
 local inputservice = game:GetService('UserInputService')
 local tweenservice = game:GetService('TweenService')
 local camera = workspace.CurrentCamera

 local last_render = 0
 
 local drawings = {
    crosshair = {},
 }
 
 for idx = 1, 4 do
    drawings.crosshair[idx] = Drawing.new('Line')
    drawings.crosshair[idx + 4] = Drawing.new('Line')
 end
 
 function solve(angle, radius)
    return Vector2.new(
        math.sin(math.rad(angle)) * radius,
        math.cos(math.rad(angle)) * radius
    )
 end
 
runservice.PostSimulation:Connect(function()
 
    local _tick = tick()
 
    if _tick - last_render > 0 then
        last_render = _tick
 
        if crosshair.enabled then

            for idx = 1, 4 do
                local outline = drawings.crosshair[idx]
                local inline = drawings.crosshair[idx + 4]
    
                local angle = (idx - 1) * 90
                local length = crosshair.length
    
                if crosshair.spin then
                    local spin_angle = -_tick * crosshair.spin_speed % crosshair.spin_max
                    angle = angle + tweenservice:GetValue(spin_angle / 360, crosshair.spin_style, crosshair.spin_direction) * 360
                end
    
                if crosshair.resize then
                    local resize_length = tick() * crosshair.resize_speed % 180
                    length = crosshair.resize_min + math.sin(math.rad(resize_length)) * crosshair.length
                end

                if crosshair.ingamecrosshair and game.Players.LocalPlayer.PlayerGui.MainScreenGui.Aim.Visible == true then 
                    game.Players.LocalPlayer.PlayerGui.MainScreenGui.Aim.Visible = false 
                end

                inline.Visible = true
                inline.From = inputservice:GetMouseLocation() + solve(angle, crosshair.radius)
                inline.To = inputservice:GetMouseLocation() + solve(angle, crosshair.radius + length)
                inline.Color = crosshair.color
                inline.Thickness = crosshair.width
    
                outline.Visible = true
                outline.From = inputservice:GetMouseLocation() + solve(angle, crosshair.radius - 1)
                outline.To = inputservice:GetMouseLocation() + solve(angle, crosshair.radius + length + 1)
                outline.Thickness = crosshair.width + 1.5    
            end
        else
            for idx = 1, 4 do
                drawings.crosshair[idx].Visible = false
                drawings.crosshair[idx + 4].Visible = false
            end
        end
    end
end)

-- anti aim source
getgenv().desyincing = false

local uis = game:GetService("UserInputService")
uis.InputBegan:Connect(
    function(a, t)
        if not t then
            if a.KeyCode == getgenv().Sonic_Anti.Bind and getgenv().desyincing == false and getgenv().Sonic_Anti.Enabled == true then
                getgenv().desyincing = true
                Menu.Notify("[<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">] -> </font> Anti-Aim <font color=\"rgb(189, 172, 255)\">Enabled </font>", getgenv().Faith.Notifications.Delay)
                elseif a.KeyCode == getgenv().Sonic_Anti.Bind and getgenv().desyincing == true and getgenv().Sonic_Anti.Enabled == true then
                getgenv().desyincing = false
                Menu.Notify("[<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">] -> </font> Anti-Aim <font color=\"rgb(189, 172, 255)\">Disabled </font>", getgenv().Faith.Notifications.Delay)
            end
        end
end)

game:GetService("RunService").Heartbeat:Connect(function()
    if getgenv().Sonic_Anti.Type == "Custom" and getgenv().Sonic_Anti.Enabled == true then
        getgenv().Direction = Vector3.new(getgenv().Sonic_Anti.Custom.X, getgenv().Sonic_Anti.Custom.Y, getgenv().Sonic_Anti.Custom.Z)
        elseif getgenv().Sonic_Anti.Type == "Random" and getgenv().Sonic_Anti.Enabled == true then
        getgenv().Direction = Vector3.new(math.random(getgenv().Sonic_Anti.Random_Tp.Min, getgenv().Sonic_Anti.Random_Tp.Maximum), math.random(getgenv().Sonic_Anti.Random_Tp.Min, getgenv().Sonic_Anti.Random_Tp.Maximum), math.random(getgenv().Sonic_Anti.Random_Tp.Min, getgenv().Sonic_Anti.Random_Tp.Maximum))
    end

    if getgenv().desyincing == true then
        local client_vel = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = getgenv().Direction
        game:GetService("RunService").RenderStepped:Wait()
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = client_vel
    end
end)

-- target aim source
local Players = game.Players
local lp = Players.LocalPlayer
local m = lp:GetMouse()
local UserInputService = game:GetService("UserInputService")

local target
local HitscanPart
local pos = nil
local lockedon = false
local VelocityRecalculation

local Drawings = {
   fovcircle = Drawing.new("Circle"),
   dotcircle = Drawing.new("Circle"),
   tracer = Drawing.new("Line"),
   highlight = Instance.new("Highlight"),
   scanpart = Instance.new("Part"),
   scanparthighlight = Instance.new("Highlight"),
   fakehitbox = Instance.new("Part")
}

local function FindNearestTarget()
   local Target, Closest = nil, 1 / 0

   for _, v in pairs(Players:GetPlayers()) do
       if (v.Character and v ~= lp and v.Character:FindFirstChild("HumanoidRootPart")) then
           local Position, OnScreen = game.Workspace.CurrentCamera:WorldToScreenPoint(v.Character.HumanoidRootPart.Position)
           local Distance = (Vector2.new(Position.X, Position.Y) - Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)).Magnitude

           if Distance and Distance < Closest and OnScreen and Position then
               Closest = Distance
               Target = v
           end
       end
   end
   return Target
end

local function IsAlive(plr)
   if plr.Character ~= nil then
       return true
   end
   return false
end

spawn(function()
    game:GetService("RunService").Stepped:Connect(function()
        if getgenv().Faith.Extras.ViewAt and lockedon and getgenv().Faith.Main.Enabled and getgenv().Faith.Main.Keybind and target then
            workspace.CurrentCamera.CameraSubject = target.Character.Humanoid
            spawn(function()
                if getgenv().Faith.Extras.ViewAt == false then
                    workspace.CurrentCamera.CameraSubject = game:GetService("Players").LocalPlayer.Character.Humanoid
                end
            end)
        else
            workspace.CurrentCamera.CameraSubject = game:GetService("Players").LocalPlayer.Character.Humanoid
        end
    end)
end)

function getDistance(targetyes)
    if (targetyes) then
        return tonumber((game.Players.LocalPlayer.Character.HumanoidRootPart.Position - targetyes.Character.HumanoidRootPart.Position).magnitude)
    else
        return 100
    end
end

local ScreenGuiiyaaas = Instance.new("ScreenGui")
local TargetStatsMain = Instance.new("Frame")
local TargetStatsLabel = Instance.new("TextLabel")
local BelowBar = Instance.new("Frame")
local TargetImage = Instance.new("ImageLabel")
local HealthMain = Instance.new("Frame")
local Health = Instance.new("Frame")
local ArmorMain = Instance.new("Frame")
local Armor = Instance.new("Frame")
local DistanceLabel = Instance.new("TextLabel")
local UIGradient = Instance.new("UIGradient")
local UIGradient_2 = Instance.new("UIGradient")
local UIGradient_3 = Instance.new("UIGradient")
local UIGradient_4 = Instance.new("UIGradient")

ScreenGuiiyaaas.Name = "ScreenGuiiyaaas"
ScreenGuiiyaaas.Parent = game.CoreGui
ScreenGuiiyaaas.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

TargetStatsMain.Name = "TargetStatsMain"
TargetStatsMain.Parent = ScreenGuiiyaaas
TargetStatsMain.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
TargetStatsMain.BorderColor3 = Color3.fromRGB(40, 40, 40)
TargetStatsMain.BorderSizePixel = 2
TargetStatsMain.Position = UDim2.new(0.421984373, 0, 0.768370628, 0)
TargetStatsMain.Size = UDim2.new(0, 250, 0, 101)
TargetStatsMain.Visible = false

TargetStatsLabel.Name = "TargetStatsLabel"
TargetStatsLabel.Parent = TargetStatsMain
TargetStatsLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TargetStatsLabel.BackgroundTransparency = 1.000
TargetStatsLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
TargetStatsLabel.BorderSizePixel = 0
TargetStatsLabel.Position = UDim2.new(0.0469999984, 0, 0.0329999998, 0)
TargetStatsLabel.Size = UDim2.new(0, 238, 0, 22)
TargetStatsLabel.Font = Enum.Font.RobotoMono
TargetStatsLabel.Text = ""
TargetStatsLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TargetStatsLabel.TextSize = 14.000

BelowBar.Name = "BelowBar"
BelowBar.Parent = TargetStatsMain
BelowBar.BackgroundColor3 = Menu.Accent
BelowBar.BorderColor3 = Color3.fromRGB(40, 40, 40)
BelowBar.Position = UDim2.new(0.0486108139, 0, 0.280180663, 0)
BelowBar.Size = UDim2.new(0, 230, 0, 1)

game:GetService("RunService").Heartbeat:connect(function()
    BelowBar.BackgroundColor3 = Menu.Accent
end)

TargetImage.Name = "TargetImage"
TargetImage.Parent = TargetStatsMain
TargetImage.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TargetImage.BorderColor3 = Color3.fromRGB(40, 40, 40)
TargetImage.Position = UDim2.new(0.0698640123, 0, 0.346564263, 0)
TargetImage.Size = UDim2.new(0, 60, 0, 56)
TargetImage.Transparency = 1
TargetImage.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"

HealthMain.Name = "HealthMain"
HealthMain.Parent = TargetStatsMain
HealthMain.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
HealthMain.BorderColor3 = Color3.fromRGB(0, 0, 0)
HealthMain.BorderSizePixel = 0
HealthMain.Position = UDim2.new(0.358368039, 0, 0.442425728, 0)
HealthMain.Size = UDim2.new(0.755999982, -40, 0, 11)

Health.Name = "Health"
Health.Parent = HealthMain
Health.BackgroundColor3 = Color3.fromRGB(36, 182, 3)
Health.BorderColor3 = Color3.fromRGB(0, 0, 0)
Health.BorderSizePixel = 0
Health.Position = UDim2.new(-2.09058882e-07, 0, -0.0413651913, 0)
Health.Size = UDim2.new(1.2747885, -40, 0, 11)

UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(41, 180, 2)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(46, 218, 3))}
UIGradient.Rotation = -90
UIGradient.Parent = Health

UIGradient_3.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(145, 145, 145)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(175, 175, 175))}
UIGradient_3.Rotation = 90
UIGradient_3.Parent = HealthMain

ArmorMain.Name = "ArmorMain"
ArmorMain.Parent = TargetStatsMain
ArmorMain.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
ArmorMain.BorderColor3 = Color3.fromRGB(0, 0, 0)
ArmorMain.BorderSizePixel = 0
ArmorMain.Position = UDim2.new(0.358368039, 0, 0.566019475, 0)
ArmorMain.Size = UDim2.new(0.756457031, -40, 0, 11)

Armor.Name = "Armor"
Armor.Parent = ArmorMain
Armor.BackgroundColor3 = Color3.fromRGB(17, 113, 153)
Armor.BorderColor3 = Color3.fromRGB(0, 0, 0)
Armor.BorderSizePixel = 0
Armor.Position = UDim2.new(0.000584287685, 0, 0.0909090936, 0)
Armor.Size = UDim2.new(0, 146, 0, 11)

UIGradient_2.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(21, 145, 194)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(24, 167, 223))}
UIGradient_2.Rotation = -90
UIGradient_2.Parent = Armor

UIGradient_4.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(145, 145, 145)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(175, 175, 175))}
UIGradient_4.Rotation = 90
UIGradient_4.Parent = ArmorMain

DistanceLabel.Parent = TargetStatsMain
DistanceLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
DistanceLabel.BackgroundTransparency = 1.000
DistanceLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
DistanceLabel.BorderSizePixel = 0
DistanceLabel.Position = UDim2.new(0.363999993, 0, 0.721000016, 0)
DistanceLabel.Size = UDim2.new(0, 145, 0, 18)
DistanceLabel.Font = Enum.Font.RobotoMono
DistanceLabel.Text = "Distance: " .. tostring(math.floor(getDistance(target)))
DistanceLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
DistanceLabel.TextSize = 14.000
DistanceLabel.TextXAlignment = Enum.TextXAlignment.Left
DistanceLabel.TextYAlignment = Enum.TextYAlignment.Top

game:GetService("RunService").Heartbeat:connect(function()
    DistanceLabel.Text = "Distance: " .. tostring(math.floor(getDistance(target)))
end)

local x_CmsadKXxczsa = function(GetPlayer)
   return GetPlayer and GetPlayer.Character and GetPlayer.Character:FindFirstChild("HumanoidRootPart") ~= nil and GetPlayer.Character:FindFirstChild("Humanoid") ~= nil and GetPlayer.Character:FindFirstChild("Head") ~= nil and true or false
end
spawn(function()
   while wait() do
       if getgenv().Faith.Visuals.TargetStats and getgenv().Faith.Main.Enabled and getgenv().Faith.Main.Keybind and lockedon then
           if target and x_CmsadKXxczsa(target) then
            TargetStatsMain.Visible = true
            TargetStatsLabel.Text = tostring(target.Character.Humanoid.DisplayName).." ["..tostring(target.Name).."]"
               TargetImage.Image  = "rbxthumb://type=AvatarHeadShot&id=" ..target.UserId.. "&w=420&h=420"
               Health:TweenSize(UDim2.new(target.Character.Humanoid.Health / target.Character.Humanoid.MaxHealth, 0, 1, 0), "In", "Linear", 0.25)
               Armor:TweenSize(UDim2.new(target.Character.BodyEffects.Armor.Value / 100, 0, 1, 0), "In", "Linear", 0.25)
               spawn(function()
                   if getgenv().Faith.Visuals.TargetStats == false then
                    TargetStatsMain.Visible = false
                   end
               end)
           end
       else
        TargetStatsMain.Visible = false
       end
   end
end)

game:GetService("RunService").RenderStepped:Connect(GetHitPosition)

game:GetService("RunService").Heartbeat:Connect(function()
   Drawings.fovcircle.Color = getgenv().Faith.FovCircle.Color
   Drawings.fovcircle.Radius = getgenv().Faith.FovCircle.Radius * 2
   Drawings.fovcircle.NumSides = getgenv().Faith.FovCircle.Sides
   Drawings.fovcircle.Visible = getgenv().Faith.FovCircle.Visible
   Drawings.fovcircle.Filled = getgenv().Faith.FovCircle.Filled
   Drawings.fovcircle.Transparency = getgenv().Faith.FovCircle.Transparency
   Drawings.fovcircle.ZIndex = 500
   Drawings.fovcircle.Position = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)

   if target and lockedon then
       local fovshet = game.Workspace.CurrentCamera:WorldToViewportPoint(target.Character[getgenv().Faith.Main.Part].Position) 
       local targetpos = game.Workspace.CurrentCamera:WorldToViewportPoint(target.Character[getgenv().Faith.Main.Part].Position + target.Character[getgenv().Faith.Main.Part].Velocity*getgenv().Faith.Main.Prediction)

       -- // // --
        if getgenv().Faith.Main.Enabled and getgenv().Faith.Resolver.Enable then
            if getgenv().Faith.Resolver.Type == "Move Direction" then
                targetpos = game.Workspace.CurrentCamera:WorldToViewportPoint(target.Character[getgenv().Faith.Main.Part].Position + (target.Character.Humanoid.MoveDirection * target.Character.Humanoid.WalkSpeed * getgenv().Faith.Main.Prediction))
            elseif getgenv().Faith.Resolver.Type == "Velocity Recalculation" then
                targetpos = game.Workspace.CurrentCamera:WorldToViewportPoint(target.Character[getgenv().Faith.Main.Part].Position + (targetresolverpos * getgenv().Faith.Main.Prediction))
            end
        else
            targetpos = game.Workspace.CurrentCamera:WorldToViewportPoint(target.Character[getgenv().Faith.Main.Part].Position + target.Character[getgenv().Faith.Main.Part].Velocity*getgenv().Faith.Main.Prediction)
        end

       local headt = game.Workspace.CurrentCamera:WorldToViewportPoint(game.Players.LocalPlayer.Character.Head.Position)
       local uppertrsot = game.Workspace.CurrentCamera:WorldToViewportPoint(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
       local uppxxertrsot = game.Workspace.CurrentCamera:WorldToViewportPoint(game.Players.LocalPlayer.Character.LowerTorso.Position)
       local uxxppertrsot = game.Workspace.CurrentCamera:WorldToViewportPoint(game.Players.LocalPlayer.Character.RightHand.Position)

       Drawings.tracer.Visible = getgenv().Faith.Visuals.Tracer
       Drawings.tracer.Color = getgenv().Faith.Visuals.TracerColor
       Drawings.tracer.Thickness = 1.3
       Drawings.tracer.ZIndex = 500
       Drawings.tracer.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)

       Drawings.highlight.Name = "highlight"
       Drawings.highlight.Enabled = getgenv().Faith.Visuals.HighLight
       Drawings.highlight.Parent = target.Character
       Drawings.highlight.FillColor = getgenv().Faith.Visuals.HightLightFillColor
       Drawings.highlight.OutlineColor = getgenv().Faith.Visuals.HighlightOutlineColor
       Drawings.highlight.DepthMode = Enum.HighlightDepthMode.Occluded
       Drawings.highlight.FillTransparency = getgenv().Faith.Visuals.HighlightFillTransparency
       Drawings.highlight.OutlineTransparency = getgenv().Faith.Visuals.HighlightOutlineTransparency

       Drawings.scanpart.Name = "scanpart"	
       Drawings.scanpart.Anchored = true		
       Drawings.scanpart.CanCollide = false
       Drawings.scanpart.Parent = game.Workspace	
       Drawings.scanpart.Shape = Enum.PartType.Cylinder
       Drawings.scanpart.Orientation = Vector3.new(0,0,90)
       Drawings.scanpart.Size = Vector3.new(0.001, 5.899, 4.774)
       
       Drawings.scanparthighlight.Name = "scanparthighlight"
       Drawings.scanparthighlight.Enabled = getgenv().Faith.Visuals.Scan
       Drawings.scanparthighlight.Parent = Drawings.scanpart
       Drawings.scanparthighlight.FillTransparency = getgenv().Faith.Visuals.ScanTransparency
       Drawings.scanparthighlight.FillColor = getgenv().Faith.Visuals.ScanColor
       Drawings.scanparthighlight.OutlineColor = getgenv().Faith.Visuals.ScanOutlineColor
       Drawings.scanparthighlight.OutlineTransparency = getgenv().Faith.Visuals.ScanOutlineTransparency
       Drawings.scanparthighlight.DepthMode = Enum.HighlightDepthMode.Occluded

       Drawings.dotcircle.Color = getgenv().Faith.Visuals.DotColor
       Drawings.fovcircle.NumSides = 100
       Drawings.dotcircle.Radius = 2.74 * 2
       Drawings.dotcircle.Visible = getgenv().Faith.Visuals.Dot
       Drawings.dotcircle.Filled = getgenv().Faith.Visuals.DotFilled
       Drawings.dotcircle.Transparency = 1
       Drawings.dotcircle.ZIndex = 500
       Drawings.dotcircle.Position = Vector2.new(targetpos.X, targetpos.Y)

       spawn(function()
          if getgenv().Faith.Visuals.TracerFrom == "Head" then
            Drawings.tracer.From = Vector2.new(headt.X, headt.Y)
          elseif getgenv().Faith.Visuals.TracerFrom == "HumanoidRootPart" then
            Drawings.tracer.From = Vector2.new(uppertrsot.X, uppertrsot.Y)
          elseif getgenv().Faith.Visuals.TracerFrom == "LowerTorso" then
            Drawings.tracer.From = Vector2.new(uppxxertrsot.X, uppxxertrsot.Y)
          elseif getgenv().Faith.Visuals.TracerFrom == "Gun" then
            Drawings.tracer.From = Vector2.new(uxxppertrsot.X, uxxppertrsot.Y)
          elseif getgenv().Faith.Visuals.TracerFrom == "Mouse" then
            Drawings.tracer.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
          end
       end)

       if getgenv().Faith.FovCircle.Visible and getgenv().Faith.FovCircle.PredictionType == "No Prediction" and target and lockedon and getgenv().Faith.Main.Keybind and getgenv().Faith.Main.Enabled and getgenv().Faith.FovCircle.AttachToTarget then
          Drawings.fovcircle.Position = Vector2.new(fovshet.x, fovshet.y)
       elseif getgenv().Faith.FovCircle.Visible and getgenv().Faith.FovCircle.PredictionType == "Prediction" and target and lockedon and getgenv().Faith.Main.Keybind and getgenv().Faith.Main.Enabled and getgenv().Faith.FovCircle.AttachToTarget then
          Drawings.fovcircle.Position = Vector2.new(targetpos.x, targetpos.y)
       end

       if getgenv().Faith.Visuals.Tracer and getgenv().Faith.Visuals.TracerPredictionType == "No Prediction" and target and lockedon and getgenv().Faith.Main.Keybind and getgenv().Faith.Main.Enabled then
          Drawings.tracer.To = Vector2.new(fovshet.x, fovshet.y)
       elseif getgenv().Faith.Visuals.Tracer and getgenv().Faith.Visuals.TracerPredictionType == "Prediction" and target and lockedon and getgenv().Faith.Main.Keybind and getgenv().Faith.Main.Enabled then
          Drawings.tracer.To = Vector2.new(targetpos.x, targetpos.y)
       end

       if getgenv().Faith.Visuals.Scan then
           Drawings.scanpart.Position = Vector3.new(target.Character.PrimaryPart.Position.X, target.Character.PrimaryPart.Position.Y + math.sin(tick() + 10), target.Character.HumanoidRootPart.Position.Z)
       end

       if getgenv().Faith.Visuals.FakeHitbox then
           Drawings.fakehitbox.Size = Vector3.new(1*getgenv().Faith.Visuals.FakeHitboxSize,1*getgenv().Faith.Visuals.FakeHitboxSize,1*getgenv().Faith.Visuals.FakeHitboxSize)
           Drawings.fakehitbox.Color = getgenv().Faith.Visuals.FakeHitboxColor
           Drawings.fakehitbox.Material = getgenv().Faith.Visuals.FakeHitboxMaterial
           Drawings.fakehitbox.Position = Vector3.new(target.Character.PrimaryPart.Position.X, target.Character.PrimaryPart.Position.Y, target.Character.HumanoidRootPart.Position.Z)
           Drawings.fakehitbox.Anchored = true
           Drawings.fakehitbox.CanCollide = false
           Drawings.fakehitbox.Parent = game.Workspace	
           Drawings.fakehitbox.Transparency = getgenv().Faith.Visuals.FakeHitboxTransparency
       end
   else
       Drawings.dotcircle.Visible = false

       Drawings.tracer.From = Vector2.new(0,0)
       Drawings.tracer.To = Vector2.new(0,0)

       Drawings.highlight.Enabled = false
       Drawings.scanparthighlight.Enabled = false

       Drawings.scanpart.Position = Vector3.new(0,0,0)

       Drawings.fakehitbox.Position = Vector3.new(999999, 99999999, 999999999)
       placemarker.CFrame = CFrame.new(999999, 9999999, 999999)
   end

   if getgenv().Faith.Main.AutoPrediction then
       local pingvalue = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
       local split = string.split(pingvalue,'(')
       local ping = tonumber(split[1])
       if ping < 40 then
           getgenv().Faith.Main.Prediction = 0.1198
       elseif ping < 40 then
           getgenv().Faith.Main.Prediction = 0.1192895
       elseif ping < 50 then
           getgenv().Faith.Main.Prediction = 0.12092895
       elseif ping < 60 then
           getgenv().Faith.Main.Prediction = 0.1329581
       elseif ping < 70 then
           getgenv().Faith.Main.Prediction = 0.1290346
       elseif ping < 80 then
           getgenv().Faith.Main.Prediction = 0.1324185126521
       elseif ping < 90 then
           getgenv().Faith.Main.Prediction = 0.131259832
       elseif ping < 80 then
           getgenv().Faith.Main.Prediction = 0.13425625982
       elseif ping < 110 then
           getgenv().Faith.Main.Prediction = 0.1372
       elseif ping < 125 then
           getgenv().Faith.Main.Prediction = 0.1424
       elseif ping < 130 then
           getgenv().Faith.Main.Prediction = 0.1423509
       elseif ping < 135 then
           getgenv().Faith.Main.Prediction = 0.142523
       elseif ping < 140 then
           getgenv().Faith.Main.Prediction = 0.1555209
       elseif ping < 145 then
           getgenv().Faith.Main.Prediction = 0.15125
       elseif ping < 150 then
           getgenv().Faith.Main.Prediction = 0.15925
       end
   end

   if getgenv().Faith.Main.Enabled and target and lockedon and getgenv().Faith.Extras.LookAt then
       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position, Vector3.new(target.Character.HumanoidRootPart.CFrame.X, game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position.Y, target.Character.HumanoidRootPart.CFrame.Z))
   end
end)

game:GetService("RunService").Heartbeat:Connect(function()
    if getgenv().Faith.Main.Enabled then
        if getgenv().Faith.Extras.KoCheck then
            if target and lockedon then
                if target.Character.BodyEffects["K.O"].Value == true then
                    target = nil
                end
            end
        end
    elseif getgenv().Faith.Extras.GrabCheck then
        if target and lockedon then
            if target.Character:FindFirstChild("GRABBING_CONSTRAINT") then
                target = nil
            end
        end
    elseif getgenv().Faith.Extras.VehicleCheck then
        if target and lockedon then
            if target.Character:FindFirstChild("[CarHitBox]") then
                target = nil
            end
        end
    end
end)

local currentClone = nil

function hitchams(player) 
    if currentClone then
        currentClone:Destroy()
    end

    player.Character.Archivable = true
    local Clone = player.Character:Clone()           
    for _, Obj in next, Clone:GetDescendants() do
        if Obj.Name == "HumanoidRootPart" or Obj:IsA("Humanoid") or Obj:IsA("LocalScript") or Obj:IsA("Script") or Obj:IsA("Decal") then
            Obj:Destroy()
        elseif Obj:IsA("BasePart") or Obj:IsA("MeshPart") or Obj:IsA("Part") then
            if Obj.Transparency == 1 then
                Obj:Destroy()
            else
                Obj.CanCollide = false
                Obj.Anchored = true
                Obj.Material = getgenv().Faith.HitDetects.HitChamsMaterial
                Obj.Color = getgenv().Faith.HitDetects.HitChamsColor
                Obj.Transparency = 0
                Obj.Size = Obj.Size + Vector3.new(0.03, 0.03, 0.03)
            end
        end
    end
    Clone.Parent = game.Workspace
    currentClone = Clone
    local start = tick()
    local connection
    connection = game:GetService("RunService").Heartbeat:Connect(function()
        if tick() - start >= getgenv().Faith.HitDetects.HitChamsDelay then
            connection:Disconnect() 
            Clone:Destroy()
            currentClone = nil
        end
    end)
end

--// Hit Effects
do
    --// Nova
    do
        local Part = Instance.new("Part")
        Part.Parent = game:GetService("ReplicatedStorage")

        local Attachment = Instance.new("Attachment")
        Attachment.Name = "Attachment"
        Attachment.Parent = Part

        getgenv().HitEffect = Attachment

        local ParticleEmitter = Instance.new("ParticleEmitter")
        ParticleEmitter.Name = "ParticleEmitter"
        ParticleEmitter.Acceleration = Vector3.new(0, 0, 1)
        ParticleEmitter.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
            ColorSequenceKeypoint.new(0.495, Color3.fromRGB(255, 0, 0)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0)),
        })
        ParticleEmitter.Lifetime = NumberRange.new(0.5, 0.5)
        ParticleEmitter.LightEmission = 1
        ParticleEmitter.LockedToPart = true
        ParticleEmitter.Rate = 1
        ParticleEmitter.Rotation = NumberRange.new(0, 360)
        ParticleEmitter.Size = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 1),
            NumberSequenceKeypoint.new(1, 10),
            NumberSequenceKeypoint.new(1, 1),
        })
        ParticleEmitter.Speed = NumberRange.new(0, 0)
        ParticleEmitter.Texture = "rbxassetid://1084991215"
        ParticleEmitter.Transparency = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 0),
            NumberSequenceKeypoint.new(0, 0.1),
            NumberSequenceKeypoint.new(0.534, 0.25),
            NumberSequenceKeypoint.new(1, 0.5),
            NumberSequenceKeypoint.new(1, 0),
        })
        ParticleEmitter.ZOffset = 1
        ParticleEmitter.Parent = Attachment
        local ParticleEmitter1 = Instance.new("ParticleEmitter")
        ParticleEmitter1.Name = "ParticleEmitter"
        ParticleEmitter1.Acceleration = Vector3.new(0, 1, -0.001)
        ParticleEmitter1.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
            ColorSequenceKeypoint.new(0.495, Color3.fromRGB(255, 0, 0)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0)),
        })
        ParticleEmitter1.Lifetime = NumberRange.new(0.5, 0.5)
        ParticleEmitter1.LightEmission = 1
        ParticleEmitter1.LockedToPart = true
        ParticleEmitter1.Orientation = Enum.ParticleOrientation.VelocityPerpendicular
        ParticleEmitter1.Rate = 1
        ParticleEmitter1.Rotation = NumberRange.new(0, 360)
        ParticleEmitter1.Size = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 1),
            NumberSequenceKeypoint.new(1, 10),
            NumberSequenceKeypoint.new(1, 1),
        })
        ParticleEmitter1.Speed = NumberRange.new(0, 0)
        ParticleEmitter1.Texture = "rbxassetid://1084991215"
        ParticleEmitter1.Transparency = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 0),
            NumberSequenceKeypoint.new(0, 0.1),
            NumberSequenceKeypoint.new(0.534, 0.25),
            NumberSequenceKeypoint.new(1, 0.5),
            NumberSequenceKeypoint.new(1, 0),
        })
        ParticleEmitter1.ZOffset = 1
        ParticleEmitter1.Parent = Attachment
    end
end

local Effect = function(Part, Color)
    local Clone = getgenv().HitEffect:Clone()
    Clone.Parent = Part

    for _, Effect in pairs(Clone:GetChildren()) do
        if Effect:IsA("ParticleEmitter") then
            Effect.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
                ColorSequenceKeypoint.new(0.495, getgenv().Faith.HitDetects.HitEffectColor),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0)),
            })
            Effect:Emit(1)
        end
    end

    task.delay(2, function()
        Clone:Destroy()
    end)
end

function get_gun()
    if game.Players.LocalPlayer then
        if game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Tool") then
            return true
        end
    end
   return false
end

local previous_ammo = nil
local prevHealth = nil
local prevArmor = nil

create_connection(game:GetService("RunService").RenderStepped, function(delta_time)
    if get_gun() and target and getgenv().Faith.Main.Enabled and lockedon then
        if target.Character and target.Character:FindFirstChild("HumanoidRootPart") and target.Character:FindFirstChild("Humanoid") then
            pcall(function()
                local tool = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
                if not tool:FindFirstChild("Ammo") then return end
                local current_ammo = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Tool").Ammo.value
    
                if previous_ammo ~= nil and current_ammo < previous_ammo then
                    local humanoid = target.Character.Humanoid 
                    local currentHealth = humanoid.Health
                    local currentArmor = target.Character.BodyEffects.Armor.Value

                    if (prevHealth and currentHealth < prevHealth) or (prevArmor and currentArmor < prevArmor) then
                        
                        if getgenv().Faith.HitDetects.HitLogs then
                            Menu.Notify("[<font color=\"rgb(189, 172, 255)\">Revise</font><font color=\"rgb(255, 255, 255)\">] -></font> +1 Hit | <font color=\"rgb(189, 172, 255)\">"..getgenv().Faith.Main.Part .. "</font><font color=\"rgb(255, 255, 255)\"> |</font> Target: <font color=\"rgb(189, 172, 255)\">"..tostring(target.DisplayName).. "</font><font color=\"rgb(255, 255, 255)\"> |</font> Health: "..tostring(math.round(target.Character.Humanoid.Health)))
                        end

                        if getgenv().Faith.HitDetects.HitSound then
                            local sound = Instance.new("Sound")
                            sound.Parent = game.Workspace
                            sound.Volume = getgenv().Faith.HitDetects.HitSoundVolume
                            sound.SoundId = getcustomasset(getgenv().Faith.HitDetects.HitSoundType)
                            sound:Play()
                            sound.Ended:Connect(function()
                                sound:Destroy()
                            end)
                        end

                        if getgenv().Faith.HitDetects.HitEffect then
                            Effect(target.Character.HumanoidRootPart)
                        end

                        if getgenv().Faith.HitDetects.HitChams then
                            hitchams(target)
                        end
                    end
                    prevHealth = currentHealth
                    prevArmor = currentArmor
                end
                previous_ammo = current_ammo
            end)
        end
    end
end)

local angle_Y = 0

game:GetService("RunService").Stepped:Connect(function (param,FPS)
    if getgenv().Faith.Main.Enabled then
        if getgenv().Faith.TargetStrafe.Enabled and target and lockedon then
            angle_Y = angle_Y + FPS * getgenv().Faith.TargetStrafe.Speed % 1
            if getgenv().Faith.TargetStrafe.Type == "Random" then
                for _, v in pairs(game:GetService("Workspace"):GetDescendants()) do
                    if v:IsA("Seat") then
                        v:Destroy()
                    end
                end
                lp.Character.HumanoidRootPart.CFrame = CFrame.new(target.Character.HumanoidRootPart.Position) * CFrame.Angles(math.random(900, 1000), math.random(900, 1000), math.random(900, 1000)) * CFrame.new(0, math.random(6), math.random(getgenv().Faith.TargetStrafe.Distance))
            elseif getgenv().Faith.TargetStrafe.Type == "Normal" then
                lp.Character.HumanoidRootPart.CFrame = CFrame.new(target.Character.HumanoidRootPart.Position) * CFrame.Angles(0, 2 * math.pi * angle_Y, 0) * CFrame.new(0, getgenv().Faith.TargetStrafe.Height, getgenv().Faith.TargetStrafe.Distance)
            end
        end
    end
end)

local ts = game:GetService("TweenService")
local Player = game:GetService("Players").LocalPlayer
local Notification = Instance.new("ScreenGui")
local Holder = Instance.new("Frame")
local UIListLayout = Instance.new("UIListLayout")

Notification.Name = "Notification"
Notification.Parent = game.CoreGui
Notification.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Holder.Name = "Holder"
Holder.Parent = Notification
Holder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Holder.BackgroundTransparency = 1.000
Holder.BorderColor3 = Color3.fromRGB(27, 42, 53)
Holder.Position = UDim2.new(0.0072954637, 0, 0.0105048735, 0)
Holder.Size = UDim2.new(0, 243, 0, 240)

UIListLayout.Parent = Holder
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0, 4)

local rainbowcolor

task.spawn(function()
  while wait() do
     local r = (math.sin(workspace.DistributedGameTime / 2) / 2) + 0.5
     local g = (math.sin(workspace.DistributedGameTime) / 2) + 0.5
     local b = (math.sin(workspace.DistributedGameTime * 1.5) / 2) + 0.5
     local color = Color3.new(r, g, b)
     rainbowcolor = color
  end
end)

function xznotify(text, time, rainbowmode)
  local Template = Instance.new("Frame")
  local ColorBar = Instance.new("Frame")
  local TextLabel = Instance.new("TextLabel")

  Template.Name = text
  Template.Parent = Holder
  Template.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
  Template.BorderColor3 = Color3.fromRGB(0, 0, 0)
  Template.Size = UDim2.new(0, 0, 0, 0)
  Template.Transparency = 1


  ColorBar.Name = "ColorBar"
  ColorBar.Parent = Template
  ColorBar.BackgroundColor3 = Color3.fromRGB(189, 172, 255)
  ColorBar.BorderSizePixel = 0
  ColorBar.Size = UDim2.new(0, 2, 0, 22)
  ColorBar.Transparency = 1
  if rainbowmode then 
     task.spawn(function()
        while wait() do
           ColorBar.BackgroundColor3 = rainbowcolor
        end
     end)
  end

  TextLabel.Parent = Template
  TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
  TextLabel.BackgroundTransparency = 1.000
  TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
  TextLabel.BorderSizePixel = 0
  TextLabel.Position = UDim2.new(0, 8, 0, 0)
  TextLabel.Size = UDim2.new(0, 0, 0, 22)
  TextLabel.Font = Enum.Font.Code
  TextLabel.Text = text
  TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
  TextLabel.TextSize = 14.000
  TextLabel.TextStrokeTransparency = 0.000
  TextLabel.TextXAlignment = Enum.TextXAlignment.Left
  TextLabel.Transparency = 1
  TextLabel.RichText = true

  Template.Size = UDim2.new(0, TextLabel.TextBounds.X + 13, 0, 22)
  local goal2 = {}
  goal2.Transparency = 0
  local tweenInfo2 = TweenInfo.new(0.5)
  local tween12 = ts:Create(Template, tweenInfo2, goal2)
  local tween22 = ts:Create(ColorBar, tweenInfo2, goal2)
  local tween32 = ts:Create(TextLabel, tweenInfo2, goal2)
  tween12:Play()
  tween22:Play()
  tween32:Play()

  delay(time, function()
     local goal = {}
     goal.Transparency = 1
     local tweenInfo = TweenInfo.new(0.5)
     local tween1 = ts:Create(Template, tweenInfo, goal)
     local tween2 = ts:Create(ColorBar, tweenInfo, goal)
     local tween3 = ts:Create(TextLabel, tweenInfo, goal)
     tween1:Play()
     tween2:Play()
     tween3:Play()
     delay(0.51, function()
        Template:Destroy()
     end)
  end)
end

local AkaliNotif = loadstring(game:HttpGet("https://raw.githubusercontent.com/laagginq/Evolution/main/akali.lua"))();
local gggg = AkaliNotif.Notify;

local notificationLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/laagginq/ui-libraries/main/xaxas-notification/src.lua"))();
local notifications = notificationLibrary.new({            
   NotificationLifetime = getgenv().Faith.Notifications.Delay, 
   NotificationPosition = "Middle",
   
   TextFont = Enum.Font.Code,
   TextColor = Color3.fromRGB(255, 255, 255),
   TextSize = 15,
   
   TextStrokeTransparency = 0, 
   TextStrokeColor = Color3.fromRGB(0, 0, 0)
});

notifications:BuildNotificationUI();

local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/vKhonshu/intro2/main/ui2"))()
local NotifyLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/vKhonshu/intro/main/ui"))()

game:GetService("UserInputService").InputBegan:connect(function(keybindya)
    if keybindya.KeyCode == getgenv().Faith.Main.Keybind then
        if getgenv().Faith.Main.Enabled then
            if lockedon then
                lockedon = false
                if getgenv().Faith.Notifications.Enable and getgenv().Faith.Notifications.Type == "Roblox" then
                    game:GetService("StarterGui"):SetCore("SendNotification",{
                        Title = "Faith",
                        Text = "Unlocked", 
                        Duration = getgenv().Faith.Notifications.Delay
                    })
                elseif getgenv().Faith.Notifications.Enable and getgenv().Faith.Notifications.Type == "Akali"  then
                    gggg({
                        Description = "Unlocked",
                        Title = "Faith",
                        Duration = getgenv().Faith.Notifications.Delay
                    })
                elseif getgenv().Faith.Notifications.Enable and getgenv().Faith.Notifications.Type == "xaxa" then 
                    notifications:Notify("Unlocked");
                elseif getgenv().Faith.Notifications.Enable and getgenv().Faith.Notifications.Type == "STX" then
                    Notification:Notify(
                        {Title = "Faith", Description = "Unlocked"},
                        {OutlineColor = Color3.fromRGB(189, 172, 255),Time = getgenv().Faith.Notifications.Delay, Type = "image"},
                        {Image = "rbxassetid://18105669352", ImageColor = Color3.fromRGB(189, 172, 255)}
                    )
                elseif getgenv().Faith.Notifications.Enable and getgenv().Faith.Notifications.Type == "vKhonshu" then
                    NotifyLib.prompt('Faith', 'Unlocked', getgenv().Faith.Notifications.Delay)
                elseif getgenv().Faith.Notifications.Enable and getgenv().Faith.Notifications.Type == "xz" then
                    xznotify("Unlocked",getgenv().Faith.Notifications.Delay,false)
                elseif getgenv().Faith.Notifications.Enable and getgenv().Faith.Notifications.Type == "Library" then
                    Menu.Notify("Unlocked", getgenv().Faith.Notifications.Delay)
                end
            else
                lockedon = true
                target = FindNearestTarget()
                if getgenv().Faith.Notifications.Enable and getgenv().Faith.Notifications.Type == "Roblox" then
                    game:GetService("StarterGui"):SetCore("SendNotification",{
                        Title = "Faith",
                        Text = "Locked on: " .. tostring(target.Character.Humanoid.DisplayName), 
                        Duration = getgenv().Faith.Notifications.Delay
                    })
                elseif getgenv().Faith.Notifications.Enable and getgenv().Faith.Notifications.Type == "Akali" then
                    gggg({
                        Description = "Locked on: " .. tostring(target.Character.Humanoid.DisplayName),
                        Title = "Faith",
                        Duration = getgenv().Faith.Notifications.Delay
                    })
                elseif getgenv().Faith.Notifications.Enable and getgenv().Faith.Notifications.Type == "xaxa" then
                    notifications:Notify("Locked on: " .. tostring(target.Character.Humanoid.DisplayName));
                elseif getgenv().Faith.Notifications.Enable and getgenv().Faith.Notifications.Type == "STX" then
                    Notification:Notify(
                        {Title = "Faith", Description = "Locked on: ".. tostring(target.Character.Humanoid.DisplayName)},
                        {OutlineColor = Color3.fromRGB(189, 172, 255),Time = getgenv().Faith.Notifications.Delay, Type = "image"},
                        {Image = "rbxassetid://18105669352", ImageColor = Color3.fromRGB(189, 172, 255)}
                    )
                elseif getgenv().Faith.Notifications.Enable and getgenv().Faith.Notifications.Type == "vKhonshu" then
                    NotifyLib.prompt('Faith', 'Locked on: ' .. tostring(target.Character.Humanoid.DisplayName), getgenv().Faith.Notifications.Delay)
                elseif getgenv().Faith.Notifications.Enable and getgenv().Faith.Notifications.Type == "xz" then
                    xznotify("Locked on: ".. tostring(target.Character.Humanoid.DisplayName),getgenv().Faith.Notifications.Delay,false)
                elseif getgenv().Faith.Notifications.Enable and getgenv().Faith.Notifications.Type == "Library" then
                    Menu.Notify("Locked on: ".. tostring(target.Character.Humanoid.DisplayName), getgenv().Faith.Notifications.Delay)
                end
            end
        end
    end
end)

game:GetService("RunService").Heartbeat:connect(function()
    if lockedon and target and getgenv().Faith.Main.Enabled then
        targetresolverpos = recalculate_velocity(target)
    end
end)

local function LockOn()
    if not target then return end

    if target.Character:FindFirstChildOfClass("Humanoid"):GetState() == Enum.HumanoidStateType.Freefall then
        if game.PlaceId == 9825515356 then
            if getgenv().Faith.Resolver.Enable and target and getgenv().Faith.Main.Enabled and lockedon and getgenv().Faith.Resolver.Type == "Move Direction" then
                if getgenv().Faith.Main.Enabled and lockedon then
                    game:GetService("ReplicatedStorage").MainEvent:FireServer(getgenv().Faith.Main.MousePosMethods, target.Character[getgenv().Faith.Main.Part].Position + (target.Character.Humanoid.MoveDirection * target.Character.Humanoid.WalkSpeed * getgenv().Faith.Main.PredictionY) + Vector3.new(25, 100, 25))
                end
            elseif getgenv().Faith.Resolver.Enable and target and getgenv().Faith.Main.Enabled and lockedon and getgenv().Faith.Resolver.Type == "Velocity Recalculation" then
                game:GetService('ReplicatedStorage').MainEvent:FireServer(getgenv().Faith.Main.MousePosMethods, target.Character.HumanoidRootPart.Position + (targetresolverpos * getgenv().Faith.Main.PredictionY))
            else
                if getgenv().Faith.Main.Enabled and lockedon then
                    game:GetService("ReplicatedStorage").MainEvent:FireServer(getgenv().Faith.Main.MousePosMethods, target.Character[getgenv().Faith.Main.Part].Position + (target.Character[getgenv().Faith.Main.Part].Velocity * getgenv().Faith.Main.PredictionY) + Vector3.new(25, 100, 25))
                end
            end
        else
            if getgenv().Faith.Resolver.Enable and target and getgenv().Faith.Main.Enabled and lockedon and getgenv().Faith.Resolver.Type == "Move Direction" then
                if getgenv().Faith.Main.Enabled and lockedon then
                    game:GetService("ReplicatedStorage").MainEvent:FireServer(getgenv().Faith.Main.MousePosMethods, target.Character[getgenv().Faith.Main.Part].Position + (target.Character.Humanoid.MoveDirection * target.Character.Humanoid.WalkSpeed * getgenv().Faith.Main.PredictionY))
                end
            elseif getgenv().Faith.Resolver.Enable and target and getgenv().Faith.Main.Enabled and lockedon and getgenv().Faith.Resolver.Type == "Velocity Recalculation" then
                game:GetService('ReplicatedStorage').MainEvent:FireServer(getgenv().Faith.Main.MousePosMethods, target.Character.HumanoidRootPart.Position + (targetresolverpos * getgenv().Faith.Main.PredictionY))
            else
                if getgenv().Faith.Main.Enabled and lockedon then
                    game:GetService("ReplicatedStorage").MainEvent:FireServer(getgenv().Faith.Main.MousePosMethods, target.Character[getgenv().Faith.Main.Part].Position + (target.Character[getgenv().Faith.Main.Part].Velocity * getgenv().Faith.Main.PredictionY))
                end
            end
        end
    else
        if game.PlaceId == 9825515356 then
            if getgenv().Faith.Resolver.Enable and target and getgenv().Faith.Main.Enabled and lockedon and getgenv().Faith.Resolver.Type == "Move Direction" then
                if getgenv().Faith.Main.Enabled and lockedon then
                    game:GetService("ReplicatedStorage").MainEvent:FireServer(getgenv().Faith.Main.MousePosMethods, target.Character[getgenv().Faith.Main.Part].Position + (target.Character.Humanoid.MoveDirection * target.Character.Humanoid.WalkSpeed * getgenv().Faith.Main.PredictionY) + Vector3.new(25, 100, 25))
                end
            else
                if getgenv().Faith.Main.Enabled and lockedon then
                    game:GetService("ReplicatedStorage").MainEvent:FireServer(getgenv().Faith.Main.MousePosMethods, target.Character[getgenv().Faith.Main.Part].Position + (target.Character[getgenv().Faith.Main.Part].Velocity * getgenv().Faith.Main.Prediction) + Vector3.new(25, 100, 25))
                end
            end
        else
            if getgenv().Faith.Resolver.Enable and target and getgenv().Faith.Main.Enabled and lockedon and getgenv().Faith.Resolver.Type == "Move Direction" then
                if getgenv().Faith.Main.Enabled and lockedon then
                    game:GetService("ReplicatedStorage").MainEvent:FireServer(getgenv().Faith.Main.MousePosMethods, target.Character[getgenv().Faith.Main.Part].Position + (target.Character.Humanoid.MoveDirection * target.Character.Humanoid.WalkSpeed * getgenv().Faith.Main.Prediction))
                end
            elseif getgenv().Faith.Resolver.Enable and target and getgenv().Faith.Main.Enabled and lockedon and getgenv().Faith.Resolver.Type == "Velocity Recalculation" then
                game:GetService('ReplicatedStorage').MainEvent:FireServer(getgenv().Faith.Main.MousePosMethods, target.Character.HumanoidRootPart.Position + (targetresolverpos * getgenv().Faith.Main.Prediction))
            else
                if getgenv().Faith.Main.Enabled and lockedon then
                    game:GetService("ReplicatedStorage").MainEvent:FireServer(getgenv().Faith.Main.MousePosMethods, target.Character[getgenv().Faith.Main.Part].Position + (target.Character[getgenv().Faith.Main.Part].Velocity * getgenv().Faith.Main.Prediction))
                end
            end
        end
    end
end

game.Players.LocalPlayer.Character.ChildAdded:Connect(function(toolg)
    if toolg:IsA("Tool") then 
        toolg.Activated:Connect(function()
			if target ~= nil and lockedon then
                LockOn()
			end
        end)
    end
end)

game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(fakingshit)
    fakingshit.ChildAdded:Connect(function(toole)
        toole.Activated:connect(function()
            if target ~= nil and lockedon then
                LockOn()
            end
        end)
    end)
end)

-- highlight localplayer source
local LocalHL = Instance.new("Highlight")

task.spawn(function ()
    while true do
        wait()
        if getgenv().LocalHighlight.Enabled then
            LocalHL.Parent = game.Players.LocalPlayer.Character
            LocalHL.FillColor = getgenv().LocalHighlight.FillColor
            LocalHL.FillTransparency = getgenv().LocalHighlight.FillTransparency
            LocalHL.OutlineColor = getgenv().LocalHighlight.OutlineColor
            LocalHL.OutlineTransparency = getgenv().LocalHighlight.OutlineTransparency
        else
            LocalHL.Parent = game.CoreGui
        end
    end
end)

-- gun chams source
task.spawn(function ()
    while true do
        wait()
        if getgenv().GunChams.Enabled then
            if game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Tool") then
                game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Tool").Default.Material = getgenv().GunChams.Material
                game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Tool").Default.Color = getgenv().GunChams.Color
            end
        else
            if game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Tool") then
                game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Tool").Default.Material = "Plastic"
            end
        end
    end
end)

-- anti bag source
if getgenv().AntiBag.Enabled then
    if LocalPlayer.Character["Christmas_Sock"] then
        LocalPlayer.Character["Christmas_Sock"]:Destroy()
    end
end

--anti stomp source
if getgenv().AntiStomp.Enabled then
    if game.Players.LocalPlayer.Character.Humanoid.Health <= 1 then
        for i, v in pairs(LocalPlayer.Character:GetDescendants()) do
            if v:IsA("BasePart") then
                v:Destroy()
            end
        end
    end
end

-- clone chams source
task.spawn(function ()
    while true do
        wait()
        if getgenv().CloneChams.Enabled then
            repeat
                game.Players.LocalPlayer.Character.Archivable = true
                local Cloneyaaa = game.Players.LocalPlayer.Character:Clone()
                for _,Obj in next, Cloneyaaa:GetDescendants() do
                if Obj.Name == "HumanoidRootPart" or Obj:IsA("Humanoid") or Obj:IsA("LocalScript") or Obj:IsA("Script") or Obj:IsA("Decal") then
                    Obj:Destroy()
                elseif Obj:IsA("BasePart") or Obj:IsA("Meshpart") or Obj:IsA("Part") then
                    if Obj.Transparency == 1 then
                    Obj:Destroy()
                    else
                    Obj.CanCollide = false
                    Obj.Anchored = true
                    Obj.Material = getgenv().CloneChams.Material
                    Obj.Color = getgenv().CloneChams.Color
                    Obj.Transparency = 0
                    Obj.Size = Obj.Size + Vector3.new(0.03, 0.03, 0.03)   
                end
            end
                pcall(function()
                    Obj.CanCollide = false
                end)
            end
            Cloneyaaa.Parent = game.Workspace
            wait(getgenv().CloneChams.Duration)
            Cloneyaaa:Destroy()  
            until getgenv().CloneChams.Enabled == false
        end
    end
end)

-- ESP source
local workspace = game:GetService("Workspace")
local plrs = game:GetService("Players")
local rs = game:GetService("RunService")
local camera = workspace.CurrentCamera
local world_to_viewport = camera.WorldToViewportPoint

getgenv().players = {}
local player = {}
player.__index = player

function vector2_floor(vector2)
    return Vector2.new(math.floor(vector2.X), math.floor(vector2.Y))
end

function cframe_to_viewport(cframe, floor)
    local position, visible = world_to_viewport(camera, cframe * (cframe - cframe.p):ToObjectSpace(camera.CFrame - camera.CFrame.p).p)
    if floor then
        position = vector2_floor(position)
    end
    return position, visible
end

function Check(player)
    
    local character = player.Character
    local rootpart = character and character:FindFirstChild('HumanoidRootPart')
    local torso = character and character:FindFirstChild('UpperTorso')
    local humanoid = rootpart and character:FindFirstChild('Humanoid')
    local bodyeffects = character and character:FindFirstChild('BodyEffects')

    if not humanoid or 0 >= humanoid.Health then
        return false
    end

    local screen_position, screen_visible = cframe_to_viewport(torso.CFrame * CFrame.new(0, -0.25, 0), true)

    if not screen_visible then
        return false
    end

    return true, {
        character = character,
        rootpart = rootpart,
        humanoid = humanoid,
        bodyeffects = bodyeffects,
        position = screen_position,
        cframe = rootpart.CFrame * CFrame.new(0, -0.25, 0),
        health = humanoid.Health,
        maxhealth = humanoid.MaxHealth,
        healthfactor = humanoid.Health / humanoid.MaxHealth,
        distance = (rootpart.CFrame.p - camera.CFrame.p).magnitude
    }
    
end

local storage = {
    Drawings = {},
}

function storage:create_drawing(drawing_class, drawing_properties)
    local drawing = Drawing.new(drawing_class)
    local properties = drawing_properties or {}

    for i,v in next, properties do
        drawing[i] = v
    end
    
    table.insert(self.Drawings, drawing)
    return drawing
end

function GetBarData(data) -- progress should be a number 0-1, you can get this by doing value / maxvalue aka armor / maxarmor
    return {
        ['health'] = { progress = data.healthfactor },
        ['armor'] = { progress = data.armorfactor }
    }
end

function GetBoxSize(position, cframe)
    local distance = (camera.CFrame.p - cframe.p).magnitude
    local factor = 1 / ((distance / 3) * math.tan(math.rad(camera.FieldOfView / 2)) * 2) * 1000
    return Vector2.new(math.clamp(math.floor(factor * 1.3), 3, math.huge), math.clamp(math.floor(factor * 2.1), 6, math.huge))
end

local layout = 'left'
local layouttext = 'top'
local layouttracer = 'bottom'

local function upd_esp(v)
    local line = Drawing.new("Line")
    line.Thickness = 1
    line.Color = Color3.fromRGB(244, 244, 244)
    line.ZIndex = 500
    local lineoutlinetracer = Drawing.new("Line")
    lineoutlinetracer.Thickness = 1.75
    lineoutlinetracer.Color = Color3.fromRGB(1, 1, 1)
    lineoutlinetracer.ZIndex = 499

    local box = Drawing.new("Square")
    local boxoutline = Drawing.new("Square")

    local highlight = Instance.new('Highlight')

    local nametag = Drawing.new("Text")

    local healthbar = storage:create_drawing('Square', {
        Filled = true,
        Thickness = 1,
        ZIndex = 500,
    })
    local healthbaroutline = storage:create_drawing('Square', {
        Thickness = 1.45,
        ZIndex = 499,
    })

    local function intialize_esp()
        local connection
        connection = rs.Heartbeat:Connect(function ()
            if v.Character ~= nil and v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("HumanoidRootPart") ~= nil and v.Character.Humanoid.Health > 0 and v.Character:FindFirstChild("Head") ~= nil then
                local pos, onscreen = workspace.CurrentCamera:WorldToViewportPoint(v.Character.LowerTorso.Position)

                if onscreen then
                    local check_pass, check_data = Check(v)

                    local size = GetBoxSize(check_data.position, check_data.cframe)
                    local position = vector2_floor(check_data.position - size / 2)

                    local bar_data = GetBarData(check_data)
                    local bar_positions = { top = 0, bottom = 0, left = 0, right = 0 }

                    if config.enabled == true then
    
                        if config.HealthBar.enabled then
                            local progress = v.Character.Humanoid.Health / v.Character.Humanoid.MaxHealth
                            local vertical = layout == 'left' or layout == 'right'
        
                            healthbar.Visible = true
                            healthbaroutline.Visible = true
        
                            healthbar.Size = vertical and Vector2.new(3, size.Y + 4) or Vector2.new(size.X + 2, 3)
                            healthbar.Position = position + (
                                layout == 'top' and Vector2.new(-1, -(5 + bar_positions.top)) or
                                layout == 'bottom' and Vector2.new(-1, size.Y + 2 + bar_positions.bottom) or
                                layout == 'left' and Vector2.new(-5-bar_positions.left, -1) or
                                layout == 'right' and Vector2.new(size.X + 2 + bar_positions.right, -1)
                            )
        
                            healthbar.Color = config.HealthBar.lowhealth:lerp(config.HealthBar.maxhealth, progress)
                            healthbar.Size = vertical and Vector2.new(1, progress * size.Y + 2) or Vector2.new(progress * size.X, 1 + 2)
    
                            healthbaroutline.Size = healthbar.Size
                            healthbaroutline.Position = healthbar.Position
                            healthbaroutline.Color = Color3.fromRGB(1,1,1)
    
                            if vertical then
                                healthbar.Position = healthbar.Position + Vector2.new(1,1 + size.Y - progress * size.Y)
                                healthbaroutline.Position = healthbar.Position
                            else
                                healthbar.Position = healthbar.Position + Vector2.new(size.X - progress * size.X ,1)
                                healthbaroutline.Position = healthbar.Position
                            end
                            healthbaroutline.Position = healthbar.Position
                        else
                            healthbar.Visible = false
                            healthbaroutline.Visible = false
                        end

                        if config.Misc.Teamcheck.enable then
                            if v.Team == plrs.LocalPlayer.Team then
                                line.Color = config.Misc.Teamcheck.friendly
                                box.Color = config.Misc.Teamcheck.friendly
                                highlight.FillColor = config.Misc.Teamcheck.friendly
                                highlight.OutlineColor = config.Misc.Teamcheck.friendly
                            else 
                                line.Color = config.Misc.Teamcheck.enemy
                                box.Color = config.Misc.Teamcheck.enemy
                                highlight.FillColor = config.Misc.Teamcheck.enemy
                                highlight.OutlineColor = config.Misc.Teamcheck.enemy
                            end
                        else 
                            line.Color = config.Tracer.color
                            box.Color = config.Box.color
                            highlight.FillColor = config.Chams.fillcolor
                            highlight.OutlineColor = config.Chams.outlinecolor
                        end

                        if config.Tracer.enabled then
                            line.Visible = true
                            lineoutlinetracer.Visible = true
                            line.Thickness = 1
                            lineoutlinetracer.Thickness = 3
    
                            if layouttext then
                                line.To = vector2_floor(check_data.position - size / 2) + (Vector2.new(size.X / 2, size.Y + 0 + 2)) 
                                line.From = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y)
    
                                lineoutlinetracer.To = vector2_floor(check_data.position - size / 2) + (Vector2.new(size.X / 2, size.Y + 0 + 2)) 
                                lineoutlinetracer.From = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y)
                            else
                                line.To = vector2_floor(check_data.position - size / 2) + (Vector2.new(size.X / 2, size.Y + 0 + 2)) 
                                line.From = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y)
    
                                lineoutlinetracer.To = vector2_floor(check_data.position - size / 2) + (Vector2.new(size.X / 2, size.Y + 0 + 2)) 
                                lineoutlinetracer.From = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y)
                            end
                        else
                            line.Visible = false
                            lineoutlinetracer.Visible = false
                            line.To = Vector2.new(0,02)
                            line.From = Vector2.new(0,02)

                            lineoutlinetracer.To = Vector2.new(0,02)
                            lineoutlinetracer.From = Vector2.new(0,02)
                            line.Thickness = 0
                            lineoutlinetracer.Thickness = 0
                        end

                        if config.Box.enabled then
                            box.Visible = true
                            box.Size = size
                            box.Position = position
                            box.ZIndex = 500
                            box.Thickness = 1
        
                            boxoutline.Visible = true
                            boxoutline.Size = size
                            boxoutline.Thickness = 2
                            boxoutline.Position = position
                            boxoutline.Color = Color3.fromRGB(1, 1, 1)
                            boxoutline.ZIndex = 499
                        else
                            box.Visible = false
                            boxoutline.Visible = false
                        end

                        if config.Name.enabled then
                            local progress = v.Character.Humanoid.Health / v.Character.Humanoid.MaxHealth
                            local text_data = v.DisplayName
                            local text_positions = { top = bar_positions.top, bottom = bar_positions.bottom, left = 0, right = 0 }
                            nametag.Visible = true
                            nametag.Size = 10
                            nametag.Color = config.Name.color
                            nametag.Outline = true
                            nametag.Text = text_data
    
                            if layouttext then
                                nametag.Position = position + (
                                    layouttext == 'left' and Vector2.new(-(bar_positions.left + nametag.TextBounds.X + 2), size.Y - progress * size.Y - 3) or
                                    layouttext == 'top' and Vector2.new(size.X / 2 - 6, -6 - (text_positions.top + 9)) or
                                    layouttext == 'right' and Vector2.new(size.X + bar_positions.right + 2, size.Y - progress * size.Y -3)               
                                )
                            else
                                nametag.Position = position + (
                                    layouttext == 'top' and Vector2.new(size.X / 2 - 6, -6 - (text_positions.top + 9)) or
                                    layouttext == 'bottom' and Vector2.new(size.X / 2, size.Y + text_positions.bottom + 2) or
                                    layouttext == 'left' and Vector2.new(-(bar_positions.left + nametag.TextBounds.X + 2), text_positions.left - 3) or
                                    layouttext == 'right' and Vector2.new(size.X + bar_positions.right + 2, size.Y + text_positions.right - 3)               
                                ) 
                            end
                        else
                            nametag.Visible = false
                        end

                        if config.Chams.enabled then
                            highlight.Enabled = true
                            highlight.FillTransparency = config.Chams.filltransparency
                            highlight.OutlineTransparency = config.Chams.outlinetransparency
                            highlight.Parent = check_data.character
                            highlight.Adornee = check_data.character
                            highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                        else
                            highlight.Enabled = false
                        end
                    else
                        box.Visible = false
                        boxoutline.Visible = false
                        line.Visible = false
                        highlight.Enabled = false
                        healthbar.Visible = false
                        healthbaroutline.Visible = false
                        nametag.Visible = false
                        lineoutlinetracer.Visible = false
                        boxinline.Visible = false
                    end
                else
                    box.Visible = false
                    boxoutline.Visible = false
                    line.Visible = false
                    highlight.Enabled = false
                    healthbar.Visible = false
                    healthbaroutline.Visible = false
                    nametag.Visible = false
                    lineoutlinetracer.Visible = false
                    boxinline.Visible = false
                end
            else
                box.Visible = false
                boxoutline.Visible = false
                line.Visible = false
                highlight.Enabled = false
                healthbar.Visible = false
                healthbaroutline.Visible = false
                nametag.Visible = false
                lineoutlinetracer.Visible = false
                boxinline.Visible = false
                if v.Name == nil then
                    connection:Disconnect()
                end
            end
        end)
    end
    coroutine.wrap(intialize_esp)()
end

for i, v in pairs(game:GetService("Players"):GetPlayers()) do
    if v.Name ~= plrs.LocalPlayer.Name then
        coroutine.wrap(upd_esp)(v)
    end
end

game.Players.PlayerAdded:Connect(function(newplr)
    coroutine.wrap(upd_esp)(newplr)
end)

-- auto peek source
local character = game.Players.LocalPlayer.Character
local humanoid = character:WaitForChild("Humanoid")
local savedPosition = nil
local newPart2 = nil

game:GetService("UserInputService").InputBegan:Connect(function(inputObject)
    if inputObject.KeyCode == getgenv().autopeekkeybind then
        if getgenv().autopeek == true then
            if savedPosition == nil then
                savedPosition = character.HumanoidRootPart.Position
                if newPart2 ~= nil then
                    newPart2:Destroy()
                end
                newPart2 = Instance.new("Part")
                newPart2.Parent = character
                newPart2.Anchored = true
                newPart2.Position = savedPosition
                newPart2.Size = Vector3.new(1.47, 1.47, 1.47)
                newPart2.Color = getgenv().autopeekcolor
                newPart2.CanCollide = false
                newPart2.Material = getgenv().autopeekmaterial
                newPart2.Transparency = getgenv().autopeektransparency
            else
                character.HumanoidRootPart.CFrame = CFrame.new(savedPosition)
                savedPosition = nil
                newPart2:Destroy()
            end
        end
    end
end)

-- movement
local rs = game:GetService("RunService")
  
rs.Heartbeat:Connect(function()
     task.wait(1)
     for _, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
         if v:IsA("Script") and v.Name ~= "Health" and v.Name ~= "Sound" and v:FindFirstChild("LocalScript") then
             v:Destroy()
         end
     end
     game.Players.LocalPlayer.CharacterAdded:Connect(function(charkok)
         repeat
             wait()
         until game.Players.LocalPlayer.Character
         charkok.ChildAdded:Connect(function(childb)
             if childb:IsA("Script") then 
                 wait(0.1)
                 if childb:FindFirstChild("LocalScript") then
                    childb.LocalScript:FireServer()
                 end
             end
         end)
     end)
  end)
  
  repeat
     wait()
  until game:IsLoaded()
  local L_134_ = game:service('Players')
  local L_135_ = L_134_.LocalPlayer
  repeat
     wait()
  until L_135_.Character
  local L_136_ = game:service('UserInputService')
  local L_138_ = true
  L_136_.InputBegan:connect(function(L_140_arg0)
     if L_140_arg0.KeyCode == getgenv().Faith_CFrame.Keybind then
         L_138_ = not L_138_
         if L_138_ == true and getgenv().Faith_CFrame.Enabled then
             repeat
                 game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + game.Players.LocalPlayer.Character.Humanoid.MoveDirection * getgenv().Faith_CFrame.Speed
                 game:GetService("RunService").Stepped:wait()
             until L_138_ == false
         end
     end
end)

game:GetService("RunService").Heartbeat:Connect(function()
	if Movement.FlightEnabled and not getgenv().Sonic_Anti.Enabled then
		local FlyVelocity = Vector3.new(0, 0.9, 0)

		if not game:GetService("UserInputService"):GetFocusedTextBox() then
			if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.W) then
				FlyVelocity = FlyVelocity + (Workspace.CurrentCamera.CoordinateFrame.lookVector * Movement.FlightAmount)
			end

			if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.A) then
				FlyVelocity = FlyVelocity + (Workspace.CurrentCamera.CoordinateFrame.rightVector * -Movement.FlightAmount)
			end

			if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.S) then
				FlyVelocity = FlyVelocity + (Workspace.CurrentCamera.CoordinateFrame.lookVector * -Movement.FlightAmount)
			end

			if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.D) then
				FlyVelocity = FlyVelocity + (Workspace.CurrentCamera.CoordinateFrame.rightVector * Movement.FlightAmount)
			end
		end

		game.Players.LocalPlayer.Character.HumanoidRootPart.AssemblyLinearVelocity = FlyVelocity
		game.Players.LocalPlayer.Character.Humanoid:ChangeState("Freefall")
	end
end)
  
game:GetService("RunService").Stepped:Connect(function()
    game:GetService("Players").LocalPlayer.Character.Humanoid.UseJumpPower = not Utilities.NoJumpCooldown
end)
  
game:GetService("RunService").Stepped:Connect(function()
    if Utilities.NoSlowdown then
       local Slowdowns = game:GetService("Players").LocalPlayer.Character.BodyEffects.Movement:FindFirstChild("NoJumping") or game:GetService("Players").LocalPlayer.Character.BodyEffects.Movement:FindFirstChild("ReduceWalk") or game:GetService("Players").LocalPlayer.Character.BodyEffects.Movement:FindFirstChild("NoWalkSpeed")
  
       if Slowdowns then
          Slowdowns:Destroy()
       end
  
       if game:GetService("Players").LocalPlayer.Character.BodyEffects.Reload.Value then
          game:GetService("Players").LocalPlayer.Character.BodyEffects.Reload.Value = false
       end
  
       if game:GetService("Players").LocalPlayer.Character.BodyEffects.Reloading.Value then
          game:GetService("Players").LocalPlayer.Character.BodyEffects.Reloading.Value = false
       end
    end

    if Utilities.AutoStomp then
       game:GetService("ReplicatedStorage").MainEvent:FireServer("Stomp")
    end
  
    if Utilities.AutoReload and game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA("Tool").Ammo.Value <= 0 then
       game:GetService("ReplicatedStorage").MainEvent:FireServer("Reload", game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA("Tool"))
    end

    if Movement.AutoJump and game:GetService("Players").LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall and game:GetService("Players").LocalPlayer.Character.Humanoid.MoveDirection.Magnitude > 0 then
       game:GetService("Players").LocalPlayer.Character.Humanoid:ChangeState("Jumping")
    end
  
    if Movement.BunnyHop and game:GetService("Players").LocalPlayer.Character.Humanoid.FloorMaterial == Enum.Material.Air then
       game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame + game:GetService("Players").LocalPlayer.Character.Humanoid.MoveDirection * Movement.HopAmount
    end
end)
